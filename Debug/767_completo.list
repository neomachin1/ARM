
767_completo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005384  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005584  08005584  00015584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055e0  080055e0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080055e0  080055e0  000155e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055e8  080055e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055e8  080055e8  000155e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055ec  080055ec  000155ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080055f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  20000070  08005660  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  08005660  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001657c  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b5  00000000  00000000  0003661a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00038fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  0003a190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288f1  00000000  00000000  0003b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015230  00000000  00000000  00063b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001011a6  00000000  00000000  00078d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179f0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f5c  00000000  00000000  00179f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800556c 	.word	0x0800556c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800556c 	.word	0x0800556c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08c      	sub	sp, #48	; 0x30
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fda6 	bl	800112e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f835 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fa4f 	bl	8000a88 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ea:	f000 f9ef 	bl	80009cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ee:	f000 fa1d 	bl	8000a2c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80005f2:	f000 f89f 	bl	8000734 <MX_ADC1_Init>
  MX_ADC3_Init();
 80005f6:	f000 f8ef 	bl	80007d8 <MX_ADC3_Init>
  MX_TIM1_Init();
 80005fa:	f000 f93f 	bl	800087c <MX_TIM1_Init>
  MX_TIM2_Init();
 80005fe:	f000 f997 	bl	8000930 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t cnt=0;
 8000602:	2300      	movs	r3, #0
 8000604:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint8_t tara=0;
 8000606:	2300      	movs	r3, #0
 8000608:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  char msg[40];
  HAL_TIM_Base_Start(&htim1);
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <main+0x6c>)
 800060e:	f002 fe53 	bl	80032b8 <HAL_TIM_Base_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //cnt++;
	  HAL_Delay(250);
 8000612:	20fa      	movs	r0, #250	; 0xfa
 8000614:	f000 fde8 	bl	80011e8 <HAL_Delay>
	  cnt = __HAL_TIM_GetCounter(&htim1);
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <main+0x6c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061e:	85fb      	strh	r3, [r7, #46]	; 0x2e

	  tara = sprintf(msg, "contador: %hu\r\n", cnt);
 8000620:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	4908      	ldr	r1, [pc, #32]	; (8000648 <main+0x70>)
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fb72 	bl	8004d10 <siprintf>
 800062c:	4603      	mov	r3, r0
 800062e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	  HAL_UART_Transmit(&huart3, msg, tara, 10);
 8000632:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000636:	b29a      	uxth	r2, r3
 8000638:	1d39      	adds	r1, r7, #4
 800063a:	230a      	movs	r3, #10
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <main+0x74>)
 800063e:	f003 fba1 	bl	8003d84 <HAL_UART_Transmit>
  {
 8000642:	e7e6      	b.n	8000612 <main+0x3a>
 8000644:	200005b0 	.word	0x200005b0
 8000648:	08005584 	.word	0x08005584
 800064c:	20000098 	.word	0x20000098

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2234      	movs	r2, #52	; 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fb4e 	bl	8004d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000674:	f001 fc90 	bl	8001f98 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	4b2c      	ldr	r3, [pc, #176]	; (800072c <SystemClock_Config+0xdc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a2b      	ldr	r2, [pc, #172]	; (800072c <SystemClock_Config+0xdc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <SystemClock_Config+0xdc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <SystemClock_Config+0xe0>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000698:	4a25      	ldr	r2, [pc, #148]	; (8000730 <SystemClock_Config+0xe0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <SystemClock_Config+0xe0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c0:	2304      	movs	r3, #4
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006c4:	2360      	movs	r3, #96	; 0x60
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fcbd 	bl	8002058 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e4:	f000 fa8a 	bl	8000bfc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e8:	f001 fc66 	bl	8001fb8 <HAL_PWREx_EnableOverDrive>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006f2:	f000 fa83 	bl	8000bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2103      	movs	r1, #3
 8000712:	4618      	mov	r0, r3
 8000714:	f001 ff4e 	bl	80025b4 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800071e:	f000 fa6d 	bl	8000bfc <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_ADC1_Init+0x98>)
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <MX_ADC1_Init+0x9c>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_ADC1_Init+0x98>)
 800074e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000752:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_ADC1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_ADC1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_ADC1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_ADC1_Init+0x98>)
 8000776:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <MX_ADC1_Init+0xa0>)
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_ADC1_Init+0x98>)
 8000782:	2201      	movs	r2, #1
 8000784:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_ADC1_Init+0x98>)
 8000790:	2201      	movs	r2, #1
 8000792:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_ADC1_Init+0x98>)
 8000796:	f000 fd4b 	bl	8001230 <HAL_ADC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007a0:	f000 fa2c 	bl	8000bfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007a4:	2303      	movs	r3, #3
 80007a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_ADC1_Init+0x98>)
 80007b6:	f000 fd7f 	bl	80012b8 <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007c0:	f000 fa1c 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000520 	.word	0x20000520
 80007d0:	40012000 	.word	0x40012000
 80007d4:	0f000001 	.word	0x0f000001

080007d8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007de:	463b      	mov	r3, r7
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007ea:	4b21      	ldr	r3, [pc, #132]	; (8000870 <MX_ADC3_Init+0x98>)
 80007ec:	4a21      	ldr	r2, [pc, #132]	; (8000874 <MX_ADC3_Init+0x9c>)
 80007ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_ADC3_Init+0x98>)
 80007f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007f6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_ADC3_Init+0x98>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_ADC3_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_ADC3_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_ADC3_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_ADC3_Init+0x98>)
 8000814:	2200      	movs	r2, #0
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <MX_ADC3_Init+0x98>)
 800081a:	4a17      	ldr	r2, [pc, #92]	; (8000878 <MX_ADC3_Init+0xa0>)
 800081c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <MX_ADC3_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_ADC3_Init+0x98>)
 8000826:	2201      	movs	r2, #1
 8000828:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_ADC3_Init+0x98>)
 800082c:	2200      	movs	r2, #0
 800082e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_ADC3_Init+0x98>)
 8000834:	2201      	movs	r2, #1
 8000836:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_ADC3_Init+0x98>)
 800083a:	f000 fcf9 	bl	8001230 <HAL_ADC_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000844:	f000 f9da 	bl	8000bfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000848:	2309      	movs	r3, #9
 800084a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084c:	2301      	movs	r3, #1
 800084e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000854:	463b      	mov	r3, r7
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_ADC3_Init+0x98>)
 800085a:	f000 fd2d 	bl	80012b8 <HAL_ADC_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000864:	f000 f9ca 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000568 	.word	0x20000568
 8000874:	40012200 	.word	0x40012200
 8000878:	0f000001 	.word	0x0f000001

0800087c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2224      	movs	r2, #36	; 0x24
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f004 fa38 	bl	8004d00 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_TIM1_Init+0xac>)
 800089c:	4a23      	ldr	r2, [pc, #140]	; (800092c <MX_TIM1_Init+0xb0>)
 800089e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008a0:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_TIM1_Init+0xac>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_TIM1_Init+0xac>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 128;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_TIM1_Init+0xac>)
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_TIM1_Init+0xac>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_TIM1_Init+0xac>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_TIM1_Init+0xac>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008cc:	2301      	movs	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008dc:	2301      	movs	r3, #1
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4619      	mov	r1, r3
 80008ee:	480e      	ldr	r0, [pc, #56]	; (8000928 <MX_TIM1_Init+0xac>)
 80008f0:	f002 fd52 	bl	8003398 <HAL_TIM_Encoder_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80008fa:	f000 f97f 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800090a:	463b      	mov	r3, r7
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <MX_TIM1_Init+0xac>)
 8000910:	f003 f93e 	bl	8003b90 <HAL_TIMEx_MasterConfigSynchronization>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800091a:	f000 f96f 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	3730      	adds	r7, #48	; 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200005b0 	.word	0x200005b0
 800092c:	40010000 	.word	0x40010000

08000930 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000936:	f107 0310 	add.w	r3, r7, #16
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_TIM2_Init+0x98>)
 8000950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000954:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 960;
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_TIM2_Init+0x98>)
 8000958:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800095c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_TIM2_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_TIM2_Init+0x98>)
 8000966:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800096a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_TIM2_Init+0x98>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_TIM2_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000978:	4813      	ldr	r0, [pc, #76]	; (80009c8 <MX_TIM2_Init+0x98>)
 800097a:	f002 fc45 	bl	8003208 <HAL_TIM_Base_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000984:	f000 f93a 	bl	8000bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800098e:	f107 0310 	add.w	r3, r7, #16
 8000992:	4619      	mov	r1, r3
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <MX_TIM2_Init+0x98>)
 8000996:	f002 fec5 	bl	8003724 <HAL_TIM_ConfigClockSource>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80009a0:	f000 f92c 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_TIM2_Init+0x98>)
 80009b2:	f003 f8ed 	bl	8003b90 <HAL_TIMEx_MasterConfigSynchronization>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80009bc:	f000 f91e 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200005fc 	.word	0x200005fc

080009cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009d2:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <MX_USART3_UART_Init+0x5c>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_USART3_UART_Init+0x58>)
 8000a10:	f003 f96a 	bl	8003ce8 <HAL_UART_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a1a:	f000 f8ef 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000098 	.word	0x20000098
 8000a28:	40004800 	.word	0x40004800

08000a2c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3a:	2206      	movs	r2, #6
 8000a3c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a40:	2202      	movs	r2, #2
 8000a42:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a70:	f001 f949 	bl	8001d06 <HAL_PCD_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a7a:	f000 f8bf 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000011c 	.word	0x2000011c

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08e      	sub	sp, #56	; 0x38
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	4b53      	ldr	r3, [pc, #332]	; (8000bec <MX_GPIO_Init+0x164>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a52      	ldr	r2, [pc, #328]	; (8000bec <MX_GPIO_Init+0x164>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b50      	ldr	r3, [pc, #320]	; (8000bec <MX_GPIO_Init+0x164>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0304 	and.w	r3, r3, #4
 8000ab2:	623b      	str	r3, [r7, #32]
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab6:	4b4d      	ldr	r3, [pc, #308]	; (8000bec <MX_GPIO_Init+0x164>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a4c      	ldr	r2, [pc, #304]	; (8000bec <MX_GPIO_Init+0x164>)
 8000abc:	f043 0320 	orr.w	r3, r3, #32
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b4a      	ldr	r3, [pc, #296]	; (8000bec <MX_GPIO_Init+0x164>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0320 	and.w	r3, r3, #32
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	4b47      	ldr	r3, [pc, #284]	; (8000bec <MX_GPIO_Init+0x164>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a46      	ldr	r2, [pc, #280]	; (8000bec <MX_GPIO_Init+0x164>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b44      	ldr	r3, [pc, #272]	; (8000bec <MX_GPIO_Init+0x164>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae2:	61bb      	str	r3, [r7, #24]
 8000ae4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b41      	ldr	r3, [pc, #260]	; (8000bec <MX_GPIO_Init+0x164>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a40      	ldr	r2, [pc, #256]	; (8000bec <MX_GPIO_Init+0x164>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b3e      	ldr	r3, [pc, #248]	; (8000bec <MX_GPIO_Init+0x164>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afe:	4b3b      	ldr	r3, [pc, #236]	; (8000bec <MX_GPIO_Init+0x164>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a3a      	ldr	r2, [pc, #232]	; (8000bec <MX_GPIO_Init+0x164>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b38      	ldr	r3, [pc, #224]	; (8000bec <MX_GPIO_Init+0x164>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b16:	4b35      	ldr	r3, [pc, #212]	; (8000bec <MX_GPIO_Init+0x164>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a34      	ldr	r2, [pc, #208]	; (8000bec <MX_GPIO_Init+0x164>)
 8000b1c:	f043 0310 	orr.w	r3, r3, #16
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b32      	ldr	r3, [pc, #200]	; (8000bec <MX_GPIO_Init+0x164>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0310 	and.w	r3, r3, #16
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <MX_GPIO_Init+0x164>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a2e      	ldr	r2, [pc, #184]	; (8000bec <MX_GPIO_Init+0x164>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <MX_GPIO_Init+0x164>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b46:	4b29      	ldr	r3, [pc, #164]	; (8000bec <MX_GPIO_Init+0x164>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a28      	ldr	r2, [pc, #160]	; (8000bec <MX_GPIO_Init+0x164>)
 8000b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b26      	ldr	r3, [pc, #152]	; (8000bec <MX_GPIO_Init+0x164>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b64:	4822      	ldr	r0, [pc, #136]	; (8000bf0 <MX_GPIO_Init+0x168>)
 8000b66:	f001 f8b5 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2140      	movs	r1, #64	; 0x40
 8000b6e:	4821      	ldr	r0, [pc, #132]	; (8000bf4 <MX_GPIO_Init+0x16c>)
 8000b70:	f001 f8b0 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	481b      	ldr	r0, [pc, #108]	; (8000bf8 <MX_GPIO_Init+0x170>)
 8000b8c:	f000 fef6 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b90:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <MX_GPIO_Init+0x168>)
 8000baa:	f000 fee7 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bae:	2340      	movs	r3, #64	; 0x40
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <MX_GPIO_Init+0x16c>)
 8000bc6:	f000 fed9 	bl	800197c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_GPIO_Init+0x16c>)
 8000bde:	f000 fecd 	bl	800197c <HAL_GPIO_Init>

}
 8000be2:	bf00      	nop
 8000be4:	3738      	adds	r7, #56	; 0x38
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020400 	.word	0x40020400
 8000bf4:	40021800 	.word	0x40021800
 8000bf8:	40020800 	.word	0x40020800

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_MspInit+0x44>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <HAL_MspInit+0x44>)
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_MspInit+0x44>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_MspInit+0x44>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <HAL_MspInit+0x44>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_MspInit+0x44>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	; 0x30
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a36      	ldr	r2, [pc, #216]	; (8000d48 <HAL_ADC_MspInit+0xf8>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d13c      	bne.n	8000cec <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c72:	4b36      	ldr	r3, [pc, #216]	; (8000d4c <HAL_ADC_MspInit+0xfc>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a35      	ldr	r2, [pc, #212]	; (8000d4c <HAL_ADC_MspInit+0xfc>)
 8000c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <HAL_ADC_MspInit+0xfc>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	4b30      	ldr	r3, [pc, #192]	; (8000d4c <HAL_ADC_MspInit+0xfc>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <HAL_ADC_MspInit+0xfc>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <HAL_ADC_MspInit+0xfc>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	617b      	str	r3, [r7, #20]
 8000ca0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b2a      	ldr	r3, [pc, #168]	; (8000d4c <HAL_ADC_MspInit+0xfc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a29      	ldr	r2, [pc, #164]	; (8000d4c <HAL_ADC_MspInit+0xfc>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <HAL_ADC_MspInit+0xfc>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000cba:	2309      	movs	r3, #9
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4820      	ldr	r0, [pc, #128]	; (8000d50 <HAL_ADC_MspInit+0x100>)
 8000cce:	f000 fe55 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	481b      	ldr	r0, [pc, #108]	; (8000d54 <HAL_ADC_MspInit+0x104>)
 8000ce6:	f000 fe49 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000cea:	e029      	b.n	8000d40 <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a19      	ldr	r2, [pc, #100]	; (8000d58 <HAL_ADC_MspInit+0x108>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d124      	bne.n	8000d40 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_ADC_MspInit+0xfc>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <HAL_ADC_MspInit+0xfc>)
 8000cfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d00:	6453      	str	r3, [r2, #68]	; 0x44
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_ADC_MspInit+0xfc>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_ADC_MspInit+0xfc>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_ADC_MspInit+0xfc>)
 8000d14:	f043 0320 	orr.w	r3, r3, #32
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_ADC_MspInit+0xfc>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0320 	and.w	r3, r3, #32
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_10;
 8000d26:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8000d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d34:	f107 031c 	add.w	r3, r7, #28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4808      	ldr	r0, [pc, #32]	; (8000d5c <HAL_ADC_MspInit+0x10c>)
 8000d3c:	f000 fe1e 	bl	800197c <HAL_GPIO_Init>
}
 8000d40:	bf00      	nop
 8000d42:	3730      	adds	r7, #48	; 0x30
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40012000 	.word	0x40012000
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020800 	.word	0x40020800
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40012200 	.word	0x40012200
 8000d5c:	40021400 	.word	0x40021400

08000d60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d128      	bne.n	8000dd4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d82:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_TIM_Encoder_MspInit+0x80>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <HAL_TIM_Encoder_MspInit+0x80>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8e:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <HAL_TIM_Encoder_MspInit+0x80>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_TIM_Encoder_MspInit+0x80>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <HAL_TIM_Encoder_MspInit+0x80>)
 8000da0:	f043 0310 	orr.w	r3, r3, #16
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <HAL_TIM_Encoder_MspInit+0x80>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000db2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000dd0:	f000 fdd4 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40010000 	.word	0x40010000
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000df8:	d113      	bne.n	8000e22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_TIM_Base_MspInit+0x44>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <HAL_TIM_Base_MspInit+0x44>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6413      	str	r3, [r2, #64]	; 0x40
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_TIM_Base_MspInit+0x44>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	201c      	movs	r0, #28
 8000e18:	f000 fd79 	bl	800190e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e1c:	201c      	movs	r0, #28
 8000e1e:	f000 fd92 	bl	8001946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b0ae      	sub	sp, #184	; 0xb8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2290      	movs	r2, #144	; 0x90
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f003 ff55 	bl	8004d00 <memset>
  if(huart->Instance==USART3)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <HAL_UART_MspInit+0xb4>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d13c      	bne.n	8000eda <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 fda2 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e7a:	f7ff febf 	bl	8000bfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a13      	ldr	r2, [pc, #76]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e9c:	f043 0308 	orr.w	r3, r3, #8
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0308 	and.w	r3, r3, #8
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec8:	2307      	movs	r3, #7
 8000eca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ece:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <HAL_UART_MspInit+0xbc>)
 8000ed6:	f000 fd51 	bl	800197c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	37b8      	adds	r7, #184	; 0xb8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40004800 	.word	0x40004800
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020c00 	.word	0x40020c00

08000ef0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ae      	sub	sp, #184	; 0xb8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2290      	movs	r2, #144	; 0x90
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 fef5 	bl	8004d00 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f1e:	d159      	bne.n	8000fd4 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 fd41 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f3c:	f7ff fe5e 	bl	8000bfc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <HAL_PCD_MspInit+0xec>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	4a25      	ldr	r2, [pc, #148]	; (8000fdc <HAL_PCD_MspInit+0xec>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4c:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <HAL_PCD_MspInit+0xec>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	613b      	str	r3, [r7, #16]
 8000f56:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f58:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f72:	230a      	movs	r3, #10
 8000f74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4818      	ldr	r0, [pc, #96]	; (8000fe0 <HAL_PCD_MspInit+0xf0>)
 8000f80:	f000 fcfc 	bl	800197c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4810      	ldr	r0, [pc, #64]	; (8000fe0 <HAL_PCD_MspInit+0xf0>)
 8000fa0:	f000 fcec 	bl	800197c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_PCD_MspInit+0xec>)
 8000fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <HAL_PCD_MspInit+0xec>)
 8000faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fae:	6353      	str	r3, [r2, #52]	; 0x34
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_PCD_MspInit+0xec>)
 8000fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <HAL_PCD_MspInit+0xec>)
 8000fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <HAL_PCD_MspInit+0xec>)
 8000fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc6:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <HAL_PCD_MspInit+0xec>)
 8000fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fd4:	bf00      	nop
 8000fd6:	37b8      	adds	r7, #184	; 0xb8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f8ba 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <TIM2_IRQHandler+0x10>)
 800103e:	f002 fa51 	bl	80034e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200005fc 	.word	0x200005fc

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f003 fe16 	bl	8004cac <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20080000 	.word	0x20080000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	2000008c 	.word	0x2000008c
 80010b4:	20000660 	.word	0x20000660

080010b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <SystemInit+0x20>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <SystemInit+0x20>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001114 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010e0:	480d      	ldr	r0, [pc, #52]	; (8001118 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010e2:	490e      	ldr	r1, [pc, #56]	; (800111c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010e4:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010f8:	4c0b      	ldr	r4, [pc, #44]	; (8001128 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001106:	f7ff ffd7 	bl	80010b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110a:	f003 fdd5 	bl	8004cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110e:	f7ff fa63 	bl	80005d8 <main>
  bx  lr    
 8001112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001114:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800111c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001120:	080055f0 	.word	0x080055f0
  ldr r2, =_sbss
 8001124:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001128:	2000065c 	.word	0x2000065c

0800112c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800112c:	e7fe      	b.n	800112c <ADC_IRQHandler>

0800112e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001132:	2003      	movs	r0, #3
 8001134:	f000 fbe0 	bl	80018f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001138:	2000      	movs	r0, #0
 800113a:	f000 f805 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800113e:	f7ff fd63 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 fbfb 	bl	8001962 <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 fbc3 	bl	800190e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000004 	.word	0x20000004

080011a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x24>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_IncTick+0x24>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000648 	.word	0x20000648

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000648 	.word	0x20000648

080011e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff ffee 	bl	80011d0 <HAL_GetTick>
 80011f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001200:	d005      	beq.n	800120e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001202:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_Delay+0x44>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800120e:	bf00      	nop
 8001210:	f7ff ffde 	bl	80011d0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	429a      	cmp	r2, r3
 800121e:	d8f7      	bhi.n	8001210 <HAL_Delay+0x28>
  {
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008

08001230 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e031      	b.n	80012aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fcfe 	bl	8000c50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	2b00      	cmp	r3, #0
 800126c:	d116      	bne.n	800129c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_ADC_Init+0x84>)
 8001274:	4013      	ands	r3, r2
 8001276:	f043 0202 	orr.w	r2, r3, #2
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 f970 	bl	8001564 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f023 0303 	bic.w	r3, r3, #3
 8001292:	f043 0201 	orr.w	r2, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
 800129a:	e001      	b.n	80012a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	ffffeefd 	.word	0xffffeefd

080012b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x1c>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e136      	b.n	8001542 <HAL_ADC_ConfigChannel+0x28a>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b09      	cmp	r3, #9
 80012e2:	d93a      	bls.n	800135a <HAL_ADC_ConfigChannel+0xa2>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012ec:	d035      	beq.n	800135a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68d9      	ldr	r1, [r3, #12]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	3b1e      	subs	r3, #30
 8001304:	2207      	movs	r2, #7
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	400a      	ands	r2, r1
 8001312:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a8d      	ldr	r2, [pc, #564]	; (8001550 <HAL_ADC_ConfigChannel+0x298>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d10a      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68d9      	ldr	r1, [r3, #12]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	061a      	lsls	r2, r3, #24
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001332:	e035      	b.n	80013a0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68d9      	ldr	r1, [r3, #12]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	b29b      	uxth	r3, r3
 8001344:	4618      	mov	r0, r3
 8001346:	4603      	mov	r3, r0
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4403      	add	r3, r0
 800134c:	3b1e      	subs	r3, #30
 800134e:	409a      	lsls	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001358:	e022      	b.n	80013a0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6919      	ldr	r1, [r3, #16]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	b29b      	uxth	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	4613      	mov	r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	4413      	add	r3, r2
 800136e:	2207      	movs	r2, #7
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43da      	mvns	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	400a      	ands	r2, r1
 800137c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6919      	ldr	r1, [r3, #16]
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4618      	mov	r0, r3
 8001390:	4603      	mov	r3, r0
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4403      	add	r3, r0
 8001396:	409a      	lsls	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b06      	cmp	r3, #6
 80013a6:	d824      	bhi.n	80013f2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685a      	ldr	r2, [r3, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	3b05      	subs	r3, #5
 80013ba:	221f      	movs	r2, #31
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43da      	mvns	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	400a      	ands	r2, r1
 80013c8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	3b05      	subs	r3, #5
 80013e4:	fa00 f203 	lsl.w	r2, r0, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34
 80013f0:	e04c      	b.n	800148c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b0c      	cmp	r3, #12
 80013f8:	d824      	bhi.n	8001444 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	3b23      	subs	r3, #35	; 0x23
 800140c:	221f      	movs	r2, #31
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	400a      	ands	r2, r1
 800141a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	3b23      	subs	r3, #35	; 0x23
 8001436:	fa00 f203 	lsl.w	r2, r0, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
 8001442:	e023      	b.n	800148c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	3b41      	subs	r3, #65	; 0x41
 8001456:	221f      	movs	r2, #31
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43da      	mvns	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	400a      	ands	r2, r1
 8001464:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	3b41      	subs	r3, #65	; 0x41
 8001480:	fa00 f203 	lsl.w	r2, r0, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a30      	ldr	r2, [pc, #192]	; (8001554 <HAL_ADC_ConfigChannel+0x29c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d10a      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x1f4>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800149e:	d105      	bne.n	80014ac <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_ADC_ConfigChannel+0x2a0>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4a2c      	ldr	r2, [pc, #176]	; (8001558 <HAL_ADC_ConfigChannel+0x2a0>)
 80014a6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80014aa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a28      	ldr	r2, [pc, #160]	; (8001554 <HAL_ADC_ConfigChannel+0x29c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d10f      	bne.n	80014d6 <HAL_ADC_ConfigChannel+0x21e>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b12      	cmp	r3, #18
 80014bc:	d10b      	bne.n	80014d6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <HAL_ADC_ConfigChannel+0x2a0>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a25      	ldr	r2, [pc, #148]	; (8001558 <HAL_ADC_ConfigChannel+0x2a0>)
 80014c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014c8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_ADC_ConfigChannel+0x2a0>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a22      	ldr	r2, [pc, #136]	; (8001558 <HAL_ADC_ConfigChannel+0x2a0>)
 80014d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014d4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a1e      	ldr	r2, [pc, #120]	; (8001554 <HAL_ADC_ConfigChannel+0x29c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d12b      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x280>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <HAL_ADC_ConfigChannel+0x298>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d003      	beq.n	80014f2 <HAL_ADC_ConfigChannel+0x23a>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b11      	cmp	r3, #17
 80014f0:	d122      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80014f2:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_ADC_ConfigChannel+0x2a0>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4a18      	ldr	r2, [pc, #96]	; (8001558 <HAL_ADC_ConfigChannel+0x2a0>)
 80014f8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80014fc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_ADC_ConfigChannel+0x2a0>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4a15      	ldr	r2, [pc, #84]	; (8001558 <HAL_ADC_ConfigChannel+0x2a0>)
 8001504:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001508:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a10      	ldr	r2, [pc, #64]	; (8001550 <HAL_ADC_ConfigChannel+0x298>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d111      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_ADC_ConfigChannel+0x2a4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a11      	ldr	r2, [pc, #68]	; (8001560 <HAL_ADC_ConfigChannel+0x2a8>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	0c9a      	lsrs	r2, r3, #18
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800152a:	e002      	b.n	8001532 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3b01      	subs	r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f9      	bne.n	800152c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	10000012 	.word	0x10000012
 8001554:	40012000 	.word	0x40012000
 8001558:	40012300 	.word	0x40012300
 800155c:	20000000 	.word	0x20000000
 8001560:	431bde83 	.word	0x431bde83

08001564 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800156c:	4b78      	ldr	r3, [pc, #480]	; (8001750 <ADC_Init+0x1ec>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	4a77      	ldr	r2, [pc, #476]	; (8001750 <ADC_Init+0x1ec>)
 8001572:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001576:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001578:	4b75      	ldr	r3, [pc, #468]	; (8001750 <ADC_Init+0x1ec>)
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	4973      	ldr	r1, [pc, #460]	; (8001750 <ADC_Init+0x1ec>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	021a      	lsls	r2, r3, #8
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6859      	ldr	r1, [r3, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6899      	ldr	r1, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	4a58      	ldr	r2, [pc, #352]	; (8001754 <ADC_Init+0x1f0>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d022      	beq.n	800163e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001606:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6899      	ldr	r1, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6899      	ldr	r1, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	e00f      	b.n	800165e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800164c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800165c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0202 	bic.w	r2, r2, #2
 800166c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6899      	ldr	r1, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	005a      	lsls	r2, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01b      	beq.n	80016c4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800169a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6859      	ldr	r1, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	3b01      	subs	r3, #1
 80016b8:	035a      	lsls	r2, r3, #13
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	e007      	b.n	80016d4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	051a      	lsls	r2, r3, #20
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6899      	ldr	r1, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001716:	025a      	lsls	r2, r3, #9
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800172e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6899      	ldr	r1, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	029a      	lsls	r2, r3, #10
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	609a      	str	r2, [r3, #8]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	40012300 	.word	0x40012300
 8001754:	0f000001 	.word	0x0f000001

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <__NVIC_SetPriorityGrouping+0x40>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 8001782:	4313      	orrs	r3, r2
 8001784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <__NVIC_SetPriorityGrouping+0x40>)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	60d3      	str	r3, [r2, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000ed00 	.word	0xe000ed00
 800179c:	05fa0000 	.word	0x05fa0000

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4907      	ldr	r1, [pc, #28]	; (80017f4 <__NVIC_EnableIRQ+0x38>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000e100 	.word	0xe000e100

080017f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	6039      	str	r1, [r7, #0]
 8001802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	2b00      	cmp	r3, #0
 800180a:	db0a      	blt.n	8001822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <__NVIC_SetPriority+0x4c>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	0112      	lsls	r2, r2, #4
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	440b      	add	r3, r1
 800181c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001820:	e00a      	b.n	8001838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <__NVIC_SetPriority+0x50>)
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	3b04      	subs	r3, #4
 8001830:	0112      	lsls	r2, r2, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	440b      	add	r3, r1
 8001836:	761a      	strb	r2, [r3, #24]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	; 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f1c3 0307 	rsb	r3, r3, #7
 8001866:	2b04      	cmp	r3, #4
 8001868:	bf28      	it	cs
 800186a:	2304      	movcs	r3, #4
 800186c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3304      	adds	r3, #4
 8001872:	2b06      	cmp	r3, #6
 8001874:	d902      	bls.n	800187c <NVIC_EncodePriority+0x30>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3b03      	subs	r3, #3
 800187a:	e000      	b.n	800187e <NVIC_EncodePriority+0x32>
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43da      	mvns	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	43d9      	mvns	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	4313      	orrs	r3, r2
         );
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
	...

080018b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c4:	d301      	bcc.n	80018ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00f      	b.n	80018ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ca:	4a0a      	ldr	r2, [pc, #40]	; (80018f4 <SysTick_Config+0x40>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d2:	210f      	movs	r1, #15
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f7ff ff8e 	bl	80017f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <SysTick_Config+0x40>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e2:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <SysTick_Config+0x40>)
 80018e4:	2207      	movs	r2, #7
 80018e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	e000e010 	.word	0xe000e010

080018f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff29 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190e:	b580      	push	{r7, lr}
 8001910:	b086      	sub	sp, #24
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001920:	f7ff ff3e 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 8001924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	68b9      	ldr	r1, [r7, #8]
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f7ff ff8e 	bl	800184c <NVIC_EncodePriority>
 8001930:	4602      	mov	r2, r0
 8001932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001936:	4611      	mov	r1, r2
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff5d 	bl	80017f8 <__NVIC_SetPriority>
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff31 	bl	80017bc <__NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffa2 	bl	80018b4 <SysTick_Config>
 8001970:	4603      	mov	r3, r0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	e175      	b.n	8001c88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800199c:	2201      	movs	r2, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f040 8164 	bne.w	8001c82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d005      	beq.n	80019d2 <HAL_GPIO_Init+0x56>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d130      	bne.n	8001a34 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 0201 	and.w	r2, r3, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d017      	beq.n	8001a70 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d123      	bne.n	8001ac4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	220f      	movs	r2, #15
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	69b9      	ldr	r1, [r7, #24]
 8001ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80be 	beq.w	8001c82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	4b66      	ldr	r3, [pc, #408]	; (8001ca0 <HAL_GPIO_Init+0x324>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	4a65      	ldr	r2, [pc, #404]	; (8001ca0 <HAL_GPIO_Init+0x324>)
 8001b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b10:	6453      	str	r3, [r2, #68]	; 0x44
 8001b12:	4b63      	ldr	r3, [pc, #396]	; (8001ca0 <HAL_GPIO_Init+0x324>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b1e:	4a61      	ldr	r2, [pc, #388]	; (8001ca4 <HAL_GPIO_Init+0x328>)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	3302      	adds	r3, #2
 8001b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f003 0303 	and.w	r3, r3, #3
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	220f      	movs	r2, #15
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a58      	ldr	r2, [pc, #352]	; (8001ca8 <HAL_GPIO_Init+0x32c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d037      	beq.n	8001bba <HAL_GPIO_Init+0x23e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a57      	ldr	r2, [pc, #348]	; (8001cac <HAL_GPIO_Init+0x330>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d031      	beq.n	8001bb6 <HAL_GPIO_Init+0x23a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a56      	ldr	r2, [pc, #344]	; (8001cb0 <HAL_GPIO_Init+0x334>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d02b      	beq.n	8001bb2 <HAL_GPIO_Init+0x236>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a55      	ldr	r2, [pc, #340]	; (8001cb4 <HAL_GPIO_Init+0x338>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d025      	beq.n	8001bae <HAL_GPIO_Init+0x232>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a54      	ldr	r2, [pc, #336]	; (8001cb8 <HAL_GPIO_Init+0x33c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d01f      	beq.n	8001baa <HAL_GPIO_Init+0x22e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a53      	ldr	r2, [pc, #332]	; (8001cbc <HAL_GPIO_Init+0x340>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d019      	beq.n	8001ba6 <HAL_GPIO_Init+0x22a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a52      	ldr	r2, [pc, #328]	; (8001cc0 <HAL_GPIO_Init+0x344>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d013      	beq.n	8001ba2 <HAL_GPIO_Init+0x226>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a51      	ldr	r2, [pc, #324]	; (8001cc4 <HAL_GPIO_Init+0x348>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00d      	beq.n	8001b9e <HAL_GPIO_Init+0x222>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a50      	ldr	r2, [pc, #320]	; (8001cc8 <HAL_GPIO_Init+0x34c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d007      	beq.n	8001b9a <HAL_GPIO_Init+0x21e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4f      	ldr	r2, [pc, #316]	; (8001ccc <HAL_GPIO_Init+0x350>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d101      	bne.n	8001b96 <HAL_GPIO_Init+0x21a>
 8001b92:	2309      	movs	r3, #9
 8001b94:	e012      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001b96:	230a      	movs	r3, #10
 8001b98:	e010      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001b9a:	2308      	movs	r3, #8
 8001b9c:	e00e      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	e00c      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001ba2:	2306      	movs	r3, #6
 8001ba4:	e00a      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001ba6:	2305      	movs	r3, #5
 8001ba8:	e008      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001baa:	2304      	movs	r3, #4
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e004      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e002      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <HAL_GPIO_Init+0x240>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	f002 0203 	and.w	r2, r2, #3
 8001bc2:	0092      	lsls	r2, r2, #2
 8001bc4:	4093      	lsls	r3, r2
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bcc:	4935      	ldr	r1, [pc, #212]	; (8001ca4 <HAL_GPIO_Init+0x328>)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	089b      	lsrs	r3, r3, #2
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bfe:	4a34      	ldr	r2, [pc, #208]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c04:	4b32      	ldr	r3, [pc, #200]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c28:	4a29      	ldr	r2, [pc, #164]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c2e:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c52:	4a1f      	ldr	r2, [pc, #124]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <HAL_GPIO_Init+0x354>)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3301      	adds	r3, #1
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	2b0f      	cmp	r3, #15
 8001c8c:	f67f ae86 	bls.w	800199c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40013800 	.word	0x40013800
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	40020800 	.word	0x40020800
 8001cb4:	40020c00 	.word	0x40020c00
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40021400 	.word	0x40021400
 8001cc0:	40021800 	.word	0x40021800
 8001cc4:	40021c00 	.word	0x40021c00
 8001cc8:	40022000 	.word	0x40022000
 8001ccc:	40022400 	.word	0x40022400
 8001cd0:	40013c00 	.word	0x40013c00

08001cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cf0:	e003      	b.n	8001cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	041a      	lsls	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	619a      	str	r2, [r3, #24]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d08:	b08f      	sub	sp, #60	; 0x3c
 8001d0a:	af0a      	add	r7, sp, #40	; 0x28
 8001d0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e116      	b.n	8001f46 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff f8dc 	bl	8000ef0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f002 fd12 	bl	8004780 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	687e      	ldr	r6, [r7, #4]
 8001d64:	466d      	mov	r5, sp
 8001d66:	f106 0410 	add.w	r4, r6, #16
 8001d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d7a:	1d33      	adds	r3, r6, #4
 8001d7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d7e:	6838      	ldr	r0, [r7, #0]
 8001d80:	f002 fca6 	bl	80046d0 <USB_CoreInit>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e0d7      	b.n	8001f46 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 fd00 	bl	80047a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	e04a      	b.n	8001e3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	333d      	adds	r3, #61	; 0x3d
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	333c      	adds	r3, #60	; 0x3c
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	b298      	uxth	r0, r3
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	3342      	adds	r3, #66	; 0x42
 8001de4:	4602      	mov	r2, r0
 8001de6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	1a9b      	subs	r3, r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	333f      	adds	r3, #63	; 0x3f
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	3344      	adds	r3, #68	; 0x44
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	1a9b      	subs	r3, r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3348      	adds	r3, #72	; 0x48
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	1a9b      	subs	r3, r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	3350      	adds	r3, #80	; 0x50
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3af      	bcc.n	8001da8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e044      	b.n	8001ed8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e90:	7bfa      	ldrb	r2, [r7, #15]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d3b5      	bcc.n	8001e4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	687e      	ldr	r6, [r7, #4]
 8001eea:	466d      	mov	r5, sp
 8001eec:	f106 0410 	add.w	r4, r6, #16
 8001ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f00:	1d33      	adds	r3, r6, #4
 8001f02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f04:	6838      	ldr	r0, [r7, #0]
 8001f06:	f002 fc99 	bl	800483c <USB_DevInit>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e014      	b.n	8001f46 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d102      	bne.n	8001f3a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f80b 	bl	8001f50 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 fe53 	bl	8004bea <USB_DevDisconnect>

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001f50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_PCDEx_ActivateLPM+0x44>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	10000003 	.word	0x10000003

08001f98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40007000 	.word	0x40007000

08001fb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	4b23      	ldr	r3, [pc, #140]	; (8002050 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4a22      	ldr	r2, [pc, #136]	; (8002050 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fe6:	f7ff f8f3 	bl	80011d0 <HAL_GetTick>
 8001fea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fec:	e009      	b.n	8002002 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fee:	f7ff f8ef 	bl	80011d0 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ffc:	d901      	bls.n	8002002 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e022      	b.n	8002048 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200e:	d1ee      	bne.n	8001fee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800201c:	f7ff f8d8 	bl	80011d0 <HAL_GetTick>
 8002020:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002022:	e009      	b.n	8002038 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002024:	f7ff f8d4 	bl	80011d0 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002032:	d901      	bls.n	8002038 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e007      	b.n	8002048 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002044:	d1ee      	bne.n	8002024 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40023800 	.word	0x40023800
 8002054:	40007000 	.word	0x40007000

08002058 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002060:	2300      	movs	r3, #0
 8002062:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e29b      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8087 	beq.w	800218a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800207c:	4b96      	ldr	r3, [pc, #600]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b04      	cmp	r3, #4
 8002086:	d00c      	beq.n	80020a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002088:	4b93      	ldr	r3, [pc, #588]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d112      	bne.n	80020ba <HAL_RCC_OscConfig+0x62>
 8002094:	4b90      	ldr	r3, [pc, #576]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a0:	d10b      	bne.n	80020ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a2:	4b8d      	ldr	r3, [pc, #564]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d06c      	beq.n	8002188 <HAL_RCC_OscConfig+0x130>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d168      	bne.n	8002188 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e275      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x7a>
 80020c4:	4b84      	ldr	r3, [pc, #528]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a83      	ldr	r2, [pc, #524]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	e02e      	b.n	8002130 <HAL_RCC_OscConfig+0xd8>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x9c>
 80020da:	4b7f      	ldr	r3, [pc, #508]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a7e      	ldr	r2, [pc, #504]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b7c      	ldr	r3, [pc, #496]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7b      	ldr	r2, [pc, #492]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e01d      	b.n	8002130 <HAL_RCC_OscConfig+0xd8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0xc0>
 80020fe:	4b76      	ldr	r3, [pc, #472]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a75      	ldr	r2, [pc, #468]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b73      	ldr	r3, [pc, #460]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a72      	ldr	r2, [pc, #456]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0xd8>
 8002118:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a6e      	ldr	r2, [pc, #440]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b6c      	ldr	r3, [pc, #432]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a6b      	ldr	r2, [pc, #428]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800212a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7ff f84a 	bl	80011d0 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002140:	f7ff f846 	bl	80011d0 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e229      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b61      	ldr	r3, [pc, #388]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0xe8>
 800215e:	e014      	b.n	800218a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7ff f836 	bl	80011d0 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff f832 	bl	80011d0 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e215      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x110>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d069      	beq.n	800226a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002196:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a2:	4b4d      	ldr	r3, [pc, #308]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d11c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x190>
 80021ae:	4b4a      	ldr	r3, [pc, #296]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d116      	bne.n	80021e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_RCC_OscConfig+0x17a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e1e9      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	493d      	ldr	r1, [pc, #244]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	e040      	b.n	800226a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d023      	beq.n	8002238 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a38      	ldr	r2, [pc, #224]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe ffe8 	bl	80011d0 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002204:	f7fe ffe4 	bl	80011d0 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1c7      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4929      	ldr	r1, [pc, #164]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
 8002236:	e018      	b.n	800226a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a26      	ldr	r2, [pc, #152]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800223e:	f023 0301 	bic.w	r3, r3, #1
 8002242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe ffc4 	bl	80011d0 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224c:	f7fe ffc0 	bl	80011d0 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e1a3      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d038      	beq.n	80022e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d019      	beq.n	80022b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002282:	4a15      	ldr	r2, [pc, #84]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228a:	f7fe ffa1 	bl	80011d0 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002292:	f7fe ff9d 	bl	80011d0 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e180      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80022a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x23a>
 80022b0:	e01a      	b.n	80022e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80022b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b6:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022be:	f7fe ff87 	bl	80011d0 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c6:	f7fe ff83 	bl	80011d0 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d903      	bls.n	80022dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e166      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
 80022d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022dc:	4b92      	ldr	r3, [pc, #584]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80022de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1ee      	bne.n	80022c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80a4 	beq.w	800243e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f6:	4b8c      	ldr	r3, [pc, #560]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10d      	bne.n	800231e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	4b89      	ldr	r3, [pc, #548]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a88      	ldr	r2, [pc, #544]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b86      	ldr	r3, [pc, #536]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231a:	2301      	movs	r3, #1
 800231c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231e:	4b83      	ldr	r3, [pc, #524]	; (800252c <HAL_RCC_OscConfig+0x4d4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d118      	bne.n	800235c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800232a:	4b80      	ldr	r3, [pc, #512]	; (800252c <HAL_RCC_OscConfig+0x4d4>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a7f      	ldr	r2, [pc, #508]	; (800252c <HAL_RCC_OscConfig+0x4d4>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002336:	f7fe ff4b 	bl	80011d0 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233e:	f7fe ff47 	bl	80011d0 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b64      	cmp	r3, #100	; 0x64
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e12a      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002350:	4b76      	ldr	r3, [pc, #472]	; (800252c <HAL_RCC_OscConfig+0x4d4>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x31a>
 8002364:	4b70      	ldr	r3, [pc, #448]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a6f      	ldr	r2, [pc, #444]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
 8002370:	e02d      	b.n	80023ce <HAL_RCC_OscConfig+0x376>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x33c>
 800237a:	4b6b      	ldr	r3, [pc, #428]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 800237c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237e:	4a6a      	ldr	r2, [pc, #424]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	6713      	str	r3, [r2, #112]	; 0x70
 8002386:	4b68      	ldr	r3, [pc, #416]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238a:	4a67      	ldr	r2, [pc, #412]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 800238c:	f023 0304 	bic.w	r3, r3, #4
 8002390:	6713      	str	r3, [r2, #112]	; 0x70
 8002392:	e01c      	b.n	80023ce <HAL_RCC_OscConfig+0x376>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b05      	cmp	r3, #5
 800239a:	d10c      	bne.n	80023b6 <HAL_RCC_OscConfig+0x35e>
 800239c:	4b62      	ldr	r3, [pc, #392]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	4a61      	ldr	r2, [pc, #388]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023a2:	f043 0304 	orr.w	r3, r3, #4
 80023a6:	6713      	str	r3, [r2, #112]	; 0x70
 80023a8:	4b5f      	ldr	r3, [pc, #380]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	4a5e      	ldr	r2, [pc, #376]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6713      	str	r3, [r2, #112]	; 0x70
 80023b4:	e00b      	b.n	80023ce <HAL_RCC_OscConfig+0x376>
 80023b6:	4b5c      	ldr	r3, [pc, #368]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	4a5b      	ldr	r2, [pc, #364]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	6713      	str	r3, [r2, #112]	; 0x70
 80023c2:	4b59      	ldr	r3, [pc, #356]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	4a58      	ldr	r2, [pc, #352]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023c8:	f023 0304 	bic.w	r3, r3, #4
 80023cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d015      	beq.n	8002402 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7fe fefb 	bl	80011d0 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7fe fef7 	bl	80011d0 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0d8      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f4:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ee      	beq.n	80023de <HAL_RCC_OscConfig+0x386>
 8002400:	e014      	b.n	800242c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002402:	f7fe fee5 	bl	80011d0 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7fe fee1 	bl	80011d0 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f241 3288 	movw	r2, #5000	; 0x1388
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0c2      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002420:	4b41      	ldr	r3, [pc, #260]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1ee      	bne.n	800240a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d105      	bne.n	800243e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002432:	4b3d      	ldr	r3, [pc, #244]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	4a3c      	ldr	r2, [pc, #240]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80ae 	beq.w	80025a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002448:	4b37      	ldr	r3, [pc, #220]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	d06d      	beq.n	8002530 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d14b      	bne.n	80024f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245c:	4b32      	ldr	r3, [pc, #200]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a31      	ldr	r2, [pc, #196]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7fe feb2 	bl	80011d0 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002470:	f7fe feae 	bl	80011d0 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e091      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002482:	4b29      	ldr	r3, [pc, #164]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	019b      	lsls	r3, r3, #6
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	3b01      	subs	r3, #1
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	061b      	lsls	r3, r3, #24
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	071b      	lsls	r3, r3, #28
 80024ba:	491b      	ldr	r1, [pc, #108]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a18      	ldr	r2, [pc, #96]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80024c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe fe80 	bl	80011d0 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d4:	f7fe fe7c 	bl	80011d0 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e05f      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e6:	4b10      	ldr	r3, [pc, #64]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x47c>
 80024f2:	e057      	b.n	80025a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 80024fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002500:	f7fe fe66 	bl	80011d0 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe fe62 	bl	80011d0 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e045      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251a:	4b03      	ldr	r3, [pc, #12]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x4b0>
 8002526:	e03d      	b.n	80025a4 <HAL_RCC_OscConfig+0x54c>
 8002528:	40023800 	.word	0x40023800
 800252c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_RCC_OscConfig+0x558>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d030      	beq.n	80025a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d129      	bne.n	80025a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d122      	bne.n	80025a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002560:	4013      	ands	r3, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002566:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002568:	4293      	cmp	r3, r2
 800256a:	d119      	bne.n	80025a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d10f      	bne.n	80025a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0d0      	b.n	800276e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025cc:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 030f 	and.w	r3, r3, #15
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d910      	bls.n	80025fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b67      	ldr	r3, [pc, #412]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 020f 	bic.w	r2, r3, #15
 80025e2:	4965      	ldr	r1, [pc, #404]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b63      	ldr	r3, [pc, #396]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0b8      	b.n	800276e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0304 	and.w	r3, r3, #4
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002614:	4b59      	ldr	r3, [pc, #356]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	4a58      	ldr	r2, [pc, #352]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 800261a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800261e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800262c:	4b53      	ldr	r3, [pc, #332]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4a52      	ldr	r2, [pc, #328]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002632:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002636:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002638:	4b50      	ldr	r3, [pc, #320]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	494d      	ldr	r1, [pc, #308]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d040      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d115      	bne.n	8002696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e07f      	b.n	800276e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e073      	b.n	800276e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002686:	4b3d      	ldr	r3, [pc, #244]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e06b      	b.n	800276e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002696:	4b39      	ldr	r3, [pc, #228]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f023 0203 	bic.w	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4936      	ldr	r1, [pc, #216]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a8:	f7fe fd92 	bl	80011d0 <HAL_GetTick>
 80026ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b0:	f7fe fd8e 	bl	80011d0 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e053      	b.n	800276e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	4b2d      	ldr	r3, [pc, #180]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 020c 	and.w	r2, r3, #12
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d1eb      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d210      	bcs.n	8002708 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 020f 	bic.w	r2, r3, #15
 80026ee:	4922      	ldr	r1, [pc, #136]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d001      	beq.n	8002708 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e032      	b.n	800276e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4916      	ldr	r1, [pc, #88]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002722:	4313      	orrs	r3, r2
 8002724:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002732:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	490e      	ldr	r1, [pc, #56]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002746:	f000 f821 	bl	800278c <HAL_RCC_GetSysClockFreq>
 800274a:	4602      	mov	r2, r0
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	091b      	lsrs	r3, r3, #4
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	490a      	ldr	r1, [pc, #40]	; (8002780 <HAL_RCC_ClockConfig+0x1cc>)
 8002758:	5ccb      	ldrb	r3, [r1, r3]
 800275a:	fa22 f303 	lsr.w	r3, r2, r3
 800275e:	4a09      	ldr	r2, [pc, #36]	; (8002784 <HAL_RCC_ClockConfig+0x1d0>)
 8002760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_RCC_ClockConfig+0x1d4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe fcee 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40023c00 	.word	0x40023c00
 800277c:	40023800 	.word	0x40023800
 8002780:	08005594 	.word	0x08005594
 8002784:	20000000 	.word	0x20000000
 8002788:	20000004 	.word	0x20000004

0800278c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800278c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	2300      	movs	r3, #0
 800279e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027a4:	4b67      	ldr	r3, [pc, #412]	; (8002944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b08      	cmp	r3, #8
 80027ae:	d00d      	beq.n	80027cc <HAL_RCC_GetSysClockFreq+0x40>
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	f200 80bd 	bhi.w	8002930 <HAL_RCC_GetSysClockFreq+0x1a4>
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x34>
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d003      	beq.n	80027c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027be:	e0b7      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027c0:	4b61      	ldr	r3, [pc, #388]	; (8002948 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027c2:	60bb      	str	r3, [r7, #8]
      break;
 80027c4:	e0b7      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027c6:	4b61      	ldr	r3, [pc, #388]	; (800294c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80027c8:	60bb      	str	r3, [r7, #8]
      break;
 80027ca:	e0b4      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027cc:	4b5d      	ldr	r3, [pc, #372]	; (8002944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027d6:	4b5b      	ldr	r3, [pc, #364]	; (8002944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d04d      	beq.n	800287e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e2:	4b58      	ldr	r3, [pc, #352]	; (8002944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	099b      	lsrs	r3, r3, #6
 80027e8:	461a      	mov	r2, r3
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027f2:	f04f 0100 	mov.w	r1, #0
 80027f6:	ea02 0800 	and.w	r8, r2, r0
 80027fa:	ea03 0901 	and.w	r9, r3, r1
 80027fe:	4640      	mov	r0, r8
 8002800:	4649      	mov	r1, r9
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	014b      	lsls	r3, r1, #5
 800280c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002810:	0142      	lsls	r2, r0, #5
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	ebb0 0008 	subs.w	r0, r0, r8
 800281a:	eb61 0109 	sbc.w	r1, r1, r9
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	f04f 0300 	mov.w	r3, #0
 8002826:	018b      	lsls	r3, r1, #6
 8002828:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800282c:	0182      	lsls	r2, r0, #6
 800282e:	1a12      	subs	r2, r2, r0
 8002830:	eb63 0301 	sbc.w	r3, r3, r1
 8002834:	f04f 0000 	mov.w	r0, #0
 8002838:	f04f 0100 	mov.w	r1, #0
 800283c:	00d9      	lsls	r1, r3, #3
 800283e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002842:	00d0      	lsls	r0, r2, #3
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	eb12 0208 	adds.w	r2, r2, r8
 800284c:	eb43 0309 	adc.w	r3, r3, r9
 8002850:	f04f 0000 	mov.w	r0, #0
 8002854:	f04f 0100 	mov.w	r1, #0
 8002858:	0259      	lsls	r1, r3, #9
 800285a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800285e:	0250      	lsls	r0, r2, #9
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	461a      	mov	r2, r3
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	f7fd fd36 	bl	80002e0 <__aeabi_uldivmod>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4613      	mov	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	e04a      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287e:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	099b      	lsrs	r3, r3, #6
 8002884:	461a      	mov	r2, r3
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800288e:	f04f 0100 	mov.w	r1, #0
 8002892:	ea02 0400 	and.w	r4, r2, r0
 8002896:	ea03 0501 	and.w	r5, r3, r1
 800289a:	4620      	mov	r0, r4
 800289c:	4629      	mov	r1, r5
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	014b      	lsls	r3, r1, #5
 80028a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028ac:	0142      	lsls	r2, r0, #5
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	1b00      	subs	r0, r0, r4
 80028b4:	eb61 0105 	sbc.w	r1, r1, r5
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	018b      	lsls	r3, r1, #6
 80028c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028c6:	0182      	lsls	r2, r0, #6
 80028c8:	1a12      	subs	r2, r2, r0
 80028ca:	eb63 0301 	sbc.w	r3, r3, r1
 80028ce:	f04f 0000 	mov.w	r0, #0
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	00d9      	lsls	r1, r3, #3
 80028d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028dc:	00d0      	lsls	r0, r2, #3
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	1912      	adds	r2, r2, r4
 80028e4:	eb45 0303 	adc.w	r3, r5, r3
 80028e8:	f04f 0000 	mov.w	r0, #0
 80028ec:	f04f 0100 	mov.w	r1, #0
 80028f0:	0299      	lsls	r1, r3, #10
 80028f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028f6:	0290      	lsls	r0, r2, #10
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	461a      	mov	r2, r3
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	f7fd fcea 	bl	80002e0 <__aeabi_uldivmod>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4613      	mov	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	3301      	adds	r3, #1
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	fbb2 f3f3 	udiv	r3, r2, r3
 800292c:	60bb      	str	r3, [r7, #8]
      break;
 800292e:	e002      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002932:	60bb      	str	r3, [r7, #8]
      break;
 8002934:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002936:	68bb      	ldr	r3, [r7, #8]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	00f42400 	.word	0x00f42400
 800294c:	007a1200 	.word	0x007a1200

08002950 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <HAL_RCC_GetHCLKFreq+0x14>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000000 	.word	0x20000000

08002968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800296c:	f7ff fff0 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	0a9b      	lsrs	r3, r3, #10
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4903      	ldr	r1, [pc, #12]	; (800298c <HAL_RCC_GetPCLK1Freq+0x24>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40023800 	.word	0x40023800
 800298c:	080055a4 	.word	0x080055a4

08002990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002994:	f7ff ffdc 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	0b5b      	lsrs	r3, r3, #13
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4903      	ldr	r1, [pc, #12]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	080055a4 	.word	0x080055a4

080029b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029e0:	4b69      	ldr	r3, [pc, #420]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a68      	ldr	r2, [pc, #416]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029ea:	6093      	str	r3, [r2, #8]
 80029ec:	4b66      	ldr	r3, [pc, #408]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f4:	4964      	ldr	r1, [pc, #400]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a02:	2301      	movs	r3, #1
 8002a04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d017      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a12:	4b5d      	ldr	r3, [pc, #372]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a20:	4959      	ldr	r1, [pc, #356]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a30:	d101      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a32:	2301      	movs	r3, #1
 8002a34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d017      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a4e:	4b4e      	ldr	r3, [pc, #312]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	494a      	ldr	r1, [pc, #296]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 808b 	beq.w	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a9c:	4b3a      	ldr	r3, [pc, #232]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	4a39      	ldr	r2, [pc, #228]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa8:	4b37      	ldr	r3, [pc, #220]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ab4:	4b35      	ldr	r3, [pc, #212]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a34      	ldr	r2, [pc, #208]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac0:	f7fe fb86 	bl	80011d0 <HAL_GetTick>
 8002ac4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac8:	f7fe fb82 	bl	80011d0 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e38f      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ada:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ae6:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d035      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d02e      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b04:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b0e:	4b1e      	ldr	r3, [pc, #120]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b12:	4a1d      	ldr	r2, [pc, #116]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b26:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b2c:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d114      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fe fb4a 	bl	80011d0 <HAL_GetTick>
 8002b3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7fe fb46 	bl	80011d0 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e351      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b56:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0ee      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b6e:	d111      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b7c:	4b04      	ldr	r3, [pc, #16]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b7e:	400b      	ands	r3, r1
 8002b80:	4901      	ldr	r1, [pc, #4]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	0ffffcff 	.word	0x0ffffcff
 8002b94:	4bb3      	ldr	r3, [pc, #716]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	4ab2      	ldr	r2, [pc, #712]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b9e:	6093      	str	r3, [r2, #8]
 8002ba0:	4bb0      	ldr	r3, [pc, #704]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ba2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bac:	49ad      	ldr	r1, [pc, #692]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d010      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bbe:	4ba9      	ldr	r3, [pc, #676]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc4:	4aa7      	ldr	r2, [pc, #668]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002bce:	4ba5      	ldr	r3, [pc, #660]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bd0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	49a2      	ldr	r1, [pc, #648]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bec:	4b9d      	ldr	r3, [pc, #628]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bfa:	499a      	ldr	r1, [pc, #616]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c0e:	4b95      	ldr	r3, [pc, #596]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c1c:	4991      	ldr	r1, [pc, #580]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c30:	4b8c      	ldr	r3, [pc, #560]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c3e:	4989      	ldr	r1, [pc, #548]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c52:	4b84      	ldr	r3, [pc, #528]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	4980      	ldr	r1, [pc, #512]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00a      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c74:	4b7b      	ldr	r3, [pc, #492]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	f023 0203 	bic.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	4978      	ldr	r1, [pc, #480]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c96:	4b73      	ldr	r3, [pc, #460]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c9c:	f023 020c 	bic.w	r2, r3, #12
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca4:	496f      	ldr	r1, [pc, #444]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00a      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cb8:	4b6a      	ldr	r3, [pc, #424]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc6:	4967      	ldr	r1, [pc, #412]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cda:	4b62      	ldr	r3, [pc, #392]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce8:	495e      	ldr	r1, [pc, #376]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cfc:	4b59      	ldr	r3, [pc, #356]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0a:	4956      	ldr	r1, [pc, #344]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d1e:	4b51      	ldr	r3, [pc, #324]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2c:	494d      	ldr	r1, [pc, #308]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d40:	4b48      	ldr	r3, [pc, #288]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	4945      	ldr	r1, [pc, #276]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d62:	4b40      	ldr	r3, [pc, #256]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d70:	493c      	ldr	r1, [pc, #240]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d84:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d92:	4934      	ldr	r1, [pc, #208]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d011      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002da6:	4b2f      	ldr	r3, [pc, #188]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db4:	492b      	ldr	r1, [pc, #172]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dc4:	d101      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002de6:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df4:	491b      	ldr	r1, [pc, #108]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00b      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e08:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e18:	4912      	ldr	r1, [pc, #72]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00b      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e32:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e3c:	4909      	ldr	r1, [pc, #36]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00f      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e50:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	e002      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800
 8002e68:	4986      	ldr	r1, [pc, #536]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00b      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e7c:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e8c:	497d      	ldr	r1, [pc, #500]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d006      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80d6 	beq.w	8003054 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ea8:	4b76      	ldr	r3, [pc, #472]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a75      	ldr	r2, [pc, #468]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002eb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb4:	f7fe f98c 	bl	80011d0 <HAL_GetTick>
 8002eb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ebc:	f7fe f988 	bl	80011d0 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	; 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e195      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ece:	4b6d      	ldr	r3, [pc, #436]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d021      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d11d      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002eee:	4b65      	ldr	r3, [pc, #404]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef4:	0c1b      	lsrs	r3, r3, #16
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002efc:	4b61      	ldr	r3, [pc, #388]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f02:	0e1b      	lsrs	r3, r3, #24
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	019a      	lsls	r2, r3, #6
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	041b      	lsls	r3, r3, #16
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	071b      	lsls	r3, r3, #28
 8002f22:	4958      	ldr	r1, [pc, #352]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d02e      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f54:	d129      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f56:	4b4b      	ldr	r3, [pc, #300]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5c:	0c1b      	lsrs	r3, r3, #16
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f64:	4b47      	ldr	r3, [pc, #284]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f6a:	0f1b      	lsrs	r3, r3, #28
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	019a      	lsls	r2, r3, #6
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	041b      	lsls	r3, r3, #16
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	061b      	lsls	r3, r3, #24
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	071b      	lsls	r3, r3, #28
 8002f8a:	493e      	ldr	r1, [pc, #248]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f92:	4b3c      	ldr	r3, [pc, #240]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f98:	f023 021f 	bic.w	r2, r3, #31
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	4938      	ldr	r1, [pc, #224]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01d      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fb6:	4b33      	ldr	r3, [pc, #204]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fbc:	0e1b      	lsrs	r3, r3, #24
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fc4:	4b2f      	ldr	r3, [pc, #188]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fca:	0f1b      	lsrs	r3, r3, #28
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	019a      	lsls	r2, r3, #6
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	061b      	lsls	r3, r3, #24
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	071b      	lsls	r3, r3, #28
 8002fea:	4926      	ldr	r1, [pc, #152]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d011      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	019a      	lsls	r2, r3, #6
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	041b      	lsls	r3, r3, #16
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	061b      	lsls	r3, r3, #24
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	071b      	lsls	r3, r3, #28
 800301a:	491a      	ldr	r1, [pc, #104]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003022:	4b18      	ldr	r3, [pc, #96]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a17      	ldr	r2, [pc, #92]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003028:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800302c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302e:	f7fe f8cf 	bl	80011d0 <HAL_GetTick>
 8003032:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003036:	f7fe f8cb 	bl	80011d0 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b64      	cmp	r3, #100	; 0x64
 8003042:	d901      	bls.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e0d8      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003048:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b01      	cmp	r3, #1
 8003058:	f040 80ce 	bne.w	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a08      	ldr	r2, [pc, #32]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003068:	f7fe f8b2 	bl	80011d0 <HAL_GetTick>
 800306c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800306e:	e00b      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003070:	f7fe f8ae 	bl	80011d0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d904      	bls.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e0bb      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003082:	bf00      	nop
 8003084:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003088:	4b5e      	ldr	r3, [pc, #376]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003094:	d0ec      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d02e      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d12a      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030be:	4b51      	ldr	r3, [pc, #324]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030cc:	4b4d      	ldr	r3, [pc, #308]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	0f1b      	lsrs	r3, r3, #28
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	019a      	lsls	r2, r3, #6
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	041b      	lsls	r3, r3, #16
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	061b      	lsls	r3, r3, #24
 80030ec:	431a      	orrs	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	071b      	lsls	r3, r3, #28
 80030f2:	4944      	ldr	r1, [pc, #272]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030fa:	4b42      	ldr	r3, [pc, #264]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003100:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	3b01      	subs	r3, #1
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	493d      	ldr	r1, [pc, #244]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d022      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003128:	d11d      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800312a:	4b36      	ldr	r3, [pc, #216]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003130:	0e1b      	lsrs	r3, r3, #24
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003138:	4b32      	ldr	r3, [pc, #200]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	0f1b      	lsrs	r3, r3, #28
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	019a      	lsls	r2, r3, #6
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	041b      	lsls	r3, r3, #16
 8003152:	431a      	orrs	r2, r3
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	061b      	lsls	r3, r3, #24
 8003158:	431a      	orrs	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	071b      	lsls	r3, r3, #28
 800315e:	4929      	ldr	r1, [pc, #164]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d028      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003172:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003178:	0e1b      	lsrs	r3, r3, #24
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003180:	4b20      	ldr	r3, [pc, #128]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003186:	0c1b      	lsrs	r3, r3, #16
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	019a      	lsls	r2, r3, #6
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	041b      	lsls	r3, r3, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	061b      	lsls	r3, r3, #24
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	071b      	lsls	r3, r3, #28
 80031a6:	4917      	ldr	r1, [pc, #92]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	4911      	ldr	r1, [pc, #68]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d0:	f7fd fffe 	bl	80011d0 <HAL_GetTick>
 80031d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031d8:	f7fd fffa 	bl	80011d0 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	; 0x64
 80031e4:	d901      	bls.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e007      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031f6:	d1ef      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3720      	adds	r7, #32
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800

08003208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e049      	b.n	80032ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fd fdda 	bl	8000de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3304      	adds	r3, #4
 8003244:	4619      	mov	r1, r3
 8003246:	4610      	mov	r0, r2
 8003248:	f000 fb68 	bl	800391c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d001      	beq.n	80032d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e04c      	b.n	800336a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a26      	ldr	r2, [pc, #152]	; (8003378 <HAL_TIM_Base_Start+0xc0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d022      	beq.n	8003328 <HAL_TIM_Base_Start+0x70>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ea:	d01d      	beq.n	8003328 <HAL_TIM_Base_Start+0x70>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a22      	ldr	r2, [pc, #136]	; (800337c <HAL_TIM_Base_Start+0xc4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d018      	beq.n	8003328 <HAL_TIM_Base_Start+0x70>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a21      	ldr	r2, [pc, #132]	; (8003380 <HAL_TIM_Base_Start+0xc8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d013      	beq.n	8003328 <HAL_TIM_Base_Start+0x70>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1f      	ldr	r2, [pc, #124]	; (8003384 <HAL_TIM_Base_Start+0xcc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00e      	beq.n	8003328 <HAL_TIM_Base_Start+0x70>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <HAL_TIM_Base_Start+0xd0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d009      	beq.n	8003328 <HAL_TIM_Base_Start+0x70>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1c      	ldr	r2, [pc, #112]	; (800338c <HAL_TIM_Base_Start+0xd4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d004      	beq.n	8003328 <HAL_TIM_Base_Start+0x70>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1b      	ldr	r2, [pc, #108]	; (8003390 <HAL_TIM_Base_Start+0xd8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d115      	bne.n	8003354 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_TIM_Base_Start+0xdc>)
 8003330:	4013      	ands	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b06      	cmp	r3, #6
 8003338:	d015      	beq.n	8003366 <HAL_TIM_Base_Start+0xae>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d011      	beq.n	8003366 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0201 	orr.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003352:	e008      	b.n	8003366 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	e000      	b.n	8003368 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003366:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40010000 	.word	0x40010000
 800337c:	40000400 	.word	0x40000400
 8003380:	40000800 	.word	0x40000800
 8003384:	40000c00 	.word	0x40000c00
 8003388:	40010400 	.word	0x40010400
 800338c:	40014000 	.word	0x40014000
 8003390:	40001800 	.word	0x40001800
 8003394:	00010007 	.word	0x00010007

08003398 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e08f      	b.n	80034cc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d106      	bne.n	80033c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7fd fccd 	bl	8000d60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2202      	movs	r2, #2
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <HAL_TIM_Encoder_Init+0x13c>)
 80033da:	400b      	ands	r3, r1
 80033dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3304      	adds	r3, #4
 80033e6:	4619      	mov	r1, r3
 80033e8:	4610      	mov	r0, r2
 80033ea:	f000 fa97 	bl	800391c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4b31      	ldr	r3, [pc, #196]	; (80034d8 <HAL_TIM_Encoder_Init+0x140>)
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	4313      	orrs	r3, r2
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <HAL_TIM_Encoder_Init+0x144>)
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <HAL_TIM_Encoder_Init+0x148>)
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	4313      	orrs	r3, r2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	011a      	lsls	r2, r3, #4
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	031b      	lsls	r3, r3, #12
 8003458:	4313      	orrs	r3, r2
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	4313      	orrs	r3, r2
 800345e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003466:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800346e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	4313      	orrs	r3, r2
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	fffebff8 	.word	0xfffebff8
 80034d8:	fffffcfc 	.word	0xfffffcfc
 80034dc:	fffff3f3 	.word	0xfffff3f3
 80034e0:	ffff0f0f 	.word	0xffff0f0f

080034e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d122      	bne.n	8003540 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b02      	cmp	r3, #2
 8003506:	d11b      	bne.n	8003540 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0202 	mvn.w	r2, #2
 8003510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f9da 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
 800352c:	e005      	b.n	800353a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f9cc 	bl	80038cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f9dd 	bl	80038f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	2b04      	cmp	r3, #4
 800354c:	d122      	bne.n	8003594 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b04      	cmp	r3, #4
 800355a:	d11b      	bne.n	8003594 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0204 	mvn.w	r2, #4
 8003564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f9b0 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f9a2 	bl	80038cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f9b3 	bl	80038f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d122      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d11b      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0208 	mvn.w	r2, #8
 80035b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2204      	movs	r2, #4
 80035be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f986 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
 80035d4:	e005      	b.n	80035e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f978 	bl	80038cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f989 	bl	80038f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0310 	and.w	r3, r3, #16
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d122      	bne.n	800363c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b10      	cmp	r3, #16
 8003602:	d11b      	bne.n	800363c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0210 	mvn.w	r2, #16
 800360c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2208      	movs	r2, #8
 8003612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f95c 	bl	80038e0 <HAL_TIM_IC_CaptureCallback>
 8003628:	e005      	b.n	8003636 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f94e 	bl	80038cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f95f 	bl	80038f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b01      	cmp	r3, #1
 8003648:	d10e      	bne.n	8003668 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b01      	cmp	r3, #1
 8003656:	d107      	bne.n	8003668 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0201 	mvn.w	r2, #1
 8003660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f928 	bl	80038b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003672:	2b80      	cmp	r3, #128	; 0x80
 8003674:	d10e      	bne.n	8003694 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003680:	2b80      	cmp	r3, #128	; 0x80
 8003682:	d107      	bne.n	8003694 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800368c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 fb16 	bl	8003cc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a2:	d10e      	bne.n	80036c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ae:	2b80      	cmp	r3, #128	; 0x80
 80036b0:	d107      	bne.n	80036c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80036ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fb09 	bl	8003cd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036cc:	2b40      	cmp	r3, #64	; 0x40
 80036ce:	d10e      	bne.n	80036ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d107      	bne.n	80036ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f90d 	bl	8003908 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d10e      	bne.n	800371a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b20      	cmp	r3, #32
 8003708:	d107      	bne.n	800371a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f06f 0220 	mvn.w	r2, #32
 8003712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fac9 	bl	8003cac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_TIM_ConfigClockSource+0x1c>
 800373c:	2302      	movs	r3, #2
 800373e:	e0b4      	b.n	80038aa <HAL_TIM_ConfigClockSource+0x186>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	4b56      	ldr	r3, [pc, #344]	; (80038b4 <HAL_TIM_ConfigClockSource+0x190>)
 800375c:	4013      	ands	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003778:	d03e      	beq.n	80037f8 <HAL_TIM_ConfigClockSource+0xd4>
 800377a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800377e:	f200 8087 	bhi.w	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 8003782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003786:	f000 8086 	beq.w	8003896 <HAL_TIM_ConfigClockSource+0x172>
 800378a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378e:	d87f      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 8003790:	2b70      	cmp	r3, #112	; 0x70
 8003792:	d01a      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0xa6>
 8003794:	2b70      	cmp	r3, #112	; 0x70
 8003796:	d87b      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 8003798:	2b60      	cmp	r3, #96	; 0x60
 800379a:	d050      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x11a>
 800379c:	2b60      	cmp	r3, #96	; 0x60
 800379e:	d877      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 80037a0:	2b50      	cmp	r3, #80	; 0x50
 80037a2:	d03c      	beq.n	800381e <HAL_TIM_ConfigClockSource+0xfa>
 80037a4:	2b50      	cmp	r3, #80	; 0x50
 80037a6:	d873      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 80037a8:	2b40      	cmp	r3, #64	; 0x40
 80037aa:	d058      	beq.n	800385e <HAL_TIM_ConfigClockSource+0x13a>
 80037ac:	2b40      	cmp	r3, #64	; 0x40
 80037ae:	d86f      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 80037b0:	2b30      	cmp	r3, #48	; 0x30
 80037b2:	d064      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x15a>
 80037b4:	2b30      	cmp	r3, #48	; 0x30
 80037b6:	d86b      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d060      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x15a>
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d867      	bhi.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d05c      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x15a>
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d05a      	beq.n	800387e <HAL_TIM_ConfigClockSource+0x15a>
 80037c8:	e062      	b.n	8003890 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	6899      	ldr	r1, [r3, #8]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f000 f9b9 	bl	8003b50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	609a      	str	r2, [r3, #8]
      break;
 80037f6:	e04f      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	6899      	ldr	r1, [r3, #8]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f000 f9a2 	bl	8003b50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689a      	ldr	r2, [r3, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800381a:	609a      	str	r2, [r3, #8]
      break;
 800381c:	e03c      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	461a      	mov	r2, r3
 800382c:	f000 f916 	bl	8003a5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2150      	movs	r1, #80	; 0x50
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f96f 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 800383c:	e02c      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	6859      	ldr	r1, [r3, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	461a      	mov	r2, r3
 800384c:	f000 f935 	bl	8003aba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2160      	movs	r1, #96	; 0x60
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f95f 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 800385c:	e01c      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	461a      	mov	r2, r3
 800386c:	f000 f8f6 	bl	8003a5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2140      	movs	r1, #64	; 0x40
 8003876:	4618      	mov	r0, r3
 8003878:	f000 f94f 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 800387c:	e00c      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4619      	mov	r1, r3
 8003888:	4610      	mov	r0, r2
 800388a:	f000 f946 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 800388e:	e003      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
      break;
 8003894:	e000      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	fffeff88 	.word	0xfffeff88

080038b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a40      	ldr	r2, [pc, #256]	; (8003a30 <TIM_Base_SetConfig+0x114>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d013      	beq.n	800395c <TIM_Base_SetConfig+0x40>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393a:	d00f      	beq.n	800395c <TIM_Base_SetConfig+0x40>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a3d      	ldr	r2, [pc, #244]	; (8003a34 <TIM_Base_SetConfig+0x118>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00b      	beq.n	800395c <TIM_Base_SetConfig+0x40>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a3c      	ldr	r2, [pc, #240]	; (8003a38 <TIM_Base_SetConfig+0x11c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d007      	beq.n	800395c <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a3b      	ldr	r2, [pc, #236]	; (8003a3c <TIM_Base_SetConfig+0x120>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d003      	beq.n	800395c <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a3a      	ldr	r2, [pc, #232]	; (8003a40 <TIM_Base_SetConfig+0x124>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d108      	bne.n	800396e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a2f      	ldr	r2, [pc, #188]	; (8003a30 <TIM_Base_SetConfig+0x114>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d02b      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397c:	d027      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a2c      	ldr	r2, [pc, #176]	; (8003a34 <TIM_Base_SetConfig+0x118>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d023      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2b      	ldr	r2, [pc, #172]	; (8003a38 <TIM_Base_SetConfig+0x11c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d01f      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a2a      	ldr	r2, [pc, #168]	; (8003a3c <TIM_Base_SetConfig+0x120>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01b      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a29      	ldr	r2, [pc, #164]	; (8003a40 <TIM_Base_SetConfig+0x124>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d017      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a28      	ldr	r2, [pc, #160]	; (8003a44 <TIM_Base_SetConfig+0x128>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a27      	ldr	r2, [pc, #156]	; (8003a48 <TIM_Base_SetConfig+0x12c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00f      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a26      	ldr	r2, [pc, #152]	; (8003a4c <TIM_Base_SetConfig+0x130>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00b      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a25      	ldr	r2, [pc, #148]	; (8003a50 <TIM_Base_SetConfig+0x134>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d007      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a24      	ldr	r2, [pc, #144]	; (8003a54 <TIM_Base_SetConfig+0x138>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d003      	beq.n	80039ce <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a23      	ldr	r2, [pc, #140]	; (8003a58 <TIM_Base_SetConfig+0x13c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d108      	bne.n	80039e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <TIM_Base_SetConfig+0x114>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d003      	beq.n	8003a14 <TIM_Base_SetConfig+0xf8>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a0c      	ldr	r2, [pc, #48]	; (8003a40 <TIM_Base_SetConfig+0x124>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d103      	bne.n	8003a1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	615a      	str	r2, [r3, #20]
}
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40000400 	.word	0x40000400
 8003a38:	40000800 	.word	0x40000800
 8003a3c:	40000c00 	.word	0x40000c00
 8003a40:	40010400 	.word	0x40010400
 8003a44:	40014000 	.word	0x40014000
 8003a48:	40014400 	.word	0x40014400
 8003a4c:	40014800 	.word	0x40014800
 8003a50:	40001800 	.word	0x40001800
 8003a54:	40001c00 	.word	0x40001c00
 8003a58:	40002000 	.word	0x40002000

08003a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f023 0201 	bic.w	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 030a 	bic.w	r3, r3, #10
 8003a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b087      	sub	sp, #28
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	f023 0210 	bic.w	r2, r3, #16
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ae4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	031b      	lsls	r3, r3, #12
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003af6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	621a      	str	r2, [r3, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f043 0307 	orr.w	r3, r3, #7
 8003b3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	609a      	str	r2, [r3, #8]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	021a      	lsls	r2, r3, #8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	609a      	str	r2, [r3, #8]
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e06d      	b.n	8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a30      	ldr	r2, [pc, #192]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d004      	beq.n	8003bdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2f      	ldr	r2, [pc, #188]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d108      	bne.n	8003bee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003be2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a20      	ldr	r2, [pc, #128]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d022      	beq.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1a:	d01d      	beq.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d018      	beq.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1c      	ldr	r2, [pc, #112]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d013      	beq.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00e      	beq.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d009      	beq.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a16      	ldr	r2, [pc, #88]	; (8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d10c      	bne.n	8003c72 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	40010000 	.word	0x40010000
 8003c94:	40010400 	.word	0x40010400
 8003c98:	40000400 	.word	0x40000400
 8003c9c:	40000800 	.word	0x40000800
 8003ca0:	40000c00 	.word	0x40000c00
 8003ca4:	40014000 	.word	0x40014000
 8003ca8:	40001800 	.word	0x40001800

08003cac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e040      	b.n	8003d7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fd f890 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2224      	movs	r2, #36	; 0x24
 8003d14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f8c0 	bl	8003eac <UART_SetConfig>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e022      	b.n	8003d7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fb16 	bl	8004370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0201 	orr.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fb9d 	bl	80044b4 <UART_CheckIdleState>
 8003d7a:	4603      	mov	r3, r0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	4613      	mov	r3, r2
 8003d92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	f040 8081 	bne.w	8003ea0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <HAL_UART_Transmit+0x26>
 8003da4:	88fb      	ldrh	r3, [r7, #6]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e079      	b.n	8003ea2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_UART_Transmit+0x38>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e072      	b.n	8003ea2 <HAL_UART_Transmit+0x11e>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2221      	movs	r2, #33	; 0x21
 8003dd0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dd2:	f7fd f9fd 	bl	80011d0 <HAL_GetTick>
 8003dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	88fa      	ldrh	r2, [r7, #6]
 8003ddc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df0:	d108      	bne.n	8003e04 <HAL_UART_Transmit+0x80>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	e003      	b.n	8003e0c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003e14:	e02c      	b.n	8003e70 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 fb90 	bl	8004546 <UART_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e038      	b.n	8003ea2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	3302      	adds	r3, #2
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	e007      	b.n	8003e5e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1cc      	bne.n	8003e16 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2200      	movs	r2, #0
 8003e84:	2140      	movs	r1, #64	; 0x40
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 fb5d 	bl	8004546 <UART_WaitOnFlagUntilTimeout>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e005      	b.n	8003ea2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
  }
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4ba7      	ldr	r3, [pc, #668]	; (8004174 <UART_SetConfig+0x2c8>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	6979      	ldr	r1, [r7, #20]
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a95      	ldr	r2, [pc, #596]	; (8004178 <UART_SetConfig+0x2cc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d120      	bne.n	8003f6a <UART_SetConfig+0xbe>
 8003f28:	4b94      	ldr	r3, [pc, #592]	; (800417c <UART_SetConfig+0x2d0>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d816      	bhi.n	8003f64 <UART_SetConfig+0xb8>
 8003f36:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <UART_SetConfig+0x90>)
 8003f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3c:	08003f4d 	.word	0x08003f4d
 8003f40:	08003f59 	.word	0x08003f59
 8003f44:	08003f53 	.word	0x08003f53
 8003f48:	08003f5f 	.word	0x08003f5f
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e14f      	b.n	80041f2 <UART_SetConfig+0x346>
 8003f52:	2302      	movs	r3, #2
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	e14c      	b.n	80041f2 <UART_SetConfig+0x346>
 8003f58:	2304      	movs	r3, #4
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e149      	b.n	80041f2 <UART_SetConfig+0x346>
 8003f5e:	2308      	movs	r3, #8
 8003f60:	77fb      	strb	r3, [r7, #31]
 8003f62:	e146      	b.n	80041f2 <UART_SetConfig+0x346>
 8003f64:	2310      	movs	r3, #16
 8003f66:	77fb      	strb	r3, [r7, #31]
 8003f68:	e143      	b.n	80041f2 <UART_SetConfig+0x346>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a84      	ldr	r2, [pc, #528]	; (8004180 <UART_SetConfig+0x2d4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d132      	bne.n	8003fda <UART_SetConfig+0x12e>
 8003f74:	4b81      	ldr	r3, [pc, #516]	; (800417c <UART_SetConfig+0x2d0>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b0c      	cmp	r3, #12
 8003f80:	d828      	bhi.n	8003fd4 <UART_SetConfig+0x128>
 8003f82:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <UART_SetConfig+0xdc>)
 8003f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f88:	08003fbd 	.word	0x08003fbd
 8003f8c:	08003fd5 	.word	0x08003fd5
 8003f90:	08003fd5 	.word	0x08003fd5
 8003f94:	08003fd5 	.word	0x08003fd5
 8003f98:	08003fc9 	.word	0x08003fc9
 8003f9c:	08003fd5 	.word	0x08003fd5
 8003fa0:	08003fd5 	.word	0x08003fd5
 8003fa4:	08003fd5 	.word	0x08003fd5
 8003fa8:	08003fc3 	.word	0x08003fc3
 8003fac:	08003fd5 	.word	0x08003fd5
 8003fb0:	08003fd5 	.word	0x08003fd5
 8003fb4:	08003fd5 	.word	0x08003fd5
 8003fb8:	08003fcf 	.word	0x08003fcf
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e117      	b.n	80041f2 <UART_SetConfig+0x346>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e114      	b.n	80041f2 <UART_SetConfig+0x346>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e111      	b.n	80041f2 <UART_SetConfig+0x346>
 8003fce:	2308      	movs	r3, #8
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e10e      	b.n	80041f2 <UART_SetConfig+0x346>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e10b      	b.n	80041f2 <UART_SetConfig+0x346>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a69      	ldr	r2, [pc, #420]	; (8004184 <UART_SetConfig+0x2d8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d120      	bne.n	8004026 <UART_SetConfig+0x17a>
 8003fe4:	4b65      	ldr	r3, [pc, #404]	; (800417c <UART_SetConfig+0x2d0>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fee:	2b30      	cmp	r3, #48	; 0x30
 8003ff0:	d013      	beq.n	800401a <UART_SetConfig+0x16e>
 8003ff2:	2b30      	cmp	r3, #48	; 0x30
 8003ff4:	d814      	bhi.n	8004020 <UART_SetConfig+0x174>
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d009      	beq.n	800400e <UART_SetConfig+0x162>
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d810      	bhi.n	8004020 <UART_SetConfig+0x174>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <UART_SetConfig+0x15c>
 8004002:	2b10      	cmp	r3, #16
 8004004:	d006      	beq.n	8004014 <UART_SetConfig+0x168>
 8004006:	e00b      	b.n	8004020 <UART_SetConfig+0x174>
 8004008:	2300      	movs	r3, #0
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e0f1      	b.n	80041f2 <UART_SetConfig+0x346>
 800400e:	2302      	movs	r3, #2
 8004010:	77fb      	strb	r3, [r7, #31]
 8004012:	e0ee      	b.n	80041f2 <UART_SetConfig+0x346>
 8004014:	2304      	movs	r3, #4
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e0eb      	b.n	80041f2 <UART_SetConfig+0x346>
 800401a:	2308      	movs	r3, #8
 800401c:	77fb      	strb	r3, [r7, #31]
 800401e:	e0e8      	b.n	80041f2 <UART_SetConfig+0x346>
 8004020:	2310      	movs	r3, #16
 8004022:	77fb      	strb	r3, [r7, #31]
 8004024:	e0e5      	b.n	80041f2 <UART_SetConfig+0x346>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a57      	ldr	r2, [pc, #348]	; (8004188 <UART_SetConfig+0x2dc>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d120      	bne.n	8004072 <UART_SetConfig+0x1c6>
 8004030:	4b52      	ldr	r3, [pc, #328]	; (800417c <UART_SetConfig+0x2d0>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004036:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800403a:	2bc0      	cmp	r3, #192	; 0xc0
 800403c:	d013      	beq.n	8004066 <UART_SetConfig+0x1ba>
 800403e:	2bc0      	cmp	r3, #192	; 0xc0
 8004040:	d814      	bhi.n	800406c <UART_SetConfig+0x1c0>
 8004042:	2b80      	cmp	r3, #128	; 0x80
 8004044:	d009      	beq.n	800405a <UART_SetConfig+0x1ae>
 8004046:	2b80      	cmp	r3, #128	; 0x80
 8004048:	d810      	bhi.n	800406c <UART_SetConfig+0x1c0>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <UART_SetConfig+0x1a8>
 800404e:	2b40      	cmp	r3, #64	; 0x40
 8004050:	d006      	beq.n	8004060 <UART_SetConfig+0x1b4>
 8004052:	e00b      	b.n	800406c <UART_SetConfig+0x1c0>
 8004054:	2300      	movs	r3, #0
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e0cb      	b.n	80041f2 <UART_SetConfig+0x346>
 800405a:	2302      	movs	r3, #2
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e0c8      	b.n	80041f2 <UART_SetConfig+0x346>
 8004060:	2304      	movs	r3, #4
 8004062:	77fb      	strb	r3, [r7, #31]
 8004064:	e0c5      	b.n	80041f2 <UART_SetConfig+0x346>
 8004066:	2308      	movs	r3, #8
 8004068:	77fb      	strb	r3, [r7, #31]
 800406a:	e0c2      	b.n	80041f2 <UART_SetConfig+0x346>
 800406c:	2310      	movs	r3, #16
 800406e:	77fb      	strb	r3, [r7, #31]
 8004070:	e0bf      	b.n	80041f2 <UART_SetConfig+0x346>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a45      	ldr	r2, [pc, #276]	; (800418c <UART_SetConfig+0x2e0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d125      	bne.n	80040c8 <UART_SetConfig+0x21c>
 800407c:	4b3f      	ldr	r3, [pc, #252]	; (800417c <UART_SetConfig+0x2d0>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800408a:	d017      	beq.n	80040bc <UART_SetConfig+0x210>
 800408c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004090:	d817      	bhi.n	80040c2 <UART_SetConfig+0x216>
 8004092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004096:	d00b      	beq.n	80040b0 <UART_SetConfig+0x204>
 8004098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800409c:	d811      	bhi.n	80040c2 <UART_SetConfig+0x216>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <UART_SetConfig+0x1fe>
 80040a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a6:	d006      	beq.n	80040b6 <UART_SetConfig+0x20a>
 80040a8:	e00b      	b.n	80040c2 <UART_SetConfig+0x216>
 80040aa:	2300      	movs	r3, #0
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e0a0      	b.n	80041f2 <UART_SetConfig+0x346>
 80040b0:	2302      	movs	r3, #2
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	e09d      	b.n	80041f2 <UART_SetConfig+0x346>
 80040b6:	2304      	movs	r3, #4
 80040b8:	77fb      	strb	r3, [r7, #31]
 80040ba:	e09a      	b.n	80041f2 <UART_SetConfig+0x346>
 80040bc:	2308      	movs	r3, #8
 80040be:	77fb      	strb	r3, [r7, #31]
 80040c0:	e097      	b.n	80041f2 <UART_SetConfig+0x346>
 80040c2:	2310      	movs	r3, #16
 80040c4:	77fb      	strb	r3, [r7, #31]
 80040c6:	e094      	b.n	80041f2 <UART_SetConfig+0x346>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a30      	ldr	r2, [pc, #192]	; (8004190 <UART_SetConfig+0x2e4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d125      	bne.n	800411e <UART_SetConfig+0x272>
 80040d2:	4b2a      	ldr	r3, [pc, #168]	; (800417c <UART_SetConfig+0x2d0>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040e0:	d017      	beq.n	8004112 <UART_SetConfig+0x266>
 80040e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040e6:	d817      	bhi.n	8004118 <UART_SetConfig+0x26c>
 80040e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ec:	d00b      	beq.n	8004106 <UART_SetConfig+0x25a>
 80040ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f2:	d811      	bhi.n	8004118 <UART_SetConfig+0x26c>
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <UART_SetConfig+0x254>
 80040f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fc:	d006      	beq.n	800410c <UART_SetConfig+0x260>
 80040fe:	e00b      	b.n	8004118 <UART_SetConfig+0x26c>
 8004100:	2301      	movs	r3, #1
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e075      	b.n	80041f2 <UART_SetConfig+0x346>
 8004106:	2302      	movs	r3, #2
 8004108:	77fb      	strb	r3, [r7, #31]
 800410a:	e072      	b.n	80041f2 <UART_SetConfig+0x346>
 800410c:	2304      	movs	r3, #4
 800410e:	77fb      	strb	r3, [r7, #31]
 8004110:	e06f      	b.n	80041f2 <UART_SetConfig+0x346>
 8004112:	2308      	movs	r3, #8
 8004114:	77fb      	strb	r3, [r7, #31]
 8004116:	e06c      	b.n	80041f2 <UART_SetConfig+0x346>
 8004118:	2310      	movs	r3, #16
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e069      	b.n	80041f2 <UART_SetConfig+0x346>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1c      	ldr	r2, [pc, #112]	; (8004194 <UART_SetConfig+0x2e8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d137      	bne.n	8004198 <UART_SetConfig+0x2ec>
 8004128:	4b14      	ldr	r3, [pc, #80]	; (800417c <UART_SetConfig+0x2d0>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004132:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004136:	d017      	beq.n	8004168 <UART_SetConfig+0x2bc>
 8004138:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800413c:	d817      	bhi.n	800416e <UART_SetConfig+0x2c2>
 800413e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004142:	d00b      	beq.n	800415c <UART_SetConfig+0x2b0>
 8004144:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004148:	d811      	bhi.n	800416e <UART_SetConfig+0x2c2>
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <UART_SetConfig+0x2aa>
 800414e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004152:	d006      	beq.n	8004162 <UART_SetConfig+0x2b6>
 8004154:	e00b      	b.n	800416e <UART_SetConfig+0x2c2>
 8004156:	2300      	movs	r3, #0
 8004158:	77fb      	strb	r3, [r7, #31]
 800415a:	e04a      	b.n	80041f2 <UART_SetConfig+0x346>
 800415c:	2302      	movs	r3, #2
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e047      	b.n	80041f2 <UART_SetConfig+0x346>
 8004162:	2304      	movs	r3, #4
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e044      	b.n	80041f2 <UART_SetConfig+0x346>
 8004168:	2308      	movs	r3, #8
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e041      	b.n	80041f2 <UART_SetConfig+0x346>
 800416e:	2310      	movs	r3, #16
 8004170:	77fb      	strb	r3, [r7, #31]
 8004172:	e03e      	b.n	80041f2 <UART_SetConfig+0x346>
 8004174:	efff69f3 	.word	0xefff69f3
 8004178:	40011000 	.word	0x40011000
 800417c:	40023800 	.word	0x40023800
 8004180:	40004400 	.word	0x40004400
 8004184:	40004800 	.word	0x40004800
 8004188:	40004c00 	.word	0x40004c00
 800418c:	40005000 	.word	0x40005000
 8004190:	40011400 	.word	0x40011400
 8004194:	40007800 	.word	0x40007800
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a71      	ldr	r2, [pc, #452]	; (8004364 <UART_SetConfig+0x4b8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d125      	bne.n	80041ee <UART_SetConfig+0x342>
 80041a2:	4b71      	ldr	r3, [pc, #452]	; (8004368 <UART_SetConfig+0x4bc>)
 80041a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041ac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041b0:	d017      	beq.n	80041e2 <UART_SetConfig+0x336>
 80041b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80041b6:	d817      	bhi.n	80041e8 <UART_SetConfig+0x33c>
 80041b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041bc:	d00b      	beq.n	80041d6 <UART_SetConfig+0x32a>
 80041be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c2:	d811      	bhi.n	80041e8 <UART_SetConfig+0x33c>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <UART_SetConfig+0x324>
 80041c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041cc:	d006      	beq.n	80041dc <UART_SetConfig+0x330>
 80041ce:	e00b      	b.n	80041e8 <UART_SetConfig+0x33c>
 80041d0:	2300      	movs	r3, #0
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e00d      	b.n	80041f2 <UART_SetConfig+0x346>
 80041d6:	2302      	movs	r3, #2
 80041d8:	77fb      	strb	r3, [r7, #31]
 80041da:	e00a      	b.n	80041f2 <UART_SetConfig+0x346>
 80041dc:	2304      	movs	r3, #4
 80041de:	77fb      	strb	r3, [r7, #31]
 80041e0:	e007      	b.n	80041f2 <UART_SetConfig+0x346>
 80041e2:	2308      	movs	r3, #8
 80041e4:	77fb      	strb	r3, [r7, #31]
 80041e6:	e004      	b.n	80041f2 <UART_SetConfig+0x346>
 80041e8:	2310      	movs	r3, #16
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e001      	b.n	80041f2 <UART_SetConfig+0x346>
 80041ee:	2310      	movs	r3, #16
 80041f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fa:	d15a      	bne.n	80042b2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80041fc:	7ffb      	ldrb	r3, [r7, #31]
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d827      	bhi.n	8004252 <UART_SetConfig+0x3a6>
 8004202:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <UART_SetConfig+0x35c>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	0800422d 	.word	0x0800422d
 800420c:	08004235 	.word	0x08004235
 8004210:	0800423d 	.word	0x0800423d
 8004214:	08004253 	.word	0x08004253
 8004218:	08004243 	.word	0x08004243
 800421c:	08004253 	.word	0x08004253
 8004220:	08004253 	.word	0x08004253
 8004224:	08004253 	.word	0x08004253
 8004228:	0800424b 	.word	0x0800424b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800422c:	f7fe fb9c 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8004230:	61b8      	str	r0, [r7, #24]
        break;
 8004232:	e013      	b.n	800425c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004234:	f7fe fbac 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 8004238:	61b8      	str	r0, [r7, #24]
        break;
 800423a:	e00f      	b.n	800425c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800423c:	4b4b      	ldr	r3, [pc, #300]	; (800436c <UART_SetConfig+0x4c0>)
 800423e:	61bb      	str	r3, [r7, #24]
        break;
 8004240:	e00c      	b.n	800425c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004242:	f7fe faa3 	bl	800278c <HAL_RCC_GetSysClockFreq>
 8004246:	61b8      	str	r0, [r7, #24]
        break;
 8004248:	e008      	b.n	800425c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800424a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800424e:	61bb      	str	r3, [r7, #24]
        break;
 8004250:	e004      	b.n	800425c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	77bb      	strb	r3, [r7, #30]
        break;
 800425a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d074      	beq.n	800434c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	005a      	lsls	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	085b      	lsrs	r3, r3, #1
 800426c:	441a      	add	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	fbb2 f3f3 	udiv	r3, r2, r3
 8004276:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b0f      	cmp	r3, #15
 800427c:	d916      	bls.n	80042ac <UART_SetConfig+0x400>
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004284:	d212      	bcs.n	80042ac <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	b29b      	uxth	r3, r3
 800428a:	f023 030f 	bic.w	r3, r3, #15
 800428e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	b29b      	uxth	r3, r3
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	b29a      	uxth	r2, r3
 800429c:	89fb      	ldrh	r3, [r7, #14]
 800429e:	4313      	orrs	r3, r2
 80042a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	89fa      	ldrh	r2, [r7, #14]
 80042a8:	60da      	str	r2, [r3, #12]
 80042aa:	e04f      	b.n	800434c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	77bb      	strb	r3, [r7, #30]
 80042b0:	e04c      	b.n	800434c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042b2:	7ffb      	ldrb	r3, [r7, #31]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d828      	bhi.n	800430a <UART_SetConfig+0x45e>
 80042b8:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <UART_SetConfig+0x414>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	080042e5 	.word	0x080042e5
 80042c4:	080042ed 	.word	0x080042ed
 80042c8:	080042f5 	.word	0x080042f5
 80042cc:	0800430b 	.word	0x0800430b
 80042d0:	080042fb 	.word	0x080042fb
 80042d4:	0800430b 	.word	0x0800430b
 80042d8:	0800430b 	.word	0x0800430b
 80042dc:	0800430b 	.word	0x0800430b
 80042e0:	08004303 	.word	0x08004303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e4:	f7fe fb40 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 80042e8:	61b8      	str	r0, [r7, #24]
        break;
 80042ea:	e013      	b.n	8004314 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042ec:	f7fe fb50 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 80042f0:	61b8      	str	r0, [r7, #24]
        break;
 80042f2:	e00f      	b.n	8004314 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f4:	4b1d      	ldr	r3, [pc, #116]	; (800436c <UART_SetConfig+0x4c0>)
 80042f6:	61bb      	str	r3, [r7, #24]
        break;
 80042f8:	e00c      	b.n	8004314 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042fa:	f7fe fa47 	bl	800278c <HAL_RCC_GetSysClockFreq>
 80042fe:	61b8      	str	r0, [r7, #24]
        break;
 8004300:	e008      	b.n	8004314 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004306:	61bb      	str	r3, [r7, #24]
        break;
 8004308:	e004      	b.n	8004314 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	77bb      	strb	r3, [r7, #30]
        break;
 8004312:	bf00      	nop
    }

    if (pclk != 0U)
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d018      	beq.n	800434c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	085a      	lsrs	r2, r3, #1
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	441a      	add	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	fbb2 f3f3 	udiv	r3, r2, r3
 800432c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	2b0f      	cmp	r3, #15
 8004332:	d909      	bls.n	8004348 <UART_SetConfig+0x49c>
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433a:	d205      	bcs.n	8004348 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	b29a      	uxth	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60da      	str	r2, [r3, #12]
 8004346:	e001      	b.n	800434c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004358:	7fbb      	ldrb	r3, [r7, #30]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3720      	adds	r7, #32
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	40007c00 	.word	0x40007c00
 8004368:	40023800 	.word	0x40023800
 800436c:	00f42400 	.word	0x00f42400

08004370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	f003 0308 	and.w	r3, r3, #8
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	f003 0320 	and.w	r3, r3, #32
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01a      	beq.n	8004486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800446e:	d10a      	bne.n	8004486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	605a      	str	r2, [r3, #4]
  }
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044c4:	f7fc fe84 	bl	80011d0 <HAL_GetTick>
 80044c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d10e      	bne.n	80044f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f82d 	bl	8004546 <UART_WaitOnFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e023      	b.n	800453e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b04      	cmp	r3, #4
 8004502:	d10e      	bne.n	8004522 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f817 	bl	8004546 <UART_WaitOnFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e00d      	b.n	800453e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b09c      	sub	sp, #112	; 0x70
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004556:	e0a5      	b.n	80046a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800455a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455e:	f000 80a1 	beq.w	80046a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004562:	f7fc fe35 	bl	80011d0 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800456e:	429a      	cmp	r2, r3
 8004570:	d302      	bcc.n	8004578 <UART_WaitOnFlagUntilTimeout+0x32>
 8004572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004574:	2b00      	cmp	r3, #0
 8004576:	d13e      	bne.n	80045f6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004580:	e853 3f00 	ldrex	r3, [r3]
 8004584:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004588:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800458c:	667b      	str	r3, [r7, #100]	; 0x64
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004598:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800459c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1e6      	bne.n	8004578 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	3308      	adds	r3, #8
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045bc:	f023 0301 	bic.w	r3, r3, #1
 80045c0:	663b      	str	r3, [r7, #96]	; 0x60
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3308      	adds	r3, #8
 80045c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80045cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045d2:	e841 2300 	strex	r3, r2, [r1]
 80045d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1e5      	bne.n	80045aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e067      	b.n	80046c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d04f      	beq.n	80046a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004612:	d147      	bne.n	80046a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800461c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004632:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463c:	637b      	str	r3, [r7, #52]	; 0x34
 800463e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e6      	bne.n	800461e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3308      	adds	r3, #8
 8004656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	613b      	str	r3, [r7, #16]
   return(result);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	66bb      	str	r3, [r7, #104]	; 0x68
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3308      	adds	r3, #8
 800466e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004670:	623a      	str	r2, [r7, #32]
 8004672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	69f9      	ldr	r1, [r7, #28]
 8004676:	6a3a      	ldr	r2, [r7, #32]
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	61bb      	str	r3, [r7, #24]
   return(result);
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e5      	bne.n	8004650 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2220      	movs	r2, #32
 800468e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2220      	movs	r2, #32
 8004694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e010      	b.n	80046c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	69da      	ldr	r2, [r3, #28]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4013      	ands	r3, r2
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	bf0c      	ite	eq
 80046b4:	2301      	moveq	r3, #1
 80046b6:	2300      	movne	r3, #0
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	79fb      	ldrb	r3, [r7, #7]
 80046be:	429a      	cmp	r2, r3
 80046c0:	f43f af4a 	beq.w	8004558 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3770      	adds	r7, #112	; 0x70
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046d0:	b084      	sub	sp, #16
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	f107 001c 	add.w	r0, r7, #28
 80046de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d120      	bne.n	800472a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	4b20      	ldr	r3, [pc, #128]	; (800477c <USB_CoreInit+0xac>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800470c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470e:	2b01      	cmp	r3, #1
 8004710:	d105      	bne.n	800471e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fa92 	bl	8004c48 <USB_CoreReset>
 8004724:	4603      	mov	r3, r0
 8004726:	73fb      	strb	r3, [r7, #15]
 8004728:	e010      	b.n	800474c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fa86 	bl	8004c48 <USB_CoreReset>
 800473c:	4603      	mov	r3, r0
 800473e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	2b01      	cmp	r3, #1
 8004750:	d10b      	bne.n	800476a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f043 0206 	orr.w	r2, r3, #6
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f043 0220 	orr.w	r2, r3, #32
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800476a:	7bfb      	ldrb	r3, [r7, #15]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004776:	b004      	add	sp, #16
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	ffbdffbf 	.word	0xffbdffbf

08004780 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f023 0201 	bic.w	r2, r3, #1
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	460b      	mov	r3, r1
 80047ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d115      	bne.n	80047f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047d0:	2001      	movs	r0, #1
 80047d2:	f7fc fd09 	bl	80011e8 <HAL_Delay>
      ms++;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3301      	adds	r3, #1
 80047da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fa25 	bl	8004c2c <USB_GetMode>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d01e      	beq.n	8004826 <USB_SetCurrentMode+0x84>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b31      	cmp	r3, #49	; 0x31
 80047ec:	d9f0      	bls.n	80047d0 <USB_SetCurrentMode+0x2e>
 80047ee:	e01a      	b.n	8004826 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d115      	bne.n	8004822 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004802:	2001      	movs	r0, #1
 8004804:	f7fc fcf0 	bl	80011e8 <HAL_Delay>
      ms++;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3301      	adds	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fa0c 	bl	8004c2c <USB_GetMode>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d005      	beq.n	8004826 <USB_SetCurrentMode+0x84>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b31      	cmp	r3, #49	; 0x31
 800481e:	d9f0      	bls.n	8004802 <USB_SetCurrentMode+0x60>
 8004820:	e001      	b.n	8004826 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e005      	b.n	8004832 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2b32      	cmp	r3, #50	; 0x32
 800482a:	d101      	bne.n	8004830 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800483c:	b084      	sub	sp, #16
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800484a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	e009      	b.n	8004870 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	3340      	adds	r3, #64	; 0x40
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	2200      	movs	r2, #0
 8004868:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	3301      	adds	r3, #1
 800486e:	613b      	str	r3, [r7, #16]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	2b0e      	cmp	r3, #14
 8004874:	d9f2      	bls.n	800485c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d11c      	bne.n	80048b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800488a:	f043 0302 	orr.w	r3, r3, #2
 800488e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	e005      	b.n	80048c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048c8:	461a      	mov	r2, r3
 80048ca:	2300      	movs	r3, #0
 80048cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d4:	4619      	mov	r1, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048dc:	461a      	mov	r2, r3
 80048de:	680b      	ldr	r3, [r1, #0]
 80048e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d10c      	bne.n	8004902 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048ee:	2100      	movs	r1, #0
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f961 	bl	8004bb8 <USB_SetDevSpeed>
 80048f6:	e008      	b.n	800490a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048f8:	2101      	movs	r1, #1
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f95c 	bl	8004bb8 <USB_SetDevSpeed>
 8004900:	e003      	b.n	800490a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004902:	2103      	movs	r1, #3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f957 	bl	8004bb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800490a:	2110      	movs	r1, #16
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f8f3 	bl	8004af8 <USB_FlushTxFifo>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f91d 	bl	8004b5c <USB_FlushRxFifo>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004932:	461a      	mov	r2, r3
 8004934:	2300      	movs	r3, #0
 8004936:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800493e:	461a      	mov	r2, r3
 8004940:	2300      	movs	r3, #0
 8004942:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494a:	461a      	mov	r2, r3
 800494c:	2300      	movs	r3, #0
 800494e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004950:	2300      	movs	r3, #0
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	e043      	b.n	80049de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800496c:	d118      	bne.n	80049a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	461a      	mov	r2, r3
 8004982:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	e013      	b.n	80049b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004996:	461a      	mov	r2, r3
 8004998:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e008      	b.n	80049b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ac:	461a      	mov	r2, r3
 80049ae:	2300      	movs	r3, #0
 80049b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049be:	461a      	mov	r2, r3
 80049c0:	2300      	movs	r3, #0
 80049c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d0:	461a      	mov	r2, r3
 80049d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	3301      	adds	r3, #1
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d3b7      	bcc.n	8004956 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049e6:	2300      	movs	r3, #0
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	e043      	b.n	8004a74 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a02:	d118      	bne.n	8004a36 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a16:	461a      	mov	r2, r3
 8004a18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e013      	b.n	8004a48 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	e008      	b.n	8004a48 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	461a      	mov	r2, r3
 8004a44:	2300      	movs	r3, #0
 8004a46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a54:	461a      	mov	r2, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	015a      	lsls	r2, r3, #5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a66:	461a      	mov	r2, r3
 8004a68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	3301      	adds	r3, #1
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d3b7      	bcc.n	80049ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	f043 0210 	orr.w	r2, r3, #16
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <USB_DevInit+0x2b4>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f043 0208 	orr.w	r2, r3, #8
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d105      	bne.n	8004ae0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699a      	ldr	r2, [r3, #24]
 8004ad8:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <USB_DevInit+0x2b8>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aec:	b004      	add	sp, #16
 8004aee:	4770      	bx	lr
 8004af0:	803c3800 	.word	0x803c3800
 8004af4:	40000004 	.word	0x40000004

08004af8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3301      	adds	r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	4a12      	ldr	r2, [pc, #72]	; (8004b58 <USB_FlushTxFifo+0x60>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e01a      	b.n	8004b4c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	daf3      	bge.n	8004b06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	019b      	lsls	r3, r3, #6
 8004b26:	f043 0220 	orr.w	r2, r3, #32
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3301      	adds	r3, #1
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <USB_FlushTxFifo+0x60>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e006      	b.n	8004b4c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	d0f1      	beq.n	8004b2e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	00030d40 	.word	0x00030d40

08004b5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	4a11      	ldr	r2, [pc, #68]	; (8004bb4 <USB_FlushRxFifo+0x58>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d901      	bls.n	8004b78 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e017      	b.n	8004ba8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	daf3      	bge.n	8004b68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2210      	movs	r2, #16
 8004b88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <USB_FlushRxFifo+0x58>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e006      	b.n	8004ba8 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d0f1      	beq.n	8004b8a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	00030d40 	.word	0x00030d40

08004bb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	68f9      	ldr	r1, [r7, #12]
 8004bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b085      	sub	sp, #20
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c04:	f023 0303 	bic.w	r3, r3, #3
 8004c08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c18:	f043 0302 	orr.w	r3, r3, #2
 8004c1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0301 	and.w	r3, r3, #1
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	3301      	adds	r3, #1
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <USB_CoreReset+0x60>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d901      	bls.n	8004c64 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e01a      	b.n	8004c9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	daf3      	bge.n	8004c54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f043 0201 	orr.w	r2, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <USB_CoreReset+0x60>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d901      	bls.n	8004c8c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e006      	b.n	8004c9a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d0f1      	beq.n	8004c7c <USB_CoreReset+0x34>

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	00030d40 	.word	0x00030d40

08004cac <__errno>:
 8004cac:	4b01      	ldr	r3, [pc, #4]	; (8004cb4 <__errno+0x8>)
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	2000000c 	.word	0x2000000c

08004cb8 <__libc_init_array>:
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	4d0d      	ldr	r5, [pc, #52]	; (8004cf0 <__libc_init_array+0x38>)
 8004cbc:	4c0d      	ldr	r4, [pc, #52]	; (8004cf4 <__libc_init_array+0x3c>)
 8004cbe:	1b64      	subs	r4, r4, r5
 8004cc0:	10a4      	asrs	r4, r4, #2
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	42a6      	cmp	r6, r4
 8004cc6:	d109      	bne.n	8004cdc <__libc_init_array+0x24>
 8004cc8:	4d0b      	ldr	r5, [pc, #44]	; (8004cf8 <__libc_init_array+0x40>)
 8004cca:	4c0c      	ldr	r4, [pc, #48]	; (8004cfc <__libc_init_array+0x44>)
 8004ccc:	f000 fc4e 	bl	800556c <_init>
 8004cd0:	1b64      	subs	r4, r4, r5
 8004cd2:	10a4      	asrs	r4, r4, #2
 8004cd4:	2600      	movs	r6, #0
 8004cd6:	42a6      	cmp	r6, r4
 8004cd8:	d105      	bne.n	8004ce6 <__libc_init_array+0x2e>
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce0:	4798      	blx	r3
 8004ce2:	3601      	adds	r6, #1
 8004ce4:	e7ee      	b.n	8004cc4 <__libc_init_array+0xc>
 8004ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cea:	4798      	blx	r3
 8004cec:	3601      	adds	r6, #1
 8004cee:	e7f2      	b.n	8004cd6 <__libc_init_array+0x1e>
 8004cf0:	080055e8 	.word	0x080055e8
 8004cf4:	080055e8 	.word	0x080055e8
 8004cf8:	080055e8 	.word	0x080055e8
 8004cfc:	080055ec 	.word	0x080055ec

08004d00 <memset>:
 8004d00:	4402      	add	r2, r0
 8004d02:	4603      	mov	r3, r0
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d100      	bne.n	8004d0a <memset+0xa>
 8004d08:	4770      	bx	lr
 8004d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d0e:	e7f9      	b.n	8004d04 <memset+0x4>

08004d10 <siprintf>:
 8004d10:	b40e      	push	{r1, r2, r3}
 8004d12:	b500      	push	{lr}
 8004d14:	b09c      	sub	sp, #112	; 0x70
 8004d16:	ab1d      	add	r3, sp, #116	; 0x74
 8004d18:	9002      	str	r0, [sp, #8]
 8004d1a:	9006      	str	r0, [sp, #24]
 8004d1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d20:	4809      	ldr	r0, [pc, #36]	; (8004d48 <siprintf+0x38>)
 8004d22:	9107      	str	r1, [sp, #28]
 8004d24:	9104      	str	r1, [sp, #16]
 8004d26:	4909      	ldr	r1, [pc, #36]	; (8004d4c <siprintf+0x3c>)
 8004d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d2c:	9105      	str	r1, [sp, #20]
 8004d2e:	6800      	ldr	r0, [r0, #0]
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	a902      	add	r1, sp, #8
 8004d34:	f000 f868 	bl	8004e08 <_svfiprintf_r>
 8004d38:	9b02      	ldr	r3, [sp, #8]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	b01c      	add	sp, #112	; 0x70
 8004d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d44:	b003      	add	sp, #12
 8004d46:	4770      	bx	lr
 8004d48:	2000000c 	.word	0x2000000c
 8004d4c:	ffff0208 	.word	0xffff0208

08004d50 <__ssputs_r>:
 8004d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d54:	688e      	ldr	r6, [r1, #8]
 8004d56:	429e      	cmp	r6, r3
 8004d58:	4682      	mov	sl, r0
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	4690      	mov	r8, r2
 8004d5e:	461f      	mov	r7, r3
 8004d60:	d838      	bhi.n	8004dd4 <__ssputs_r+0x84>
 8004d62:	898a      	ldrh	r2, [r1, #12]
 8004d64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d68:	d032      	beq.n	8004dd0 <__ssputs_r+0x80>
 8004d6a:	6825      	ldr	r5, [r4, #0]
 8004d6c:	6909      	ldr	r1, [r1, #16]
 8004d6e:	eba5 0901 	sub.w	r9, r5, r1
 8004d72:	6965      	ldr	r5, [r4, #20]
 8004d74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	444b      	add	r3, r9
 8004d80:	106d      	asrs	r5, r5, #1
 8004d82:	429d      	cmp	r5, r3
 8004d84:	bf38      	it	cc
 8004d86:	461d      	movcc	r5, r3
 8004d88:	0553      	lsls	r3, r2, #21
 8004d8a:	d531      	bpl.n	8004df0 <__ssputs_r+0xa0>
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	f000 fb47 	bl	8005420 <_malloc_r>
 8004d92:	4606      	mov	r6, r0
 8004d94:	b950      	cbnz	r0, 8004dac <__ssputs_r+0x5c>
 8004d96:	230c      	movs	r3, #12
 8004d98:	f8ca 3000 	str.w	r3, [sl]
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004da2:	81a3      	strh	r3, [r4, #12]
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dac:	6921      	ldr	r1, [r4, #16]
 8004dae:	464a      	mov	r2, r9
 8004db0:	f000 fabe 	bl	8005330 <memcpy>
 8004db4:	89a3      	ldrh	r3, [r4, #12]
 8004db6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dbe:	81a3      	strh	r3, [r4, #12]
 8004dc0:	6126      	str	r6, [r4, #16]
 8004dc2:	6165      	str	r5, [r4, #20]
 8004dc4:	444e      	add	r6, r9
 8004dc6:	eba5 0509 	sub.w	r5, r5, r9
 8004dca:	6026      	str	r6, [r4, #0]
 8004dcc:	60a5      	str	r5, [r4, #8]
 8004dce:	463e      	mov	r6, r7
 8004dd0:	42be      	cmp	r6, r7
 8004dd2:	d900      	bls.n	8004dd6 <__ssputs_r+0x86>
 8004dd4:	463e      	mov	r6, r7
 8004dd6:	4632      	mov	r2, r6
 8004dd8:	6820      	ldr	r0, [r4, #0]
 8004dda:	4641      	mov	r1, r8
 8004ddc:	f000 fab6 	bl	800534c <memmove>
 8004de0:	68a3      	ldr	r3, [r4, #8]
 8004de2:	6822      	ldr	r2, [r4, #0]
 8004de4:	1b9b      	subs	r3, r3, r6
 8004de6:	4432      	add	r2, r6
 8004de8:	60a3      	str	r3, [r4, #8]
 8004dea:	6022      	str	r2, [r4, #0]
 8004dec:	2000      	movs	r0, #0
 8004dee:	e7db      	b.n	8004da8 <__ssputs_r+0x58>
 8004df0:	462a      	mov	r2, r5
 8004df2:	f000 fb6f 	bl	80054d4 <_realloc_r>
 8004df6:	4606      	mov	r6, r0
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d1e1      	bne.n	8004dc0 <__ssputs_r+0x70>
 8004dfc:	6921      	ldr	r1, [r4, #16]
 8004dfe:	4650      	mov	r0, sl
 8004e00:	f000 fabe 	bl	8005380 <_free_r>
 8004e04:	e7c7      	b.n	8004d96 <__ssputs_r+0x46>
	...

08004e08 <_svfiprintf_r>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	4698      	mov	r8, r3
 8004e0e:	898b      	ldrh	r3, [r1, #12]
 8004e10:	061b      	lsls	r3, r3, #24
 8004e12:	b09d      	sub	sp, #116	; 0x74
 8004e14:	4607      	mov	r7, r0
 8004e16:	460d      	mov	r5, r1
 8004e18:	4614      	mov	r4, r2
 8004e1a:	d50e      	bpl.n	8004e3a <_svfiprintf_r+0x32>
 8004e1c:	690b      	ldr	r3, [r1, #16]
 8004e1e:	b963      	cbnz	r3, 8004e3a <_svfiprintf_r+0x32>
 8004e20:	2140      	movs	r1, #64	; 0x40
 8004e22:	f000 fafd 	bl	8005420 <_malloc_r>
 8004e26:	6028      	str	r0, [r5, #0]
 8004e28:	6128      	str	r0, [r5, #16]
 8004e2a:	b920      	cbnz	r0, 8004e36 <_svfiprintf_r+0x2e>
 8004e2c:	230c      	movs	r3, #12
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295
 8004e34:	e0d1      	b.n	8004fda <_svfiprintf_r+0x1d2>
 8004e36:	2340      	movs	r3, #64	; 0x40
 8004e38:	616b      	str	r3, [r5, #20]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e3e:	2320      	movs	r3, #32
 8004e40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e44:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e48:	2330      	movs	r3, #48	; 0x30
 8004e4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ff4 <_svfiprintf_r+0x1ec>
 8004e4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e52:	f04f 0901 	mov.w	r9, #1
 8004e56:	4623      	mov	r3, r4
 8004e58:	469a      	mov	sl, r3
 8004e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e5e:	b10a      	cbz	r2, 8004e64 <_svfiprintf_r+0x5c>
 8004e60:	2a25      	cmp	r2, #37	; 0x25
 8004e62:	d1f9      	bne.n	8004e58 <_svfiprintf_r+0x50>
 8004e64:	ebba 0b04 	subs.w	fp, sl, r4
 8004e68:	d00b      	beq.n	8004e82 <_svfiprintf_r+0x7a>
 8004e6a:	465b      	mov	r3, fp
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4638      	mov	r0, r7
 8004e72:	f7ff ff6d 	bl	8004d50 <__ssputs_r>
 8004e76:	3001      	adds	r0, #1
 8004e78:	f000 80aa 	beq.w	8004fd0 <_svfiprintf_r+0x1c8>
 8004e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e7e:	445a      	add	r2, fp
 8004e80:	9209      	str	r2, [sp, #36]	; 0x24
 8004e82:	f89a 3000 	ldrb.w	r3, [sl]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80a2 	beq.w	8004fd0 <_svfiprintf_r+0x1c8>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e96:	f10a 0a01 	add.w	sl, sl, #1
 8004e9a:	9304      	str	r3, [sp, #16]
 8004e9c:	9307      	str	r3, [sp, #28]
 8004e9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ea2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ea4:	4654      	mov	r4, sl
 8004ea6:	2205      	movs	r2, #5
 8004ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eac:	4851      	ldr	r0, [pc, #324]	; (8004ff4 <_svfiprintf_r+0x1ec>)
 8004eae:	f7fb f9c7 	bl	8000240 <memchr>
 8004eb2:	9a04      	ldr	r2, [sp, #16]
 8004eb4:	b9d8      	cbnz	r0, 8004eee <_svfiprintf_r+0xe6>
 8004eb6:	06d0      	lsls	r0, r2, #27
 8004eb8:	bf44      	itt	mi
 8004eba:	2320      	movmi	r3, #32
 8004ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ec0:	0711      	lsls	r1, r2, #28
 8004ec2:	bf44      	itt	mi
 8004ec4:	232b      	movmi	r3, #43	; 0x2b
 8004ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eca:	f89a 3000 	ldrb.w	r3, [sl]
 8004ece:	2b2a      	cmp	r3, #42	; 0x2a
 8004ed0:	d015      	beq.n	8004efe <_svfiprintf_r+0xf6>
 8004ed2:	9a07      	ldr	r2, [sp, #28]
 8004ed4:	4654      	mov	r4, sl
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f04f 0c0a 	mov.w	ip, #10
 8004edc:	4621      	mov	r1, r4
 8004ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ee2:	3b30      	subs	r3, #48	; 0x30
 8004ee4:	2b09      	cmp	r3, #9
 8004ee6:	d94e      	bls.n	8004f86 <_svfiprintf_r+0x17e>
 8004ee8:	b1b0      	cbz	r0, 8004f18 <_svfiprintf_r+0x110>
 8004eea:	9207      	str	r2, [sp, #28]
 8004eec:	e014      	b.n	8004f18 <_svfiprintf_r+0x110>
 8004eee:	eba0 0308 	sub.w	r3, r0, r8
 8004ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	9304      	str	r3, [sp, #16]
 8004efa:	46a2      	mov	sl, r4
 8004efc:	e7d2      	b.n	8004ea4 <_svfiprintf_r+0x9c>
 8004efe:	9b03      	ldr	r3, [sp, #12]
 8004f00:	1d19      	adds	r1, r3, #4
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	9103      	str	r1, [sp, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bfbb      	ittet	lt
 8004f0a:	425b      	neglt	r3, r3
 8004f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f10:	9307      	strge	r3, [sp, #28]
 8004f12:	9307      	strlt	r3, [sp, #28]
 8004f14:	bfb8      	it	lt
 8004f16:	9204      	strlt	r2, [sp, #16]
 8004f18:	7823      	ldrb	r3, [r4, #0]
 8004f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f1c:	d10c      	bne.n	8004f38 <_svfiprintf_r+0x130>
 8004f1e:	7863      	ldrb	r3, [r4, #1]
 8004f20:	2b2a      	cmp	r3, #42	; 0x2a
 8004f22:	d135      	bne.n	8004f90 <_svfiprintf_r+0x188>
 8004f24:	9b03      	ldr	r3, [sp, #12]
 8004f26:	1d1a      	adds	r2, r3, #4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	9203      	str	r2, [sp, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bfb8      	it	lt
 8004f30:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f34:	3402      	adds	r4, #2
 8004f36:	9305      	str	r3, [sp, #20]
 8004f38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005004 <_svfiprintf_r+0x1fc>
 8004f3c:	7821      	ldrb	r1, [r4, #0]
 8004f3e:	2203      	movs	r2, #3
 8004f40:	4650      	mov	r0, sl
 8004f42:	f7fb f97d 	bl	8000240 <memchr>
 8004f46:	b140      	cbz	r0, 8004f5a <_svfiprintf_r+0x152>
 8004f48:	2340      	movs	r3, #64	; 0x40
 8004f4a:	eba0 000a 	sub.w	r0, r0, sl
 8004f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8004f52:	9b04      	ldr	r3, [sp, #16]
 8004f54:	4303      	orrs	r3, r0
 8004f56:	3401      	adds	r4, #1
 8004f58:	9304      	str	r3, [sp, #16]
 8004f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f5e:	4826      	ldr	r0, [pc, #152]	; (8004ff8 <_svfiprintf_r+0x1f0>)
 8004f60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f64:	2206      	movs	r2, #6
 8004f66:	f7fb f96b 	bl	8000240 <memchr>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d038      	beq.n	8004fe0 <_svfiprintf_r+0x1d8>
 8004f6e:	4b23      	ldr	r3, [pc, #140]	; (8004ffc <_svfiprintf_r+0x1f4>)
 8004f70:	bb1b      	cbnz	r3, 8004fba <_svfiprintf_r+0x1b2>
 8004f72:	9b03      	ldr	r3, [sp, #12]
 8004f74:	3307      	adds	r3, #7
 8004f76:	f023 0307 	bic.w	r3, r3, #7
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	9303      	str	r3, [sp, #12]
 8004f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f80:	4433      	add	r3, r6
 8004f82:	9309      	str	r3, [sp, #36]	; 0x24
 8004f84:	e767      	b.n	8004e56 <_svfiprintf_r+0x4e>
 8004f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	e7a5      	b.n	8004edc <_svfiprintf_r+0xd4>
 8004f90:	2300      	movs	r3, #0
 8004f92:	3401      	adds	r4, #1
 8004f94:	9305      	str	r3, [sp, #20]
 8004f96:	4619      	mov	r1, r3
 8004f98:	f04f 0c0a 	mov.w	ip, #10
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fa2:	3a30      	subs	r2, #48	; 0x30
 8004fa4:	2a09      	cmp	r2, #9
 8004fa6:	d903      	bls.n	8004fb0 <_svfiprintf_r+0x1a8>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0c5      	beq.n	8004f38 <_svfiprintf_r+0x130>
 8004fac:	9105      	str	r1, [sp, #20]
 8004fae:	e7c3      	b.n	8004f38 <_svfiprintf_r+0x130>
 8004fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e7f0      	b.n	8004f9c <_svfiprintf_r+0x194>
 8004fba:	ab03      	add	r3, sp, #12
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	462a      	mov	r2, r5
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <_svfiprintf_r+0x1f8>)
 8004fc2:	a904      	add	r1, sp, #16
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	f3af 8000 	nop.w
 8004fca:	1c42      	adds	r2, r0, #1
 8004fcc:	4606      	mov	r6, r0
 8004fce:	d1d6      	bne.n	8004f7e <_svfiprintf_r+0x176>
 8004fd0:	89ab      	ldrh	r3, [r5, #12]
 8004fd2:	065b      	lsls	r3, r3, #25
 8004fd4:	f53f af2c 	bmi.w	8004e30 <_svfiprintf_r+0x28>
 8004fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fda:	b01d      	add	sp, #116	; 0x74
 8004fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe0:	ab03      	add	r3, sp, #12
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	462a      	mov	r2, r5
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <_svfiprintf_r+0x1f8>)
 8004fe8:	a904      	add	r1, sp, #16
 8004fea:	4638      	mov	r0, r7
 8004fec:	f000 f87a 	bl	80050e4 <_printf_i>
 8004ff0:	e7eb      	b.n	8004fca <_svfiprintf_r+0x1c2>
 8004ff2:	bf00      	nop
 8004ff4:	080055ac 	.word	0x080055ac
 8004ff8:	080055b6 	.word	0x080055b6
 8004ffc:	00000000 	.word	0x00000000
 8005000:	08004d51 	.word	0x08004d51
 8005004:	080055b2 	.word	0x080055b2

08005008 <_printf_common>:
 8005008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	4616      	mov	r6, r2
 800500e:	4699      	mov	r9, r3
 8005010:	688a      	ldr	r2, [r1, #8]
 8005012:	690b      	ldr	r3, [r1, #16]
 8005014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005018:	4293      	cmp	r3, r2
 800501a:	bfb8      	it	lt
 800501c:	4613      	movlt	r3, r2
 800501e:	6033      	str	r3, [r6, #0]
 8005020:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005024:	4607      	mov	r7, r0
 8005026:	460c      	mov	r4, r1
 8005028:	b10a      	cbz	r2, 800502e <_printf_common+0x26>
 800502a:	3301      	adds	r3, #1
 800502c:	6033      	str	r3, [r6, #0]
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	0699      	lsls	r1, r3, #26
 8005032:	bf42      	ittt	mi
 8005034:	6833      	ldrmi	r3, [r6, #0]
 8005036:	3302      	addmi	r3, #2
 8005038:	6033      	strmi	r3, [r6, #0]
 800503a:	6825      	ldr	r5, [r4, #0]
 800503c:	f015 0506 	ands.w	r5, r5, #6
 8005040:	d106      	bne.n	8005050 <_printf_common+0x48>
 8005042:	f104 0a19 	add.w	sl, r4, #25
 8005046:	68e3      	ldr	r3, [r4, #12]
 8005048:	6832      	ldr	r2, [r6, #0]
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	42ab      	cmp	r3, r5
 800504e:	dc26      	bgt.n	800509e <_printf_common+0x96>
 8005050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005054:	1e13      	subs	r3, r2, #0
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	bf18      	it	ne
 800505a:	2301      	movne	r3, #1
 800505c:	0692      	lsls	r2, r2, #26
 800505e:	d42b      	bmi.n	80050b8 <_printf_common+0xb0>
 8005060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005064:	4649      	mov	r1, r9
 8005066:	4638      	mov	r0, r7
 8005068:	47c0      	blx	r8
 800506a:	3001      	adds	r0, #1
 800506c:	d01e      	beq.n	80050ac <_printf_common+0xa4>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	68e5      	ldr	r5, [r4, #12]
 8005072:	6832      	ldr	r2, [r6, #0]
 8005074:	f003 0306 	and.w	r3, r3, #6
 8005078:	2b04      	cmp	r3, #4
 800507a:	bf08      	it	eq
 800507c:	1aad      	subeq	r5, r5, r2
 800507e:	68a3      	ldr	r3, [r4, #8]
 8005080:	6922      	ldr	r2, [r4, #16]
 8005082:	bf0c      	ite	eq
 8005084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005088:	2500      	movne	r5, #0
 800508a:	4293      	cmp	r3, r2
 800508c:	bfc4      	itt	gt
 800508e:	1a9b      	subgt	r3, r3, r2
 8005090:	18ed      	addgt	r5, r5, r3
 8005092:	2600      	movs	r6, #0
 8005094:	341a      	adds	r4, #26
 8005096:	42b5      	cmp	r5, r6
 8005098:	d11a      	bne.n	80050d0 <_printf_common+0xc8>
 800509a:	2000      	movs	r0, #0
 800509c:	e008      	b.n	80050b0 <_printf_common+0xa8>
 800509e:	2301      	movs	r3, #1
 80050a0:	4652      	mov	r2, sl
 80050a2:	4649      	mov	r1, r9
 80050a4:	4638      	mov	r0, r7
 80050a6:	47c0      	blx	r8
 80050a8:	3001      	adds	r0, #1
 80050aa:	d103      	bne.n	80050b4 <_printf_common+0xac>
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b4:	3501      	adds	r5, #1
 80050b6:	e7c6      	b.n	8005046 <_printf_common+0x3e>
 80050b8:	18e1      	adds	r1, r4, r3
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	2030      	movs	r0, #48	; 0x30
 80050be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050c2:	4422      	add	r2, r4
 80050c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050cc:	3302      	adds	r3, #2
 80050ce:	e7c7      	b.n	8005060 <_printf_common+0x58>
 80050d0:	2301      	movs	r3, #1
 80050d2:	4622      	mov	r2, r4
 80050d4:	4649      	mov	r1, r9
 80050d6:	4638      	mov	r0, r7
 80050d8:	47c0      	blx	r8
 80050da:	3001      	adds	r0, #1
 80050dc:	d0e6      	beq.n	80050ac <_printf_common+0xa4>
 80050de:	3601      	adds	r6, #1
 80050e0:	e7d9      	b.n	8005096 <_printf_common+0x8e>
	...

080050e4 <_printf_i>:
 80050e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	460c      	mov	r4, r1
 80050ea:	4691      	mov	r9, r2
 80050ec:	7e27      	ldrb	r7, [r4, #24]
 80050ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80050f0:	2f78      	cmp	r7, #120	; 0x78
 80050f2:	4680      	mov	r8, r0
 80050f4:	469a      	mov	sl, r3
 80050f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050fa:	d807      	bhi.n	800510c <_printf_i+0x28>
 80050fc:	2f62      	cmp	r7, #98	; 0x62
 80050fe:	d80a      	bhi.n	8005116 <_printf_i+0x32>
 8005100:	2f00      	cmp	r7, #0
 8005102:	f000 80d8 	beq.w	80052b6 <_printf_i+0x1d2>
 8005106:	2f58      	cmp	r7, #88	; 0x58
 8005108:	f000 80a3 	beq.w	8005252 <_printf_i+0x16e>
 800510c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005114:	e03a      	b.n	800518c <_printf_i+0xa8>
 8005116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800511a:	2b15      	cmp	r3, #21
 800511c:	d8f6      	bhi.n	800510c <_printf_i+0x28>
 800511e:	a001      	add	r0, pc, #4	; (adr r0, 8005124 <_printf_i+0x40>)
 8005120:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005124:	0800517d 	.word	0x0800517d
 8005128:	08005191 	.word	0x08005191
 800512c:	0800510d 	.word	0x0800510d
 8005130:	0800510d 	.word	0x0800510d
 8005134:	0800510d 	.word	0x0800510d
 8005138:	0800510d 	.word	0x0800510d
 800513c:	08005191 	.word	0x08005191
 8005140:	0800510d 	.word	0x0800510d
 8005144:	0800510d 	.word	0x0800510d
 8005148:	0800510d 	.word	0x0800510d
 800514c:	0800510d 	.word	0x0800510d
 8005150:	0800529d 	.word	0x0800529d
 8005154:	080051c1 	.word	0x080051c1
 8005158:	0800527f 	.word	0x0800527f
 800515c:	0800510d 	.word	0x0800510d
 8005160:	0800510d 	.word	0x0800510d
 8005164:	080052bf 	.word	0x080052bf
 8005168:	0800510d 	.word	0x0800510d
 800516c:	080051c1 	.word	0x080051c1
 8005170:	0800510d 	.word	0x0800510d
 8005174:	0800510d 	.word	0x0800510d
 8005178:	08005287 	.word	0x08005287
 800517c:	680b      	ldr	r3, [r1, #0]
 800517e:	1d1a      	adds	r2, r3, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	600a      	str	r2, [r1, #0]
 8005184:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800518c:	2301      	movs	r3, #1
 800518e:	e0a3      	b.n	80052d8 <_printf_i+0x1f4>
 8005190:	6825      	ldr	r5, [r4, #0]
 8005192:	6808      	ldr	r0, [r1, #0]
 8005194:	062e      	lsls	r6, r5, #24
 8005196:	f100 0304 	add.w	r3, r0, #4
 800519a:	d50a      	bpl.n	80051b2 <_printf_i+0xce>
 800519c:	6805      	ldr	r5, [r0, #0]
 800519e:	600b      	str	r3, [r1, #0]
 80051a0:	2d00      	cmp	r5, #0
 80051a2:	da03      	bge.n	80051ac <_printf_i+0xc8>
 80051a4:	232d      	movs	r3, #45	; 0x2d
 80051a6:	426d      	negs	r5, r5
 80051a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ac:	485e      	ldr	r0, [pc, #376]	; (8005328 <_printf_i+0x244>)
 80051ae:	230a      	movs	r3, #10
 80051b0:	e019      	b.n	80051e6 <_printf_i+0x102>
 80051b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051b6:	6805      	ldr	r5, [r0, #0]
 80051b8:	600b      	str	r3, [r1, #0]
 80051ba:	bf18      	it	ne
 80051bc:	b22d      	sxthne	r5, r5
 80051be:	e7ef      	b.n	80051a0 <_printf_i+0xbc>
 80051c0:	680b      	ldr	r3, [r1, #0]
 80051c2:	6825      	ldr	r5, [r4, #0]
 80051c4:	1d18      	adds	r0, r3, #4
 80051c6:	6008      	str	r0, [r1, #0]
 80051c8:	0628      	lsls	r0, r5, #24
 80051ca:	d501      	bpl.n	80051d0 <_printf_i+0xec>
 80051cc:	681d      	ldr	r5, [r3, #0]
 80051ce:	e002      	b.n	80051d6 <_printf_i+0xf2>
 80051d0:	0669      	lsls	r1, r5, #25
 80051d2:	d5fb      	bpl.n	80051cc <_printf_i+0xe8>
 80051d4:	881d      	ldrh	r5, [r3, #0]
 80051d6:	4854      	ldr	r0, [pc, #336]	; (8005328 <_printf_i+0x244>)
 80051d8:	2f6f      	cmp	r7, #111	; 0x6f
 80051da:	bf0c      	ite	eq
 80051dc:	2308      	moveq	r3, #8
 80051de:	230a      	movne	r3, #10
 80051e0:	2100      	movs	r1, #0
 80051e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051e6:	6866      	ldr	r6, [r4, #4]
 80051e8:	60a6      	str	r6, [r4, #8]
 80051ea:	2e00      	cmp	r6, #0
 80051ec:	bfa2      	ittt	ge
 80051ee:	6821      	ldrge	r1, [r4, #0]
 80051f0:	f021 0104 	bicge.w	r1, r1, #4
 80051f4:	6021      	strge	r1, [r4, #0]
 80051f6:	b90d      	cbnz	r5, 80051fc <_printf_i+0x118>
 80051f8:	2e00      	cmp	r6, #0
 80051fa:	d04d      	beq.n	8005298 <_printf_i+0x1b4>
 80051fc:	4616      	mov	r6, r2
 80051fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005202:	fb03 5711 	mls	r7, r3, r1, r5
 8005206:	5dc7      	ldrb	r7, [r0, r7]
 8005208:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800520c:	462f      	mov	r7, r5
 800520e:	42bb      	cmp	r3, r7
 8005210:	460d      	mov	r5, r1
 8005212:	d9f4      	bls.n	80051fe <_printf_i+0x11a>
 8005214:	2b08      	cmp	r3, #8
 8005216:	d10b      	bne.n	8005230 <_printf_i+0x14c>
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	07df      	lsls	r7, r3, #31
 800521c:	d508      	bpl.n	8005230 <_printf_i+0x14c>
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	6861      	ldr	r1, [r4, #4]
 8005222:	4299      	cmp	r1, r3
 8005224:	bfde      	ittt	le
 8005226:	2330      	movle	r3, #48	; 0x30
 8005228:	f806 3c01 	strble.w	r3, [r6, #-1]
 800522c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005230:	1b92      	subs	r2, r2, r6
 8005232:	6122      	str	r2, [r4, #16]
 8005234:	f8cd a000 	str.w	sl, [sp]
 8005238:	464b      	mov	r3, r9
 800523a:	aa03      	add	r2, sp, #12
 800523c:	4621      	mov	r1, r4
 800523e:	4640      	mov	r0, r8
 8005240:	f7ff fee2 	bl	8005008 <_printf_common>
 8005244:	3001      	adds	r0, #1
 8005246:	d14c      	bne.n	80052e2 <_printf_i+0x1fe>
 8005248:	f04f 30ff 	mov.w	r0, #4294967295
 800524c:	b004      	add	sp, #16
 800524e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005252:	4835      	ldr	r0, [pc, #212]	; (8005328 <_printf_i+0x244>)
 8005254:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	680e      	ldr	r6, [r1, #0]
 800525c:	061f      	lsls	r7, r3, #24
 800525e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005262:	600e      	str	r6, [r1, #0]
 8005264:	d514      	bpl.n	8005290 <_printf_i+0x1ac>
 8005266:	07d9      	lsls	r1, r3, #31
 8005268:	bf44      	itt	mi
 800526a:	f043 0320 	orrmi.w	r3, r3, #32
 800526e:	6023      	strmi	r3, [r4, #0]
 8005270:	b91d      	cbnz	r5, 800527a <_printf_i+0x196>
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	f023 0320 	bic.w	r3, r3, #32
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	2310      	movs	r3, #16
 800527c:	e7b0      	b.n	80051e0 <_printf_i+0xfc>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	f043 0320 	orr.w	r3, r3, #32
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	2378      	movs	r3, #120	; 0x78
 8005288:	4828      	ldr	r0, [pc, #160]	; (800532c <_printf_i+0x248>)
 800528a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800528e:	e7e3      	b.n	8005258 <_printf_i+0x174>
 8005290:	065e      	lsls	r6, r3, #25
 8005292:	bf48      	it	mi
 8005294:	b2ad      	uxthmi	r5, r5
 8005296:	e7e6      	b.n	8005266 <_printf_i+0x182>
 8005298:	4616      	mov	r6, r2
 800529a:	e7bb      	b.n	8005214 <_printf_i+0x130>
 800529c:	680b      	ldr	r3, [r1, #0]
 800529e:	6826      	ldr	r6, [r4, #0]
 80052a0:	6960      	ldr	r0, [r4, #20]
 80052a2:	1d1d      	adds	r5, r3, #4
 80052a4:	600d      	str	r5, [r1, #0]
 80052a6:	0635      	lsls	r5, r6, #24
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	d501      	bpl.n	80052b0 <_printf_i+0x1cc>
 80052ac:	6018      	str	r0, [r3, #0]
 80052ae:	e002      	b.n	80052b6 <_printf_i+0x1d2>
 80052b0:	0671      	lsls	r1, r6, #25
 80052b2:	d5fb      	bpl.n	80052ac <_printf_i+0x1c8>
 80052b4:	8018      	strh	r0, [r3, #0]
 80052b6:	2300      	movs	r3, #0
 80052b8:	6123      	str	r3, [r4, #16]
 80052ba:	4616      	mov	r6, r2
 80052bc:	e7ba      	b.n	8005234 <_printf_i+0x150>
 80052be:	680b      	ldr	r3, [r1, #0]
 80052c0:	1d1a      	adds	r2, r3, #4
 80052c2:	600a      	str	r2, [r1, #0]
 80052c4:	681e      	ldr	r6, [r3, #0]
 80052c6:	6862      	ldr	r2, [r4, #4]
 80052c8:	2100      	movs	r1, #0
 80052ca:	4630      	mov	r0, r6
 80052cc:	f7fa ffb8 	bl	8000240 <memchr>
 80052d0:	b108      	cbz	r0, 80052d6 <_printf_i+0x1f2>
 80052d2:	1b80      	subs	r0, r0, r6
 80052d4:	6060      	str	r0, [r4, #4]
 80052d6:	6863      	ldr	r3, [r4, #4]
 80052d8:	6123      	str	r3, [r4, #16]
 80052da:	2300      	movs	r3, #0
 80052dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e0:	e7a8      	b.n	8005234 <_printf_i+0x150>
 80052e2:	6923      	ldr	r3, [r4, #16]
 80052e4:	4632      	mov	r2, r6
 80052e6:	4649      	mov	r1, r9
 80052e8:	4640      	mov	r0, r8
 80052ea:	47d0      	blx	sl
 80052ec:	3001      	adds	r0, #1
 80052ee:	d0ab      	beq.n	8005248 <_printf_i+0x164>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	079b      	lsls	r3, r3, #30
 80052f4:	d413      	bmi.n	800531e <_printf_i+0x23a>
 80052f6:	68e0      	ldr	r0, [r4, #12]
 80052f8:	9b03      	ldr	r3, [sp, #12]
 80052fa:	4298      	cmp	r0, r3
 80052fc:	bfb8      	it	lt
 80052fe:	4618      	movlt	r0, r3
 8005300:	e7a4      	b.n	800524c <_printf_i+0x168>
 8005302:	2301      	movs	r3, #1
 8005304:	4632      	mov	r2, r6
 8005306:	4649      	mov	r1, r9
 8005308:	4640      	mov	r0, r8
 800530a:	47d0      	blx	sl
 800530c:	3001      	adds	r0, #1
 800530e:	d09b      	beq.n	8005248 <_printf_i+0x164>
 8005310:	3501      	adds	r5, #1
 8005312:	68e3      	ldr	r3, [r4, #12]
 8005314:	9903      	ldr	r1, [sp, #12]
 8005316:	1a5b      	subs	r3, r3, r1
 8005318:	42ab      	cmp	r3, r5
 800531a:	dcf2      	bgt.n	8005302 <_printf_i+0x21e>
 800531c:	e7eb      	b.n	80052f6 <_printf_i+0x212>
 800531e:	2500      	movs	r5, #0
 8005320:	f104 0619 	add.w	r6, r4, #25
 8005324:	e7f5      	b.n	8005312 <_printf_i+0x22e>
 8005326:	bf00      	nop
 8005328:	080055bd 	.word	0x080055bd
 800532c:	080055ce 	.word	0x080055ce

08005330 <memcpy>:
 8005330:	440a      	add	r2, r1
 8005332:	4291      	cmp	r1, r2
 8005334:	f100 33ff 	add.w	r3, r0, #4294967295
 8005338:	d100      	bne.n	800533c <memcpy+0xc>
 800533a:	4770      	bx	lr
 800533c:	b510      	push	{r4, lr}
 800533e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005346:	4291      	cmp	r1, r2
 8005348:	d1f9      	bne.n	800533e <memcpy+0xe>
 800534a:	bd10      	pop	{r4, pc}

0800534c <memmove>:
 800534c:	4288      	cmp	r0, r1
 800534e:	b510      	push	{r4, lr}
 8005350:	eb01 0402 	add.w	r4, r1, r2
 8005354:	d902      	bls.n	800535c <memmove+0x10>
 8005356:	4284      	cmp	r4, r0
 8005358:	4623      	mov	r3, r4
 800535a:	d807      	bhi.n	800536c <memmove+0x20>
 800535c:	1e43      	subs	r3, r0, #1
 800535e:	42a1      	cmp	r1, r4
 8005360:	d008      	beq.n	8005374 <memmove+0x28>
 8005362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800536a:	e7f8      	b.n	800535e <memmove+0x12>
 800536c:	4402      	add	r2, r0
 800536e:	4601      	mov	r1, r0
 8005370:	428a      	cmp	r2, r1
 8005372:	d100      	bne.n	8005376 <memmove+0x2a>
 8005374:	bd10      	pop	{r4, pc}
 8005376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800537a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800537e:	e7f7      	b.n	8005370 <memmove+0x24>

08005380 <_free_r>:
 8005380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005382:	2900      	cmp	r1, #0
 8005384:	d048      	beq.n	8005418 <_free_r+0x98>
 8005386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800538a:	9001      	str	r0, [sp, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f1a1 0404 	sub.w	r4, r1, #4
 8005392:	bfb8      	it	lt
 8005394:	18e4      	addlt	r4, r4, r3
 8005396:	f000 f8d3 	bl	8005540 <__malloc_lock>
 800539a:	4a20      	ldr	r2, [pc, #128]	; (800541c <_free_r+0x9c>)
 800539c:	9801      	ldr	r0, [sp, #4]
 800539e:	6813      	ldr	r3, [r2, #0]
 80053a0:	4615      	mov	r5, r2
 80053a2:	b933      	cbnz	r3, 80053b2 <_free_r+0x32>
 80053a4:	6063      	str	r3, [r4, #4]
 80053a6:	6014      	str	r4, [r2, #0]
 80053a8:	b003      	add	sp, #12
 80053aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053ae:	f000 b8cd 	b.w	800554c <__malloc_unlock>
 80053b2:	42a3      	cmp	r3, r4
 80053b4:	d90b      	bls.n	80053ce <_free_r+0x4e>
 80053b6:	6821      	ldr	r1, [r4, #0]
 80053b8:	1862      	adds	r2, r4, r1
 80053ba:	4293      	cmp	r3, r2
 80053bc:	bf04      	itt	eq
 80053be:	681a      	ldreq	r2, [r3, #0]
 80053c0:	685b      	ldreq	r3, [r3, #4]
 80053c2:	6063      	str	r3, [r4, #4]
 80053c4:	bf04      	itt	eq
 80053c6:	1852      	addeq	r2, r2, r1
 80053c8:	6022      	streq	r2, [r4, #0]
 80053ca:	602c      	str	r4, [r5, #0]
 80053cc:	e7ec      	b.n	80053a8 <_free_r+0x28>
 80053ce:	461a      	mov	r2, r3
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	b10b      	cbz	r3, 80053d8 <_free_r+0x58>
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	d9fa      	bls.n	80053ce <_free_r+0x4e>
 80053d8:	6811      	ldr	r1, [r2, #0]
 80053da:	1855      	adds	r5, r2, r1
 80053dc:	42a5      	cmp	r5, r4
 80053de:	d10b      	bne.n	80053f8 <_free_r+0x78>
 80053e0:	6824      	ldr	r4, [r4, #0]
 80053e2:	4421      	add	r1, r4
 80053e4:	1854      	adds	r4, r2, r1
 80053e6:	42a3      	cmp	r3, r4
 80053e8:	6011      	str	r1, [r2, #0]
 80053ea:	d1dd      	bne.n	80053a8 <_free_r+0x28>
 80053ec:	681c      	ldr	r4, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	6053      	str	r3, [r2, #4]
 80053f2:	4421      	add	r1, r4
 80053f4:	6011      	str	r1, [r2, #0]
 80053f6:	e7d7      	b.n	80053a8 <_free_r+0x28>
 80053f8:	d902      	bls.n	8005400 <_free_r+0x80>
 80053fa:	230c      	movs	r3, #12
 80053fc:	6003      	str	r3, [r0, #0]
 80053fe:	e7d3      	b.n	80053a8 <_free_r+0x28>
 8005400:	6825      	ldr	r5, [r4, #0]
 8005402:	1961      	adds	r1, r4, r5
 8005404:	428b      	cmp	r3, r1
 8005406:	bf04      	itt	eq
 8005408:	6819      	ldreq	r1, [r3, #0]
 800540a:	685b      	ldreq	r3, [r3, #4]
 800540c:	6063      	str	r3, [r4, #4]
 800540e:	bf04      	itt	eq
 8005410:	1949      	addeq	r1, r1, r5
 8005412:	6021      	streq	r1, [r4, #0]
 8005414:	6054      	str	r4, [r2, #4]
 8005416:	e7c7      	b.n	80053a8 <_free_r+0x28>
 8005418:	b003      	add	sp, #12
 800541a:	bd30      	pop	{r4, r5, pc}
 800541c:	20000090 	.word	0x20000090

08005420 <_malloc_r>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	1ccd      	adds	r5, r1, #3
 8005424:	f025 0503 	bic.w	r5, r5, #3
 8005428:	3508      	adds	r5, #8
 800542a:	2d0c      	cmp	r5, #12
 800542c:	bf38      	it	cc
 800542e:	250c      	movcc	r5, #12
 8005430:	2d00      	cmp	r5, #0
 8005432:	4606      	mov	r6, r0
 8005434:	db01      	blt.n	800543a <_malloc_r+0x1a>
 8005436:	42a9      	cmp	r1, r5
 8005438:	d903      	bls.n	8005442 <_malloc_r+0x22>
 800543a:	230c      	movs	r3, #12
 800543c:	6033      	str	r3, [r6, #0]
 800543e:	2000      	movs	r0, #0
 8005440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005442:	f000 f87d 	bl	8005540 <__malloc_lock>
 8005446:	4921      	ldr	r1, [pc, #132]	; (80054cc <_malloc_r+0xac>)
 8005448:	680a      	ldr	r2, [r1, #0]
 800544a:	4614      	mov	r4, r2
 800544c:	b99c      	cbnz	r4, 8005476 <_malloc_r+0x56>
 800544e:	4f20      	ldr	r7, [pc, #128]	; (80054d0 <_malloc_r+0xb0>)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	b923      	cbnz	r3, 800545e <_malloc_r+0x3e>
 8005454:	4621      	mov	r1, r4
 8005456:	4630      	mov	r0, r6
 8005458:	f000 f862 	bl	8005520 <_sbrk_r>
 800545c:	6038      	str	r0, [r7, #0]
 800545e:	4629      	mov	r1, r5
 8005460:	4630      	mov	r0, r6
 8005462:	f000 f85d 	bl	8005520 <_sbrk_r>
 8005466:	1c43      	adds	r3, r0, #1
 8005468:	d123      	bne.n	80054b2 <_malloc_r+0x92>
 800546a:	230c      	movs	r3, #12
 800546c:	6033      	str	r3, [r6, #0]
 800546e:	4630      	mov	r0, r6
 8005470:	f000 f86c 	bl	800554c <__malloc_unlock>
 8005474:	e7e3      	b.n	800543e <_malloc_r+0x1e>
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	1b5b      	subs	r3, r3, r5
 800547a:	d417      	bmi.n	80054ac <_malloc_r+0x8c>
 800547c:	2b0b      	cmp	r3, #11
 800547e:	d903      	bls.n	8005488 <_malloc_r+0x68>
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	441c      	add	r4, r3
 8005484:	6025      	str	r5, [r4, #0]
 8005486:	e004      	b.n	8005492 <_malloc_r+0x72>
 8005488:	6863      	ldr	r3, [r4, #4]
 800548a:	42a2      	cmp	r2, r4
 800548c:	bf0c      	ite	eq
 800548e:	600b      	streq	r3, [r1, #0]
 8005490:	6053      	strne	r3, [r2, #4]
 8005492:	4630      	mov	r0, r6
 8005494:	f000 f85a 	bl	800554c <__malloc_unlock>
 8005498:	f104 000b 	add.w	r0, r4, #11
 800549c:	1d23      	adds	r3, r4, #4
 800549e:	f020 0007 	bic.w	r0, r0, #7
 80054a2:	1ac2      	subs	r2, r0, r3
 80054a4:	d0cc      	beq.n	8005440 <_malloc_r+0x20>
 80054a6:	1a1b      	subs	r3, r3, r0
 80054a8:	50a3      	str	r3, [r4, r2]
 80054aa:	e7c9      	b.n	8005440 <_malloc_r+0x20>
 80054ac:	4622      	mov	r2, r4
 80054ae:	6864      	ldr	r4, [r4, #4]
 80054b0:	e7cc      	b.n	800544c <_malloc_r+0x2c>
 80054b2:	1cc4      	adds	r4, r0, #3
 80054b4:	f024 0403 	bic.w	r4, r4, #3
 80054b8:	42a0      	cmp	r0, r4
 80054ba:	d0e3      	beq.n	8005484 <_malloc_r+0x64>
 80054bc:	1a21      	subs	r1, r4, r0
 80054be:	4630      	mov	r0, r6
 80054c0:	f000 f82e 	bl	8005520 <_sbrk_r>
 80054c4:	3001      	adds	r0, #1
 80054c6:	d1dd      	bne.n	8005484 <_malloc_r+0x64>
 80054c8:	e7cf      	b.n	800546a <_malloc_r+0x4a>
 80054ca:	bf00      	nop
 80054cc:	20000090 	.word	0x20000090
 80054d0:	20000094 	.word	0x20000094

080054d4 <_realloc_r>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	4607      	mov	r7, r0
 80054d8:	4614      	mov	r4, r2
 80054da:	460e      	mov	r6, r1
 80054dc:	b921      	cbnz	r1, 80054e8 <_realloc_r+0x14>
 80054de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80054e2:	4611      	mov	r1, r2
 80054e4:	f7ff bf9c 	b.w	8005420 <_malloc_r>
 80054e8:	b922      	cbnz	r2, 80054f4 <_realloc_r+0x20>
 80054ea:	f7ff ff49 	bl	8005380 <_free_r>
 80054ee:	4625      	mov	r5, r4
 80054f0:	4628      	mov	r0, r5
 80054f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054f4:	f000 f830 	bl	8005558 <_malloc_usable_size_r>
 80054f8:	42a0      	cmp	r0, r4
 80054fa:	d20f      	bcs.n	800551c <_realloc_r+0x48>
 80054fc:	4621      	mov	r1, r4
 80054fe:	4638      	mov	r0, r7
 8005500:	f7ff ff8e 	bl	8005420 <_malloc_r>
 8005504:	4605      	mov	r5, r0
 8005506:	2800      	cmp	r0, #0
 8005508:	d0f2      	beq.n	80054f0 <_realloc_r+0x1c>
 800550a:	4631      	mov	r1, r6
 800550c:	4622      	mov	r2, r4
 800550e:	f7ff ff0f 	bl	8005330 <memcpy>
 8005512:	4631      	mov	r1, r6
 8005514:	4638      	mov	r0, r7
 8005516:	f7ff ff33 	bl	8005380 <_free_r>
 800551a:	e7e9      	b.n	80054f0 <_realloc_r+0x1c>
 800551c:	4635      	mov	r5, r6
 800551e:	e7e7      	b.n	80054f0 <_realloc_r+0x1c>

08005520 <_sbrk_r>:
 8005520:	b538      	push	{r3, r4, r5, lr}
 8005522:	4d06      	ldr	r5, [pc, #24]	; (800553c <_sbrk_r+0x1c>)
 8005524:	2300      	movs	r3, #0
 8005526:	4604      	mov	r4, r0
 8005528:	4608      	mov	r0, r1
 800552a:	602b      	str	r3, [r5, #0]
 800552c:	f7fb fd8e 	bl	800104c <_sbrk>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_sbrk_r+0x1a>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_sbrk_r+0x1a>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	2000064c 	.word	0x2000064c

08005540 <__malloc_lock>:
 8005540:	4801      	ldr	r0, [pc, #4]	; (8005548 <__malloc_lock+0x8>)
 8005542:	f000 b811 	b.w	8005568 <__retarget_lock_acquire_recursive>
 8005546:	bf00      	nop
 8005548:	20000654 	.word	0x20000654

0800554c <__malloc_unlock>:
 800554c:	4801      	ldr	r0, [pc, #4]	; (8005554 <__malloc_unlock+0x8>)
 800554e:	f000 b80c 	b.w	800556a <__retarget_lock_release_recursive>
 8005552:	bf00      	nop
 8005554:	20000654 	.word	0x20000654

08005558 <_malloc_usable_size_r>:
 8005558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800555c:	1f18      	subs	r0, r3, #4
 800555e:	2b00      	cmp	r3, #0
 8005560:	bfbc      	itt	lt
 8005562:	580b      	ldrlt	r3, [r1, r0]
 8005564:	18c0      	addlt	r0, r0, r3
 8005566:	4770      	bx	lr

08005568 <__retarget_lock_acquire_recursive>:
 8005568:	4770      	bx	lr

0800556a <__retarget_lock_release_recursive>:
 800556a:	4770      	bx	lr

0800556c <_init>:
 800556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556e:	bf00      	nop
 8005570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005572:	bc08      	pop	{r3}
 8005574:	469e      	mov	lr, r3
 8005576:	4770      	bx	lr

08005578 <_fini>:
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	bf00      	nop
 800557c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557e:	bc08      	pop	{r3}
 8005580:	469e      	mov	lr, r3
 8005582:	4770      	bx	lr
