
adc_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005d88  08005d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e08  08005e08  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005e08  08005e08  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e08  08005e08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e0c  08005e0c  00015e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000017c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001ec  200001ec  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef56  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002059  00000000  00000000  0002eff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  00031050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000918  00000000  00000000  00031a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020320  00000000  00000000  00032348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e255  00000000  00000000  00052668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7994  00000000  00000000  000608bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00128251  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b74  00000000  00000000  001282a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d70 	.word	0x08005d70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005d70 	.word	0x08005d70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b096      	sub	sp, #88	; 0x58
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fb91 	bl	80009ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f843 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 f961 	bl	8000554 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 f911 	bl	80004b8 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000296:	f000 f93f 	bl	8000518 <MX_DMA_Init>
  MX_ADC1_Init();
 800029a:	f000 f89d 	bl	80003d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t a_res=0;
 800029e:	2300      	movs	r3, #0
 80002a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  char msg[80];
  HAL_ADC_Start_DMA(&hadc1, &intdata, 1);
 80002a4:	2201      	movs	r2, #1
 80002a6:	4916      	ldr	r1, [pc, #88]	; (8000300 <main+0x80>)
 80002a8:	4816      	ldr	r0, [pc, #88]	; (8000304 <main+0x84>)
 80002aa:	f000 fe17 	bl	8000edc <HAL_ADC_Start_DMA>
  HAL_Delay(1000);
 80002ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b2:	f000 fbe1 	bl	8000a78 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  a_res++;
 80002b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80002ba:	3301      	adds	r3, #1
 80002bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80002c0:	2120      	movs	r1, #32
 80002c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c6:	f002 fd5d 	bl	8002d84 <HAL_GPIO_TogglePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 80002ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ce:	f000 fbd3 	bl	8000a78 <HAL_Delay>

	  if (a_res == 20)
 80002d2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80002d6:	2b14      	cmp	r3, #20
 80002d8:	d102      	bne.n	80002e0 <main+0x60>
	  {
	  HAL_ADC_Stop_DMA(&hadc1);
 80002da:	480a      	ldr	r0, [pc, #40]	; (8000304 <main+0x84>)
 80002dc:	f000 ff1a 	bl	8001114 <HAL_ADC_Stop_DMA>
	  }
	  sprintf(msg, "contador:%hu %hu\r\n", a_res, control);
 80002e0:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <main+0x88>)
 80002e6:	881b      	ldrh	r3, [r3, #0]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	1d38      	adds	r0, r7, #4
 80002ec:	4907      	ldr	r1, [pc, #28]	; (800030c <main+0x8c>)
 80002ee:	f005 f911 	bl	8005514 <siprintf>
	  HAL_UART_Transmit(&huart2, msg, 19, 10);
 80002f2:	1d39      	adds	r1, r7, #4
 80002f4:	230a      	movs	r3, #10
 80002f6:	2213      	movs	r2, #19
 80002f8:	4805      	ldr	r0, [pc, #20]	; (8000310 <main+0x90>)
 80002fa:	f004 f915 	bl	8004528 <HAL_UART_Transmit>
  {
 80002fe:	e7da      	b.n	80002b6 <main+0x36>
 8000300:	200001cc 	.word	0x200001cc
 8000304:	200000a4 	.word	0x200000a4
 8000308:	2000008c 	.word	0x2000008c
 800030c:	08005d88 	.word	0x08005d88
 8000310:	20000148 	.word	0x20000148

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b0a6      	sub	sp, #152	; 0x98
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800031e:	2228      	movs	r2, #40	; 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f005 f8ee 	bl	8005504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
 8000336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2258      	movs	r2, #88	; 0x58
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f005 f8e0 	bl	8005504 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000344:	2302      	movs	r3, #2
 8000346:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000348:	2301      	movs	r3, #1
 800034a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800034c:	2310      	movs	r3, #16
 800034e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000352:	2302      	movs	r3, #2
 8000354:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800035c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000360:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000364:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000372:	4618      	mov	r0, r3
 8000374:	f002 fd20 	bl	8002db8 <HAL_RCC_OscConfig>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800037e:	f000 f977 	bl	8000670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000382:	230f      	movs	r3, #15
 8000384:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000386:	2302      	movs	r3, #2
 8000388:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800038e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000392:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000398:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800039e:	2102      	movs	r1, #2
 80003a0:	4618      	mov	r0, r3
 80003a2:	f003 fc1f 	bl	8003be4 <HAL_RCC_ClockConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80003ac:	f000 f960 	bl	8000670 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 80003b0:	2382      	movs	r3, #130	; 0x82
 80003b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003b4:	2300      	movs	r3, #0
 80003b6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV256;
 80003b8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80003bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4618      	mov	r0, r3
 80003c2:	f003 fe45 	bl	8004050 <HAL_RCCEx_PeriphCLKConfig>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80003cc:	f000 f950 	bl	8000670 <Error_Handler>
  }
}
 80003d0:	bf00      	nop
 80003d2:	3798      	adds	r7, #152	; 0x98
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08a      	sub	sp, #40	; 0x28
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003de:	f107 031c 	add.w	r3, r7, #28
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	605a      	str	r2, [r3, #4]
 80003f2:	609a      	str	r2, [r3, #8]
 80003f4:	60da      	str	r2, [r3, #12]
 80003f6:	611a      	str	r2, [r3, #16]
 80003f8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003fa:	4b2e      	ldr	r3, [pc, #184]	; (80004b4 <MX_ADC1_Init+0xdc>)
 80003fc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000400:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000402:	4b2c      	ldr	r3, [pc, #176]	; (80004b4 <MX_ADC1_Init+0xdc>)
 8000404:	2200      	movs	r2, #0
 8000406:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000408:	4b2a      	ldr	r3, [pc, #168]	; (80004b4 <MX_ADC1_Init+0xdc>)
 800040a:	2200      	movs	r2, #0
 800040c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800040e:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <MX_ADC1_Init+0xdc>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000414:	4b27      	ldr	r3, [pc, #156]	; (80004b4 <MX_ADC1_Init+0xdc>)
 8000416:	2201      	movs	r2, #1
 8000418:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800041a:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <MX_ADC1_Init+0xdc>)
 800041c:	2200      	movs	r2, #0
 800041e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000422:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <MX_ADC1_Init+0xdc>)
 8000424:	2200      	movs	r2, #0
 8000426:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000428:	4b22      	ldr	r3, [pc, #136]	; (80004b4 <MX_ADC1_Init+0xdc>)
 800042a:	2201      	movs	r2, #1
 800042c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800042e:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <MX_ADC1_Init+0xdc>)
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000434:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <MX_ADC1_Init+0xdc>)
 8000436:	2201      	movs	r2, #1
 8000438:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800043a:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <MX_ADC1_Init+0xdc>)
 800043c:	2201      	movs	r2, #1
 800043e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000442:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <MX_ADC1_Init+0xdc>)
 8000444:	2204      	movs	r2, #4
 8000446:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000448:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_ADC1_Init+0xdc>)
 800044a:	2200      	movs	r2, #0
 800044c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800044e:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <MX_ADC1_Init+0xdc>)
 8000450:	2200      	movs	r2, #0
 8000452:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000454:	4817      	ldr	r0, [pc, #92]	; (80004b4 <MX_ADC1_Init+0xdc>)
 8000456:	f000 fb47 	bl	8000ae8 <HAL_ADC_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000460:	f000 f906 	bl	8000670 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000464:	2300      	movs	r3, #0
 8000466:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000468:	f107 031c 	add.w	r3, r7, #28
 800046c:	4619      	mov	r1, r3
 800046e:	4811      	ldr	r0, [pc, #68]	; (80004b4 <MX_ADC1_Init+0xdc>)
 8000470:	f001 fcd2 	bl	8001e18 <HAL_ADCEx_MultiModeConfigChannel>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800047a:	f000 f8f9 	bl	8000670 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800047e:	2301      	movs	r3, #1
 8000480:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000482:	2301      	movs	r3, #1
 8000484:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 800048a:	2306      	movs	r3, #6
 800048c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	4619      	mov	r1, r3
 800049a:	4806      	ldr	r0, [pc, #24]	; (80004b4 <MX_ADC1_Init+0xdc>)
 800049c:	f001 f9d0 	bl	8001840 <HAL_ADC_ConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004a6:	f000 f8e3 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	3728      	adds	r7, #40	; 0x28
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	200000a4 	.word	0x200000a4

080004b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004be:	4a15      	ldr	r2, [pc, #84]	; (8000514 <MX_USART2_UART_Init+0x5c>)
 80004c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004c2:	4b13      	ldr	r3, [pc, #76]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004c4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80004c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004d8:	2200      	movs	r2, #0
 80004da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004de:	220c      	movs	r2, #12
 80004e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ee:	4b08      	ldr	r3, [pc, #32]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_USART2_UART_Init+0x58>)
 80004fc:	f003 ffc6 	bl	800448c <HAL_UART_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000506:	f000 f8b3 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000148 	.word	0x20000148
 8000514:	40004400 	.word	0x40004400

08000518 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_DMA_Init+0x38>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <MX_DMA_Init+0x38>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_DMA_Init+0x38>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	2100      	movs	r1, #0
 800053a:	200b      	movs	r0, #11
 800053c:	f002 f81f 	bl	800257e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000540:	200b      	movs	r0, #11
 8000542:	f002 f838 	bl	80025b6 <HAL_NVIC_EnableIRQ>

}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000

08000554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	4b2b      	ldr	r3, [pc, #172]	; (8000618 <MX_GPIO_Init+0xc4>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a2a      	ldr	r2, [pc, #168]	; (8000618 <MX_GPIO_Init+0xc4>)
 8000570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b28      	ldr	r3, [pc, #160]	; (8000618 <MX_GPIO_Init+0xc4>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000582:	4b25      	ldr	r3, [pc, #148]	; (8000618 <MX_GPIO_Init+0xc4>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a24      	ldr	r2, [pc, #144]	; (8000618 <MX_GPIO_Init+0xc4>)
 8000588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800058c:	6153      	str	r3, [r2, #20]
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <MX_GPIO_Init+0xc4>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <MX_GPIO_Init+0xc4>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a1e      	ldr	r2, [pc, #120]	; (8000618 <MX_GPIO_Init+0xc4>)
 80005a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a4:	6153      	str	r3, [r2, #20]
 80005a6:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <MX_GPIO_Init+0xc4>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b19      	ldr	r3, [pc, #100]	; (8000618 <MX_GPIO_Init+0xc4>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a18      	ldr	r2, [pc, #96]	; (8000618 <MX_GPIO_Init+0xc4>)
 80005b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b16      	ldr	r3, [pc, #88]	; (8000618 <MX_GPIO_Init+0xc4>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2120      	movs	r1, #32
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d2:	f002 fbbf 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	480b      	ldr	r0, [pc, #44]	; (800061c <MX_GPIO_Init+0xc8>)
 80005ee:	f002 fa27 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005f2:	2320      	movs	r3, #32
 80005f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2300      	movs	r3, #0
 8000600:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060c:	f002 fa18 	bl	8002a40 <HAL_GPIO_Init>

}
 8000610:	bf00      	nop
 8000612:	3728      	adds	r7, #40	; 0x28
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000
 800061c:	48000800 	.word	0x48000800

08000620 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	control++;
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <HAL_ADC_ConvCpltCallback+0x38>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	b29b      	uxth	r3, r3
 800062e:	3301      	adds	r3, #1
 8000630:	b29a      	uxth	r2, r3
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <HAL_ADC_ConvCpltCallback+0x38>)
 8000634:	801a      	strh	r2, [r3, #0]
	if (control >= 36000)
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_ADC_ConvCpltCallback+0x38>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	b29b      	uxth	r3, r3
 800063c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000640:	4293      	cmp	r3, r2
 8000642:	d902      	bls.n	800064a <HAL_ADC_ConvCpltCallback+0x2a>
		control=0;
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <HAL_ADC_ConvCpltCallback+0x38>)
 8000646:	2200      	movs	r2, #0
 8000648:	801a      	strh	r2, [r3, #0]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	2000008c 	.word	0x2000008c

0800065c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);


}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x8>
	...

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_MspInit+0x44>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <HAL_MspInit+0x44>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_MspInit+0x44>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_MspInit+0x44>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <HAL_MspInit+0x44>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_MspInit+0x44>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006b2:	2007      	movs	r0, #7
 80006b4:	f001 ff58 	bl	8002568 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006e4:	d154      	bne.n	8000790 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <HAL_ADC_MspInit+0xd4>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a2b      	ldr	r2, [pc, #172]	; (8000798 <HAL_ADC_MspInit+0xd4>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <HAL_ADC_MspInit+0xd4>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <HAL_ADC_MspInit+0xd4>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a25      	ldr	r2, [pc, #148]	; (8000798 <HAL_ADC_MspInit+0xd4>)
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <HAL_ADC_MspInit+0xd4>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000716:	2301      	movs	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800071a:	2303      	movs	r3, #3
 800071c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072c:	f002 f988 	bl	8002a40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <HAL_ADC_MspInit+0xd8>)
 8000732:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <HAL_ADC_MspInit+0xdc>)
 8000734:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <HAL_ADC_MspInit+0xd8>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <HAL_ADC_MspInit+0xd8>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <HAL_ADC_MspInit+0xd8>)
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_ADC_MspInit+0xd8>)
 800074a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800074e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_ADC_MspInit+0xd8>)
 8000752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000756:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <HAL_ADC_MspInit+0xd8>)
 800075a:	2220      	movs	r2, #32
 800075c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <HAL_ADC_MspInit+0xd8>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <HAL_ADC_MspInit+0xd8>)
 8000766:	f001 ff40 	bl	80025ea <HAL_DMA_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000770:	f7ff ff7e 	bl	8000670 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4a09      	ldr	r2, [pc, #36]	; (800079c <HAL_ADC_MspInit+0xd8>)
 8000778:	639a      	str	r2, [r3, #56]	; 0x38
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_ADC_MspInit+0xd8>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	2012      	movs	r0, #18
 8000786:	f001 fefa 	bl	800257e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800078a:	2012      	movs	r0, #18
 800078c:	f001 ff13 	bl	80025b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	200000f8 	.word	0x200000f8
 80007a0:	40020008 	.word	0x40020008

080007a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <HAL_UART_MspInit+0x8c>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d130      	bne.n	8000828 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c6:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <HAL_UART_MspInit+0x90>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a1a      	ldr	r2, [pc, #104]	; (8000834 <HAL_UART_MspInit+0x90>)
 80007cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <HAL_UART_MspInit+0x90>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_UART_MspInit+0x90>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a14      	ldr	r2, [pc, #80]	; (8000834 <HAL_UART_MspInit+0x90>)
 80007e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_UART_MspInit+0x90>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007f6:	230c      	movs	r3, #12
 80007f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000806:	2307      	movs	r3, #7
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000814:	f002 f914 	bl	8002a40 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2026      	movs	r0, #38	; 0x26
 800081e:	f001 feae 	bl	800257e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000822:	2026      	movs	r0, #38	; 0x26
 8000824:	f001 fec7 	bl	80025b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40004400 	.word	0x40004400
 8000834:	40021000 	.word	0x40021000

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800083c:	e7fe      	b.n	800083c <NMI_Handler+0x4>

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler+0x4>

08000856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000884:	f000 f8d8 	bl	8000a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <DMA1_Channel1_IRQHandler+0x10>)
 8000892:	f001 ffc7 	bl	8002824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000f8 	.word	0x200000f8

080008a0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <ADC1_2_IRQHandler+0x10>)
 80008a6:	f000 fc97 	bl	80011d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000a4 	.word	0x200000a4

080008b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <USART2_IRQHandler+0x10>)
 80008ba:	f003 fec9 	bl	8004650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000148 	.word	0x20000148

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d207      	bcs.n	8000908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f8:	f004 fdda 	bl	80054b0 <__errno>
 80008fc:	4603      	mov	r3, r0
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000902:	f04f 33ff 	mov.w	r3, #4294967295
 8000906:	e009      	b.n	800091c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <_sbrk+0x64>)
 8000918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20010000 	.word	0x20010000
 8000928:	00000400 	.word	0x00000400
 800092c:	20000090 	.word	0x20000090
 8000930:	200001f0 	.word	0x200001f0

08000934 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	; (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000990 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <LoopForever+0x6>)
  ldr r1, =_edata
 800095e:	490e      	ldr	r1, [pc, #56]	; (8000998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <LoopForever+0xe>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0b      	ldr	r2, [pc, #44]	; (80009a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000974:	4c0b      	ldr	r4, [pc, #44]	; (80009a4 <LoopForever+0x16>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000982:	f7ff ffd7 	bl	8000934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000986:	f004 fd99 	bl	80054bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800098a:	f7ff fc79 	bl	8000280 <main>

0800098e <LoopForever>:

LoopForever:
    b LoopForever
 800098e:	e7fe      	b.n	800098e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000990:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800099c:	08005e10 	.word	0x08005e10
  ldr r2, =_sbss
 80009a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009a4:	200001ec 	.word	0x200001ec

080009a8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC3_IRQHandler>
	...

080009ac <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_Init+0x28>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_Init+0x28>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009bc:	2003      	movs	r0, #3
 80009be:	f001 fdd3 	bl	8002568 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 f808 	bl	80009d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c8:	f7ff fe58 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40022000 	.word	0x40022000

080009d8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_InitTick+0x54>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_InitTick+0x58>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	4619      	mov	r1, r3
 80009ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fdeb 	bl	80025d2 <HAL_SYSTICK_Config>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e00e      	b.n	8000a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d80a      	bhi.n	8000a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	f001 fdb3 	bl	800257e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a18:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <HAL_InitTick+0x5c>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e000      	b.n	8000a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000004 	.word	0x20000004

08000a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_IncTick+0x20>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_IncTick+0x24>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_IncTick+0x24>)
 8000a4a:	6013      	str	r3, [r2, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	200001d8 	.word	0x200001d8

08000a60 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <HAL_GetTick+0x14>)
 8000a66:	681b      	ldr	r3, [r3, #0]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	200001d8 	.word	0x200001d8

08000a78 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a80:	f7ff ffee 	bl	8000a60 <HAL_GetTick>
 8000a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a90:	d005      	beq.n	8000a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_Delay+0x44>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a9e:	bf00      	nop
 8000aa0:	f7ff ffde 	bl	8000a60 <HAL_GetTick>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d8f7      	bhi.n	8000aa0 <HAL_Delay+0x28>
  {
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008

08000ac0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b09a      	sub	sp, #104	; 0x68
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000af6:	2300      	movs	r3, #0
 8000af8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e1e3      	b.n	8000ed0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	691b      	ldr	r3, [r3, #16]
 8000b0c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d176      	bne.n	8000c08 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d152      	bne.n	8000bc8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2200      	movs	r2, #0
 8000b32:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f7ff fdc1 	bl	80006c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d13b      	bne.n	8000bc8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f001 fb1d 	bl	8002190 <ADC_Disable>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	f003 0310 	and.w	r3, r3, #16
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d12f      	bne.n	8000bc8 <HAL_ADC_Init+0xe0>
 8000b68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d12b      	bne.n	8000bc8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b78:	f023 0302 	bic.w	r3, r3, #2
 8000b7c:	f043 0202 	orr.w	r2, r3, #2
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b92:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ba2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ba4:	4b92      	ldr	r3, [pc, #584]	; (8000df0 <HAL_ADC_Init+0x308>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a92      	ldr	r2, [pc, #584]	; (8000df4 <HAL_ADC_Init+0x30c>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	0c9a      	lsrs	r2, r3, #18
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bba:	e002      	b.n	8000bc2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d1f9      	bne.n	8000bbc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d007      	beq.n	8000be6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000be0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000be4:	d110      	bne.n	8000c08 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f023 0312 	bic.w	r3, r3, #18
 8000bee:	f043 0210 	orr.w	r2, r3, #16
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f043 0201 	orr.w	r2, r3, #1
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	f003 0310 	and.w	r3, r3, #16
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f040 8150 	bne.w	8000eb6 <HAL_ADC_Init+0x3ce>
 8000c16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f040 814b 	bne.w	8000eb6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f040 8143 	bne.w	8000eb6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c38:	f043 0202 	orr.w	r2, r3, #2
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c48:	d004      	beq.n	8000c54 <HAL_ADC_Init+0x16c>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a6a      	ldr	r2, [pc, #424]	; (8000df8 <HAL_ADC_Init+0x310>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d101      	bne.n	8000c58 <HAL_ADC_Init+0x170>
 8000c54:	4b69      	ldr	r3, [pc, #420]	; (8000dfc <HAL_ADC_Init+0x314>)
 8000c56:	e000      	b.n	8000c5a <HAL_ADC_Init+0x172>
 8000c58:	4b69      	ldr	r3, [pc, #420]	; (8000e00 <HAL_ADC_Init+0x318>)
 8000c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c64:	d102      	bne.n	8000c6c <HAL_ADC_Init+0x184>
 8000c66:	4b64      	ldr	r3, [pc, #400]	; (8000df8 <HAL_ADC_Init+0x310>)
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e01a      	b.n	8000ca2 <HAL_ADC_Init+0x1ba>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a61      	ldr	r2, [pc, #388]	; (8000df8 <HAL_ADC_Init+0x310>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d103      	bne.n	8000c7e <HAL_ADC_Init+0x196>
 8000c76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	e011      	b.n	8000ca2 <HAL_ADC_Init+0x1ba>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a60      	ldr	r2, [pc, #384]	; (8000e04 <HAL_ADC_Init+0x31c>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d102      	bne.n	8000c8e <HAL_ADC_Init+0x1a6>
 8000c88:	4b5f      	ldr	r3, [pc, #380]	; (8000e08 <HAL_ADC_Init+0x320>)
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	e009      	b.n	8000ca2 <HAL_ADC_Init+0x1ba>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a5d      	ldr	r2, [pc, #372]	; (8000e08 <HAL_ADC_Init+0x320>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d102      	bne.n	8000c9e <HAL_ADC_Init+0x1b6>
 8000c98:	4b5a      	ldr	r3, [pc, #360]	; (8000e04 <HAL_ADC_Init+0x31c>)
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	e001      	b.n	8000ca2 <HAL_ADC_Init+0x1ba>
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d108      	bne.n	8000cc2 <HAL_ADC_Init+0x1da>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d101      	bne.n	8000cc2 <HAL_ADC_Init+0x1da>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <HAL_ADC_Init+0x1dc>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d11c      	bne.n	8000d02 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d010      	beq.n	8000cf0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d107      	bne.n	8000cea <HAL_ADC_Init+0x202>
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d101      	bne.n	8000cea <HAL_ADC_Init+0x202>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <HAL_ADC_Init+0x204>
 8000cea:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d108      	bne.n	8000d02 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	431a      	orrs	r2, r3
 8000cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d00:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7e5b      	ldrb	r3, [r3, #25]
 8000d06:	035b      	lsls	r3, r3, #13
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d0c:	2a01      	cmp	r2, #1
 8000d0e:	d002      	beq.n	8000d16 <HAL_ADC_Init+0x22e>
 8000d10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d14:	e000      	b.n	8000d18 <HAL_ADC_Init+0x230>
 8000d16:	2200      	movs	r2, #0
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d11b      	bne.n	8000d6e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7e5b      	ldrb	r3, [r3, #25]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d109      	bne.n	8000d52 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	3b01      	subs	r3, #1
 8000d44:	045a      	lsls	r2, r3, #17
 8000d46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d4e:	663b      	str	r3, [r7, #96]	; 0x60
 8000d50:	e00d      	b.n	8000d6e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000d5a:	f043 0220 	orr.w	r2, r3, #32
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f043 0201 	orr.w	r2, r3, #1
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d054      	beq.n	8000e20 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a22      	ldr	r2, [pc, #136]	; (8000e04 <HAL_ADC_Init+0x31c>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d004      	beq.n	8000d8a <HAL_ADC_Init+0x2a2>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a20      	ldr	r2, [pc, #128]	; (8000e08 <HAL_ADC_Init+0x320>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d140      	bne.n	8000e0c <HAL_ADC_Init+0x324>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000d92:	d02a      	beq.n	8000dea <HAL_ADC_Init+0x302>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d9c:	d022      	beq.n	8000de4 <HAL_ADC_Init+0x2fc>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000da6:	d01a      	beq.n	8000dde <HAL_ADC_Init+0x2f6>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000db0:	d012      	beq.n	8000dd8 <HAL_ADC_Init+0x2f0>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000dba:	d00a      	beq.n	8000dd2 <HAL_ADC_Init+0x2ea>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000dc4:	d002      	beq.n	8000dcc <HAL_ADC_Init+0x2e4>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dca:	e023      	b.n	8000e14 <HAL_ADC_Init+0x32c>
 8000dcc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000dd0:	e020      	b.n	8000e14 <HAL_ADC_Init+0x32c>
 8000dd2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000dd6:	e01d      	b.n	8000e14 <HAL_ADC_Init+0x32c>
 8000dd8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ddc:	e01a      	b.n	8000e14 <HAL_ADC_Init+0x32c>
 8000dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de2:	e017      	b.n	8000e14 <HAL_ADC_Init+0x32c>
 8000de4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000de8:	e014      	b.n	8000e14 <HAL_ADC_Init+0x32c>
 8000dea:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000dee:	e011      	b.n	8000e14 <HAL_ADC_Init+0x32c>
 8000df0:	20000000 	.word	0x20000000
 8000df4:	431bde83 	.word	0x431bde83
 8000df8:	50000100 	.word	0x50000100
 8000dfc:	50000300 	.word	0x50000300
 8000e00:	50000700 	.word	0x50000700
 8000e04:	50000400 	.word	0x50000400
 8000e08:	50000500 	.word	0x50000500
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d114      	bne.n	8000e58 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	6812      	ldr	r2, [r2, #0]
 8000e38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e3c:	f023 0302 	bic.w	r3, r3, #2
 8000e40:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7e1b      	ldrb	r3, [r3, #24]
 8000e46:	039a      	lsls	r2, r3, #14
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4313      	orrs	r3, r2
 8000e52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e54:	4313      	orrs	r3, r2
 8000e56:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <HAL_ADC_Init+0x3f0>)
 8000e60:	4013      	ands	r3, r2
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	6812      	ldr	r2, [r2, #0]
 8000e66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e68:	430b      	orrs	r3, r1
 8000e6a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d10c      	bne.n	8000e8e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f023 010f 	bic.w	r1, r3, #15
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	1e5a      	subs	r2, r3, #1
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e8c:	e007      	b.n	8000e9e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 020f 	bic.w	r2, r2, #15
 8000e9c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	f023 0303 	bic.w	r3, r3, #3
 8000eac:	f043 0201 	orr.w	r2, r3, #1
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	641a      	str	r2, [r3, #64]	; 0x40
 8000eb4:	e00a      	b.n	8000ecc <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f023 0312 	bic.w	r3, r3, #18
 8000ebe:	f043 0210 	orr.w	r2, r3, #16
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000ecc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3768      	adds	r7, #104	; 0x68
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	fff0c007 	.word	0xfff0c007

08000edc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f040 80f7 	bne.w	80010ea <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d101      	bne.n	8000f0a <HAL_ADC_Start_DMA+0x2e>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e0f2      	b.n	80010f0 <HAL_ADC_Start_DMA+0x214>
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f1a:	d004      	beq.n	8000f26 <HAL_ADC_Start_DMA+0x4a>
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a75      	ldr	r2, [pc, #468]	; (80010f8 <HAL_ADC_Start_DMA+0x21c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d109      	bne.n	8000f3a <HAL_ADC_Start_DMA+0x5e>
 8000f26:	4b75      	ldr	r3, [pc, #468]	; (80010fc <HAL_ADC_Start_DMA+0x220>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 031f 	and.w	r3, r3, #31
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	bf0c      	ite	eq
 8000f32:	2301      	moveq	r3, #1
 8000f34:	2300      	movne	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	e008      	b.n	8000f4c <HAL_ADC_Start_DMA+0x70>
 8000f3a:	4b71      	ldr	r3, [pc, #452]	; (8001100 <HAL_ADC_Start_DMA+0x224>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f003 031f 	and.w	r3, r3, #31
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	bf0c      	ite	eq
 8000f46:	2301      	moveq	r3, #1
 8000f48:	2300      	movne	r3, #0
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 80c5 	beq.w	80010dc <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f001 f8b8 	bl	80020c8 <ADC_Enable>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f040 80b7 	bne.w	80010d2 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f6c:	f023 0301 	bic.w	r3, r3, #1
 8000f70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f80:	d004      	beq.n	8000f8c <HAL_ADC_Start_DMA+0xb0>
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a5c      	ldr	r2, [pc, #368]	; (80010f8 <HAL_ADC_Start_DMA+0x21c>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d106      	bne.n	8000f9a <HAL_ADC_Start_DMA+0xbe>
 8000f8c:	4b5b      	ldr	r3, [pc, #364]	; (80010fc <HAL_ADC_Start_DMA+0x220>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d010      	beq.n	8000fba <HAL_ADC_Start_DMA+0xde>
 8000f98:	e005      	b.n	8000fa6 <HAL_ADC_Start_DMA+0xca>
 8000f9a:	4b59      	ldr	r3, [pc, #356]	; (8001100 <HAL_ADC_Start_DMA+0x224>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 031f 	and.w	r3, r3, #31
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d009      	beq.n	8000fba <HAL_ADC_Start_DMA+0xde>
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fae:	d004      	beq.n	8000fba <HAL_ADC_Start_DMA+0xde>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a53      	ldr	r2, [pc, #332]	; (8001104 <HAL_ADC_Start_DMA+0x228>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d115      	bne.n	8000fe6 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d036      	beq.n	8001042 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fdc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000fe4:	e02d      	b.n	8001042 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ffa:	d004      	beq.n	8001006 <HAL_ADC_Start_DMA+0x12a>
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a3d      	ldr	r2, [pc, #244]	; (80010f8 <HAL_ADC_Start_DMA+0x21c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d10a      	bne.n	800101c <HAL_ADC_Start_DMA+0x140>
 8001006:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001010:	2b00      	cmp	r3, #0
 8001012:	bf14      	ite	ne
 8001014:	2301      	movne	r3, #1
 8001016:	2300      	moveq	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	e008      	b.n	800102e <HAL_ADC_Start_DMA+0x152>
 800101c:	4b39      	ldr	r3, [pc, #228]	; (8001104 <HAL_ADC_Start_DMA+0x228>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf14      	ite	ne
 8001028:	2301      	movne	r3, #1
 800102a:	2300      	moveq	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d007      	beq.n	8001042 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800103a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800104a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800104e:	d106      	bne.n	800105e <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	f023 0206 	bic.w	r2, r3, #6
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	645a      	str	r2, [r3, #68]	; 0x44
 800105c:	e002      	b.n	8001064 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2200      	movs	r2, #0
 8001062:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001070:	4a25      	ldr	r2, [pc, #148]	; (8001108 <HAL_ADC_Start_DMA+0x22c>)
 8001072:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001078:	4a24      	ldr	r2, [pc, #144]	; (800110c <HAL_ADC_Start_DMA+0x230>)
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001080:	4a23      	ldr	r2, [pc, #140]	; (8001110 <HAL_ADC_Start_DMA+0x234>)
 8001082:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	221c      	movs	r2, #28
 800108a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0210 	orr.w	r2, r2, #16
 800109a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68da      	ldr	r2, [r3, #12]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f042 0201 	orr.w	r2, r2, #1
 80010aa:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3340      	adds	r3, #64	; 0x40
 80010b6:	4619      	mov	r1, r3
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f001 fadc 	bl	8002678 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 0204 	orr.w	r2, r2, #4
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	e00d      	b.n	80010ee <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80010da:	e008      	b.n	80010ee <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80010e8:	e001      	b.n	80010ee <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010ea:	2302      	movs	r3, #2
 80010ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	50000100 	.word	0x50000100
 80010fc:	50000300 	.word	0x50000300
 8001100:	50000700 	.word	0x50000700
 8001104:	50000400 	.word	0x50000400
 8001108:	08001ffd 	.word	0x08001ffd
 800110c:	08002077 	.word	0x08002077
 8001110:	08002093 	.word	0x08002093

08001114 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001126:	2b01      	cmp	r3, #1
 8001128:	d101      	bne.n	800112e <HAL_ADC_Stop_DMA+0x1a>
 800112a:	2302      	movs	r3, #2
 800112c:	e050      	b.n	80011d0 <HAL_ADC_Stop_DMA+0xbc>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001136:	216c      	movs	r1, #108	; 0x6c
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f001 f88f 	bl	800225c <ADC_ConversionStop>
 800113e:	4603      	mov	r3, r0
 8001140:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001142:	7bfb      	ldrb	r3, [r7, #15]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d13e      	bne.n	80011c6 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0201 	bic.w	r2, r2, #1
 8001156:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001160:	2b02      	cmp	r3, #2
 8001162:	d10f      	bne.n	8001184 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001168:	4618      	mov	r0, r3
 800116a:	f001 fae4 	bl	8002736 <HAL_DMA_Abort>
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0210 	bic.w	r2, r2, #16
 8001192:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d105      	bne.n	80011a6 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 fff8 	bl	8002190 <ADC_Disable>
 80011a0:	4603      	mov	r3, r0
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e002      	b.n	80011ac <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 fff2 	bl	8002190 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d109      	bne.n	80011c6 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011ba:	f023 0301 	bic.w	r3, r3, #1
 80011be:	f043 0201 	orr.w	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d106      	bne.n	8001208 <HAL_ADC_IRQHandler+0x30>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b04      	cmp	r3, #4
 8001206:	d00f      	beq.n	8001228 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001212:	2b08      	cmp	r3, #8
 8001214:	f040 80c0 	bne.w	8001398 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b08      	cmp	r3, #8
 8001224:	f040 80b8 	bne.w	8001398 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f003 0310 	and.w	r3, r3, #16
 8001230:	2b00      	cmp	r3, #0
 8001232:	d105      	bne.n	8001240 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001248:	d004      	beq.n	8001254 <HAL_ADC_IRQHandler+0x7c>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a95      	ldr	r2, [pc, #596]	; (80014a4 <HAL_ADC_IRQHandler+0x2cc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d106      	bne.n	8001262 <HAL_ADC_IRQHandler+0x8a>
 8001254:	4b94      	ldr	r3, [pc, #592]	; (80014a8 <HAL_ADC_IRQHandler+0x2d0>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 031f 	and.w	r3, r3, #31
 800125c:	2b00      	cmp	r3, #0
 800125e:	d03e      	beq.n	80012de <HAL_ADC_IRQHandler+0x106>
 8001260:	e005      	b.n	800126e <HAL_ADC_IRQHandler+0x96>
 8001262:	4b92      	ldr	r3, [pc, #584]	; (80014ac <HAL_ADC_IRQHandler+0x2d4>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 031f 	and.w	r3, r3, #31
 800126a:	2b00      	cmp	r3, #0
 800126c:	d037      	beq.n	80012de <HAL_ADC_IRQHandler+0x106>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001276:	d004      	beq.n	8001282 <HAL_ADC_IRQHandler+0xaa>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a89      	ldr	r2, [pc, #548]	; (80014a4 <HAL_ADC_IRQHandler+0x2cc>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d106      	bne.n	8001290 <HAL_ADC_IRQHandler+0xb8>
 8001282:	4b89      	ldr	r3, [pc, #548]	; (80014a8 <HAL_ADC_IRQHandler+0x2d0>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	2b05      	cmp	r3, #5
 800128c:	d027      	beq.n	80012de <HAL_ADC_IRQHandler+0x106>
 800128e:	e005      	b.n	800129c <HAL_ADC_IRQHandler+0xc4>
 8001290:	4b86      	ldr	r3, [pc, #536]	; (80014ac <HAL_ADC_IRQHandler+0x2d4>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 031f 	and.w	r3, r3, #31
 8001298:	2b05      	cmp	r3, #5
 800129a:	d020      	beq.n	80012de <HAL_ADC_IRQHandler+0x106>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012a4:	d004      	beq.n	80012b0 <HAL_ADC_IRQHandler+0xd8>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a7e      	ldr	r2, [pc, #504]	; (80014a4 <HAL_ADC_IRQHandler+0x2cc>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d106      	bne.n	80012be <HAL_ADC_IRQHandler+0xe6>
 80012b0:	4b7d      	ldr	r3, [pc, #500]	; (80014a8 <HAL_ADC_IRQHandler+0x2d0>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 031f 	and.w	r3, r3, #31
 80012b8:	2b09      	cmp	r3, #9
 80012ba:	d010      	beq.n	80012de <HAL_ADC_IRQHandler+0x106>
 80012bc:	e005      	b.n	80012ca <HAL_ADC_IRQHandler+0xf2>
 80012be:	4b7b      	ldr	r3, [pc, #492]	; (80014ac <HAL_ADC_IRQHandler+0x2d4>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 031f 	and.w	r3, r3, #31
 80012c6:	2b09      	cmp	r3, #9
 80012c8:	d009      	beq.n	80012de <HAL_ADC_IRQHandler+0x106>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d2:	d004      	beq.n	80012de <HAL_ADC_IRQHandler+0x106>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a75      	ldr	r2, [pc, #468]	; (80014b0 <HAL_ADC_IRQHandler+0x2d8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d104      	bne.n	80012e8 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	e00f      	b.n	8001308 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012f0:	d004      	beq.n	80012fc <HAL_ADC_IRQHandler+0x124>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a6b      	ldr	r2, [pc, #428]	; (80014a4 <HAL_ADC_IRQHandler+0x2cc>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d102      	bne.n	8001302 <HAL_ADC_IRQHandler+0x12a>
 80012fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001300:	e000      	b.n	8001304 <HAL_ADC_IRQHandler+0x12c>
 8001302:	4b6b      	ldr	r3, [pc, #428]	; (80014b0 <HAL_ADC_IRQHandler+0x2d8>)
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001312:	2b00      	cmp	r3, #0
 8001314:	d139      	bne.n	800138a <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800131c:	2b00      	cmp	r3, #0
 800131e:	d134      	bne.n	800138a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b08      	cmp	r3, #8
 800132c:	d12d      	bne.n	800138a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d11a      	bne.n	8001372 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 020c 	bic.w	r2, r2, #12
 800134a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d112      	bne.n	800138a <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f043 0201 	orr.w	r2, r3, #1
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	641a      	str	r2, [r3, #64]	; 0x40
 8001370:	e00b      	b.n	800138a <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f043 0210 	orr.w	r2, r3, #16
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	f043 0201 	orr.w	r2, r3, #1
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff f948 	bl	8000620 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	220c      	movs	r2, #12
 8001396:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0320 	and.w	r3, r3, #32
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d106      	bne.n	80013b4 <HAL_ADC_IRQHandler+0x1dc>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	2b20      	cmp	r3, #32
 80013b2:	d00f      	beq.n	80013d4 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80013be:	2b40      	cmp	r3, #64	; 0x40
 80013c0:	f040 813c 	bne.w	800163c <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ce:	2b40      	cmp	r3, #64	; 0x40
 80013d0:	f040 8134 	bne.w	800163c <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013e8:	d004      	beq.n	80013f4 <HAL_ADC_IRQHandler+0x21c>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a2d      	ldr	r2, [pc, #180]	; (80014a4 <HAL_ADC_IRQHandler+0x2cc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d106      	bne.n	8001402 <HAL_ADC_IRQHandler+0x22a>
 80013f4:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <HAL_ADC_IRQHandler+0x2d0>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 031f 	and.w	r3, r3, #31
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d03e      	beq.n	800147e <HAL_ADC_IRQHandler+0x2a6>
 8001400:	e005      	b.n	800140e <HAL_ADC_IRQHandler+0x236>
 8001402:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <HAL_ADC_IRQHandler+0x2d4>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 031f 	and.w	r3, r3, #31
 800140a:	2b00      	cmp	r3, #0
 800140c:	d037      	beq.n	800147e <HAL_ADC_IRQHandler+0x2a6>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001416:	d004      	beq.n	8001422 <HAL_ADC_IRQHandler+0x24a>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <HAL_ADC_IRQHandler+0x2cc>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d106      	bne.n	8001430 <HAL_ADC_IRQHandler+0x258>
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <HAL_ADC_IRQHandler+0x2d0>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 031f 	and.w	r3, r3, #31
 800142a:	2b05      	cmp	r3, #5
 800142c:	d027      	beq.n	800147e <HAL_ADC_IRQHandler+0x2a6>
 800142e:	e005      	b.n	800143c <HAL_ADC_IRQHandler+0x264>
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <HAL_ADC_IRQHandler+0x2d4>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 031f 	and.w	r3, r3, #31
 8001438:	2b05      	cmp	r3, #5
 800143a:	d020      	beq.n	800147e <HAL_ADC_IRQHandler+0x2a6>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001444:	d004      	beq.n	8001450 <HAL_ADC_IRQHandler+0x278>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <HAL_ADC_IRQHandler+0x2cc>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d106      	bne.n	800145e <HAL_ADC_IRQHandler+0x286>
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_ADC_IRQHandler+0x2d0>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 031f 	and.w	r3, r3, #31
 8001458:	2b09      	cmp	r3, #9
 800145a:	d010      	beq.n	800147e <HAL_ADC_IRQHandler+0x2a6>
 800145c:	e005      	b.n	800146a <HAL_ADC_IRQHandler+0x292>
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <HAL_ADC_IRQHandler+0x2d4>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 031f 	and.w	r3, r3, #31
 8001466:	2b09      	cmp	r3, #9
 8001468:	d009      	beq.n	800147e <HAL_ADC_IRQHandler+0x2a6>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001472:	d004      	beq.n	800147e <HAL_ADC_IRQHandler+0x2a6>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <HAL_ADC_IRQHandler+0x2d8>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d104      	bne.n	8001488 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	e018      	b.n	80014ba <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001490:	d004      	beq.n	800149c <HAL_ADC_IRQHandler+0x2c4>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_ADC_IRQHandler+0x2cc>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d10b      	bne.n	80014b4 <HAL_ADC_IRQHandler+0x2dc>
 800149c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014a0:	e009      	b.n	80014b6 <HAL_ADC_IRQHandler+0x2de>
 80014a2:	bf00      	nop
 80014a4:	50000100 	.word	0x50000100
 80014a8:	50000300 	.word	0x50000300
 80014ac:	50000700 	.word	0x50000700
 80014b0:	50000400 	.word	0x50000400
 80014b4:	4b9d      	ldr	r3, [pc, #628]	; (800172c <HAL_ADC_IRQHandler+0x554>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f040 80b2 	bne.w	800162e <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00d      	beq.n	80014f0 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f040 80a5 	bne.w	800162e <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f040 809f 	bne.w	800162e <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fa:	2b40      	cmp	r3, #64	; 0x40
 80014fc:	f040 8097 	bne.w	800162e <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001508:	d004      	beq.n	8001514 <HAL_ADC_IRQHandler+0x33c>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a88      	ldr	r2, [pc, #544]	; (8001730 <HAL_ADC_IRQHandler+0x558>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d106      	bne.n	8001522 <HAL_ADC_IRQHandler+0x34a>
 8001514:	4b87      	ldr	r3, [pc, #540]	; (8001734 <HAL_ADC_IRQHandler+0x55c>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 031f 	and.w	r3, r3, #31
 800151c:	2b00      	cmp	r3, #0
 800151e:	d03e      	beq.n	800159e <HAL_ADC_IRQHandler+0x3c6>
 8001520:	e005      	b.n	800152e <HAL_ADC_IRQHandler+0x356>
 8001522:	4b85      	ldr	r3, [pc, #532]	; (8001738 <HAL_ADC_IRQHandler+0x560>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 031f 	and.w	r3, r3, #31
 800152a:	2b00      	cmp	r3, #0
 800152c:	d037      	beq.n	800159e <HAL_ADC_IRQHandler+0x3c6>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001536:	d004      	beq.n	8001542 <HAL_ADC_IRQHandler+0x36a>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a7c      	ldr	r2, [pc, #496]	; (8001730 <HAL_ADC_IRQHandler+0x558>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d106      	bne.n	8001550 <HAL_ADC_IRQHandler+0x378>
 8001542:	4b7c      	ldr	r3, [pc, #496]	; (8001734 <HAL_ADC_IRQHandler+0x55c>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 031f 	and.w	r3, r3, #31
 800154a:	2b06      	cmp	r3, #6
 800154c:	d027      	beq.n	800159e <HAL_ADC_IRQHandler+0x3c6>
 800154e:	e005      	b.n	800155c <HAL_ADC_IRQHandler+0x384>
 8001550:	4b79      	ldr	r3, [pc, #484]	; (8001738 <HAL_ADC_IRQHandler+0x560>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	2b06      	cmp	r3, #6
 800155a:	d020      	beq.n	800159e <HAL_ADC_IRQHandler+0x3c6>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001564:	d004      	beq.n	8001570 <HAL_ADC_IRQHandler+0x398>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a71      	ldr	r2, [pc, #452]	; (8001730 <HAL_ADC_IRQHandler+0x558>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d106      	bne.n	800157e <HAL_ADC_IRQHandler+0x3a6>
 8001570:	4b70      	ldr	r3, [pc, #448]	; (8001734 <HAL_ADC_IRQHandler+0x55c>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	2b07      	cmp	r3, #7
 800157a:	d010      	beq.n	800159e <HAL_ADC_IRQHandler+0x3c6>
 800157c:	e005      	b.n	800158a <HAL_ADC_IRQHandler+0x3b2>
 800157e:	4b6e      	ldr	r3, [pc, #440]	; (8001738 <HAL_ADC_IRQHandler+0x560>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 031f 	and.w	r3, r3, #31
 8001586:	2b07      	cmp	r3, #7
 8001588:	d009      	beq.n	800159e <HAL_ADC_IRQHandler+0x3c6>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001592:	d004      	beq.n	800159e <HAL_ADC_IRQHandler+0x3c6>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a64      	ldr	r2, [pc, #400]	; (800172c <HAL_ADC_IRQHandler+0x554>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d104      	bne.n	80015a8 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	e00f      	b.n	80015c8 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015b0:	d004      	beq.n	80015bc <HAL_ADC_IRQHandler+0x3e4>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a5e      	ldr	r2, [pc, #376]	; (8001730 <HAL_ADC_IRQHandler+0x558>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d102      	bne.n	80015c2 <HAL_ADC_IRQHandler+0x3ea>
 80015bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015c0:	e000      	b.n	80015c4 <HAL_ADC_IRQHandler+0x3ec>
 80015c2:	4b5a      	ldr	r3, [pc, #360]	; (800172c <HAL_ADC_IRQHandler+0x554>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d12d      	bne.n	800162e <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d11a      	bne.n	8001616 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80015ee:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d112      	bne.n	800162e <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f043 0201 	orr.w	r2, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	641a      	str	r2, [r3, #64]	; 0x40
 8001614:	e00b      	b.n	800162e <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	f043 0210 	orr.w	r2, r3, #16
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f043 0201 	orr.w	r2, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f8de 	bl	80017f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2260      	movs	r2, #96	; 0x60
 800163a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001646:	2b80      	cmp	r3, #128	; 0x80
 8001648:	d113      	bne.n	8001672 <HAL_ADC_IRQHandler+0x49a>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001654:	2b80      	cmp	r3, #128	; 0x80
 8001656:	d10c      	bne.n	8001672 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff fa2b 	bl	8000ac0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2280      	movs	r2, #128	; 0x80
 8001670:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001680:	d115      	bne.n	80016ae <HAL_ADC_IRQHandler+0x4d6>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001690:	d10d      	bne.n	80016ae <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f8ba 	bl	8001818 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ac:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016bc:	d115      	bne.n	80016ea <HAL_ADC_IRQHandler+0x512>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016cc:	d10d      	bne.n	80016ea <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f8a6 	bl	800182c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016e8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0310 	and.w	r3, r3, #16
 80016f4:	2b10      	cmp	r3, #16
 80016f6:	d151      	bne.n	800179c <HAL_ADC_IRQHandler+0x5c4>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b10      	cmp	r3, #16
 8001704:	d14a      	bne.n	800179c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170a:	2b01      	cmp	r3, #1
 800170c:	d102      	bne.n	8001714 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 800170e:	2301      	movs	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e02d      	b.n	8001770 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800171c:	d004      	beq.n	8001728 <HAL_ADC_IRQHandler+0x550>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a03      	ldr	r2, [pc, #12]	; (8001730 <HAL_ADC_IRQHandler+0x558>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d109      	bne.n	800173c <HAL_ADC_IRQHandler+0x564>
 8001728:	4b02      	ldr	r3, [pc, #8]	; (8001734 <HAL_ADC_IRQHandler+0x55c>)
 800172a:	e008      	b.n	800173e <HAL_ADC_IRQHandler+0x566>
 800172c:	50000400 	.word	0x50000400
 8001730:	50000100 	.word	0x50000100
 8001734:	50000300 	.word	0x50000300
 8001738:	50000700 	.word	0x50000700
 800173c:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_ADC_IRQHandler+0x614>)
 800173e:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	2b00      	cmp	r3, #0
 800174a:	d109      	bne.n	8001760 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b01      	cmp	r3, #1
 8001758:	d10a      	bne.n	8001770 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 800175a:	2301      	movs	r3, #1
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	e007      	b.n	8001770 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 800176c:	2301      	movs	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10e      	bne.n	8001794 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f043 0202 	orr.w	r2, r3, #2
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff f9a0 	bl	8000ad4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2210      	movs	r2, #16
 800179a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017aa:	d11b      	bne.n	80017e4 <HAL_ADC_IRQHandler+0x60c>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ba:	d113      	bne.n	80017e4 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017cc:	f043 0208 	orr.w	r2, r3, #8
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017dc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f810 	bl	8001804 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80017e4:	bf00      	nop
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	50000700 	.word	0x50000700

080017f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001840:	b480      	push	{r7}
 8001842:	b09b      	sub	sp, #108	; 0x6c
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x22>
 800185e:	2302      	movs	r3, #2
 8001860:	e2cb      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x5ba>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	f040 82af 	bne.w	8001dd8 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b04      	cmp	r3, #4
 8001880:	d81c      	bhi.n	80018bc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	461a      	mov	r2, r3
 8001896:	231f      	movs	r3, #31
 8001898:	4093      	lsls	r3, r2
 800189a:	43db      	mvns	r3, r3
 800189c:	4019      	ands	r1, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	6818      	ldr	r0, [r3, #0]
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa00 f203 	lsl.w	r2, r0, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
 80018ba:	e063      	b.n	8001984 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b09      	cmp	r3, #9
 80018c2:	d81e      	bhi.n	8001902 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	3b1e      	subs	r3, #30
 80018d8:	221f      	movs	r2, #31
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	4019      	ands	r1, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	3b1e      	subs	r3, #30
 80018f4:	fa00 f203 	lsl.w	r2, r0, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001900:	e040      	b.n	8001984 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b0e      	cmp	r3, #14
 8001908:	d81e      	bhi.n	8001948 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	3b3c      	subs	r3, #60	; 0x3c
 800191e:	221f      	movs	r2, #31
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	4019      	ands	r1, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	3b3c      	subs	r3, #60	; 0x3c
 800193a:	fa00 f203 	lsl.w	r2, r0, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	639a      	str	r2, [r3, #56]	; 0x38
 8001946:	e01d      	b.n	8001984 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	3b5a      	subs	r3, #90	; 0x5a
 800195c:	221f      	movs	r2, #31
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	4019      	ands	r1, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	3b5a      	subs	r3, #90	; 0x5a
 8001978:	fa00 f203 	lsl.w	r2, r0, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b00      	cmp	r3, #0
 8001990:	f040 80e5 	bne.w	8001b5e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b09      	cmp	r3, #9
 800199a:	d91c      	bls.n	80019d6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6999      	ldr	r1, [r3, #24]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	3b1e      	subs	r3, #30
 80019ae:	2207      	movs	r2, #7
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	4019      	ands	r1, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	6898      	ldr	r0, [r3, #8]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	3b1e      	subs	r3, #30
 80019c8:	fa00 f203 	lsl.w	r2, r0, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	619a      	str	r2, [r3, #24]
 80019d4:	e019      	b.n	8001a0a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6959      	ldr	r1, [r3, #20]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	2207      	movs	r2, #7
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	4019      	ands	r1, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	6898      	ldr	r0, [r3, #8]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	08db      	lsrs	r3, r3, #3
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d84f      	bhi.n	8001acc <HAL_ADC_ConfigChannel+0x28c>
 8001a2c:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <HAL_ADC_ConfigChannel+0x1f4>)
 8001a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a32:	bf00      	nop
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a67 	.word	0x08001a67
 8001a3c:	08001a89 	.word	0x08001a89
 8001a40:	08001aab 	.word	0x08001aab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a4a:	4b9f      	ldr	r3, [pc, #636]	; (8001cc8 <HAL_ADC_ConfigChannel+0x488>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	0691      	lsls	r1, r2, #26
 8001a54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a56:	430a      	orrs	r2, r1
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a62:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a64:	e07e      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a6c:	4b96      	ldr	r3, [pc, #600]	; (8001cc8 <HAL_ADC_ConfigChannel+0x488>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	0691      	lsls	r1, r2, #26
 8001a76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a84:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a86:	e06d      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a8e:	4b8e      	ldr	r3, [pc, #568]	; (8001cc8 <HAL_ADC_ConfigChannel+0x488>)
 8001a90:	4013      	ands	r3, r2
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	0691      	lsls	r1, r2, #26
 8001a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001aa6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001aa8:	e05c      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ab0:	4b85      	ldr	r3, [pc, #532]	; (8001cc8 <HAL_ADC_ConfigChannel+0x488>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	0691      	lsls	r1, r2, #26
 8001aba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001abc:	430a      	orrs	r2, r1
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ac8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001aca:	e04b      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	069b      	lsls	r3, r3, #26
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d107      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001aee:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001af6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	069b      	lsls	r3, r3, #26
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d107      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b12:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	069b      	lsls	r3, r3, #26
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d107      	bne.n	8001b38 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b36:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	069b      	lsls	r3, r3, #26
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d10a      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b5a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001b5c:	e001      	b.n	8001b62 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001b5e:	bf00      	nop
 8001b60:	e000      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001b62:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d108      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x344>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x344>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_ADC_ConfigChannel+0x346>
 8001b84:	2300      	movs	r3, #0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 8131 	bne.w	8001dee <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d00f      	beq.n	8001bb4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	400a      	ands	r2, r1
 8001bae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001bb2:	e049      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b09      	cmp	r3, #9
 8001bd4:	d91c      	bls.n	8001c10 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6999      	ldr	r1, [r3, #24]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4613      	mov	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	3b1b      	subs	r3, #27
 8001be8:	2207      	movs	r2, #7
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	4019      	ands	r1, r3
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6898      	ldr	r0, [r3, #8]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	3b1b      	subs	r3, #27
 8001c02:	fa00 f203 	lsl.w	r2, r0, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	619a      	str	r2, [r3, #24]
 8001c0e:	e01b      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6959      	ldr	r1, [r3, #20]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	2207      	movs	r2, #7
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	4019      	ands	r1, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	6898      	ldr	r0, [r3, #8]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	4613      	mov	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c50:	d004      	beq.n	8001c5c <HAL_ADC_ConfigChannel+0x41c>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <HAL_ADC_ConfigChannel+0x48c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x420>
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <HAL_ADC_ConfigChannel+0x490>)
 8001c5e:	e000      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x422>
 8001c60:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <HAL_ADC_ConfigChannel+0x494>)
 8001c62:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b10      	cmp	r3, #16
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d015      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c7c:	2b11      	cmp	r3, #17
 8001c7e:	d105      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00b      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c90:	2b12      	cmp	r3, #18
 8001c92:	f040 80ac 	bne.w	8001dee <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f040 80a5 	bne.w	8001dee <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cac:	d102      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x474>
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <HAL_ADC_ConfigChannel+0x48c>)
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	e023      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x4bc>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <HAL_ADC_ConfigChannel+0x48c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x498>
 8001cbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	e01a      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x4bc>
 8001cc6:	bf00      	nop
 8001cc8:	83fff000 	.word	0x83fff000
 8001ccc:	50000100 	.word	0x50000100
 8001cd0:	50000300 	.word	0x50000300
 8001cd4:	50000700 	.word	0x50000700
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a4a      	ldr	r2, [pc, #296]	; (8001e08 <HAL_ADC_ConfigChannel+0x5c8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d102      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x4a8>
 8001ce2:	4b4a      	ldr	r3, [pc, #296]	; (8001e0c <HAL_ADC_ConfigChannel+0x5cc>)
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	e009      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x4bc>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a47      	ldr	r2, [pc, #284]	; (8001e0c <HAL_ADC_ConfigChannel+0x5cc>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d102      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x4b8>
 8001cf2:	4b45      	ldr	r3, [pc, #276]	; (8001e08 <HAL_ADC_ConfigChannel+0x5c8>)
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e001      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x4bc>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d108      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x4dc>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x4dc>
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x4de>
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d150      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d22:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d010      	beq.n	8001d4a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d107      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x504>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x504>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x506>
 8001d44:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d13c      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b10      	cmp	r3, #16
 8001d50:	d11d      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x54e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d5a:	d118      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d66:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d68:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <HAL_ADC_ConfigChannel+0x5d0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a29      	ldr	r2, [pc, #164]	; (8001e14 <HAL_ADC_ConfigChannel+0x5d4>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	0c9a      	lsrs	r2, r3, #18
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d7e:	e002      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f9      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d8c:	e02e      	b.n	8001dec <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2b11      	cmp	r3, #17
 8001d94:	d10b      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x56e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d9e:	d106      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001daa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dac:	e01e      	b.n	8001dec <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b12      	cmp	r3, #18
 8001db4:	d11a      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dc2:	e013      	b.n	8001dec <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f043 0220 	orr.w	r2, r3, #32
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001dd6:	e00a      	b.n	8001dee <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f043 0220 	orr.w	r2, r3, #32
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001dea:	e000      	b.n	8001dee <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dec:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001df6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	376c      	adds	r7, #108	; 0x6c
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	50000400 	.word	0x50000400
 8001e0c:	50000500 	.word	0x50000500
 8001e10:	20000000 	.word	0x20000000
 8001e14:	431bde83 	.word	0x431bde83

08001e18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b099      	sub	sp, #100	; 0x64
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e30:	d102      	bne.n	8001e38 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001e32:	4b6d      	ldr	r3, [pc, #436]	; (8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	e01a      	b.n	8001e6e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	; (8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d103      	bne.n	8001e4a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001e42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	e011      	b.n	8001e6e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a67      	ldr	r2, [pc, #412]	; (8001fec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d102      	bne.n	8001e5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e54:	4b66      	ldr	r3, [pc, #408]	; (8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	e009      	b.n	8001e6e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a64      	ldr	r2, [pc, #400]	; (8001ff0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d102      	bne.n	8001e6a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001e64:	4b61      	ldr	r3, [pc, #388]	; (8001fec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	e001      	b.n	8001e6e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0b0      	b.n	8001fda <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e0a9      	b.n	8001fda <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f040 808d 	bne.w	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 8086 	bne.w	8001fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001eb4:	d004      	beq.n	8001ec0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a4b      	ldr	r2, [pc, #300]	; (8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001ec0:	4b4c      	ldr	r3, [pc, #304]	; (8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001ec2:	e000      	b.n	8001ec6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001ec4:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001ec6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d040      	beq.n	8001f52 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	6859      	ldr	r1, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ee2:	035b      	lsls	r3, r3, #13
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eea:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d108      	bne.n	8001f0c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d15c      	bne.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d107      	bne.n	8001f2e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001f2e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d14b      	bne.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001f34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f3c:	f023 030f 	bic.w	r3, r3, #15
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	6811      	ldr	r1, [r2, #0]
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	6892      	ldr	r2, [r2, #8]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f4e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f50:	e03c      	b.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f5c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d108      	bne.n	8001f7e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d123      	bne.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d107      	bne.n	8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001fa0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d112      	bne.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fae:	f023 030f 	bic.w	r3, r3, #15
 8001fb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fb4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fb6:	e009      	b.n	8001fcc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f043 0220 	orr.w	r2, r3, #32
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001fca:	e000      	b.n	8001fce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fcc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001fd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3764      	adds	r7, #100	; 0x64
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	50000100 	.word	0x50000100
 8001fec:	50000400 	.word	0x50000400
 8001ff0:	50000500 	.word	0x50000500
 8001ff4:	50000300 	.word	0x50000300
 8001ff8:	50000700 	.word	0x50000700

08001ffc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002012:	2b00      	cmp	r3, #0
 8002014:	d126      	bne.n	8002064 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800202c:	2b00      	cmp	r3, #0
 800202e:	d115      	bne.n	800205c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002034:	2b00      	cmp	r3, #0
 8002036:	d111      	bne.n	800205c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d105      	bne.n	800205c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f043 0201 	orr.w	r2, r3, #1
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7fe fadf 	bl	8000620 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002062:	e004      	b.n	800206e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	4798      	blx	r3
}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002084:	68f8      	ldr	r0, [r7, #12]
 8002086:	f7fe fae9 	bl	800065c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	f043 0204 	orr.w	r2, r3, #4
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f7fe fd0b 	bl	8000ad4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d108      	bne.n	80020f4 <ADC_Enable+0x2c>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <ADC_Enable+0x2c>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <ADC_Enable+0x2e>
 80020f4:	2300      	movs	r3, #0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d143      	bne.n	8002182 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	4b22      	ldr	r3, [pc, #136]	; (800218c <ADC_Enable+0xc4>)
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00d      	beq.n	8002124 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f043 0210 	orr.w	r2, r3, #16
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e02f      	b.n	8002184 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0201 	orr.w	r2, r2, #1
 8002132:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002134:	f7fe fc94 	bl	8000a60 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800213a:	e01b      	b.n	8002174 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800213c:	f7fe fc90 	bl	8000a60 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d914      	bls.n	8002174 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d00d      	beq.n	8002174 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f043 0210 	orr.w	r2, r3, #16
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	f043 0201 	orr.w	r2, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e007      	b.n	8002184 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d1dc      	bne.n	800213c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	8000003f 	.word	0x8000003f

08002190 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d108      	bne.n	80021bc <ADC_Disable+0x2c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <ADC_Disable+0x2c>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <ADC_Disable+0x2e>
 80021bc:	2300      	movs	r3, #0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d047      	beq.n	8002252 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 030d 	and.w	r3, r3, #13
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d10f      	bne.n	80021f0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0202 	orr.w	r2, r2, #2
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2203      	movs	r2, #3
 80021e6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80021e8:	f7fe fc3a 	bl	8000a60 <HAL_GetTick>
 80021ec:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021ee:	e029      	b.n	8002244 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f043 0210 	orr.w	r2, r3, #16
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	f043 0201 	orr.w	r2, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e023      	b.n	8002254 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800220c:	f7fe fc28 	bl	8000a60 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d914      	bls.n	8002244 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d10d      	bne.n	8002244 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f043 0210 	orr.w	r2, r3, #16
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e007      	b.n	8002254 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b01      	cmp	r3, #1
 8002250:	d0dc      	beq.n	800220c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 809b 	beq.w	80023b8 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002290:	d12a      	bne.n	80022e8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002296:	2b01      	cmp	r3, #1
 8002298:	d126      	bne.n	80022e8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d122      	bne.n	80022e8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 80022a2:	230c      	movs	r3, #12
 80022a4:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80022a6:	e014      	b.n	80022d2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4a46      	ldr	r2, [pc, #280]	; (80023c4 <ADC_ConversionStop+0x168>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d90d      	bls.n	80022cc <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b4:	f043 0210 	orr.w	r2, r3, #16
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	f043 0201 	orr.w	r2, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e076      	b.n	80023ba <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	3301      	adds	r3, #1
 80022d0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d1e3      	bne.n	80022a8 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2240      	movs	r2, #64	; 0x40
 80022e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b60      	cmp	r3, #96	; 0x60
 80022ec:	d015      	beq.n	800231a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d10e      	bne.n	800231a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002306:	2b00      	cmp	r3, #0
 8002308:	d107      	bne.n	800231a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0210 	orr.w	r2, r2, #16
 8002318:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b0c      	cmp	r3, #12
 800231e:	d015      	beq.n	800234c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b08      	cmp	r3, #8
 800232c:	d10e      	bne.n	800234c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002338:	2b00      	cmp	r3, #0
 800233a:	d107      	bne.n	800234c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0220 	orr.w	r2, r2, #32
 800234a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2b60      	cmp	r3, #96	; 0x60
 8002350:	d005      	beq.n	800235e <ADC_ConversionStop+0x102>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b6c      	cmp	r3, #108	; 0x6c
 8002356:	d105      	bne.n	8002364 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002358:	230c      	movs	r3, #12
 800235a:	617b      	str	r3, [r7, #20]
        break;
 800235c:	e005      	b.n	800236a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800235e:	2308      	movs	r3, #8
 8002360:	617b      	str	r3, [r7, #20]
        break;
 8002362:	e002      	b.n	800236a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002364:	2304      	movs	r3, #4
 8002366:	617b      	str	r3, [r7, #20]
        break;
 8002368:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800236a:	f7fe fb79 	bl	8000a60 <HAL_GetTick>
 800236e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002370:	e01b      	b.n	80023aa <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002372:	f7fe fb75 	bl	8000a60 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b0b      	cmp	r3, #11
 800237e:	d914      	bls.n	80023aa <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00d      	beq.n	80023aa <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f043 0210 	orr.w	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f043 0201 	orr.w	r2, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e007      	b.n	80023ba <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1dc      	bne.n	8002372 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	000993ff 	.word	0x000993ff

080023c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e4:	4013      	ands	r3, r2
 80023e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fa:	4a04      	ldr	r2, [pc, #16]	; (800240c <__NVIC_SetPriorityGrouping+0x44>)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	60d3      	str	r3, [r2, #12]
}
 8002400:	bf00      	nop
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002414:	4b04      	ldr	r3, [pc, #16]	; (8002428 <__NVIC_GetPriorityGrouping+0x18>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	f003 0307 	and.w	r3, r3, #7
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	2b00      	cmp	r3, #0
 800243c:	db0b      	blt.n	8002456 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	f003 021f 	and.w	r2, r3, #31
 8002444:	4907      	ldr	r1, [pc, #28]	; (8002464 <__NVIC_EnableIRQ+0x38>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	2001      	movs	r0, #1
 800244e:	fa00 f202 	lsl.w	r2, r0, r2
 8002452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000e100 	.word	0xe000e100

08002468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	2b00      	cmp	r3, #0
 800247a:	db0a      	blt.n	8002492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	b2da      	uxtb	r2, r3
 8002480:	490c      	ldr	r1, [pc, #48]	; (80024b4 <__NVIC_SetPriority+0x4c>)
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	440b      	add	r3, r1
 800248c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002490:	e00a      	b.n	80024a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4908      	ldr	r1, [pc, #32]	; (80024b8 <__NVIC_SetPriority+0x50>)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	3b04      	subs	r3, #4
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	440b      	add	r3, r1
 80024a6:	761a      	strb	r2, [r3, #24]
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000e100 	.word	0xe000e100
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f1c3 0307 	rsb	r3, r3, #7
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	bf28      	it	cs
 80024da:	2304      	movcs	r3, #4
 80024dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3304      	adds	r3, #4
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d902      	bls.n	80024ec <NVIC_EncodePriority+0x30>
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3b03      	subs	r3, #3
 80024ea:	e000      	b.n	80024ee <NVIC_EncodePriority+0x32>
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f0:	f04f 32ff 	mov.w	r2, #4294967295
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43da      	mvns	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	401a      	ands	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002504:	f04f 31ff 	mov.w	r1, #4294967295
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	43d9      	mvns	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	4313      	orrs	r3, r2
         );
}
 8002516:	4618      	mov	r0, r3
 8002518:	3724      	adds	r7, #36	; 0x24
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3b01      	subs	r3, #1
 8002530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002534:	d301      	bcc.n	800253a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002536:	2301      	movs	r3, #1
 8002538:	e00f      	b.n	800255a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253a:	4a0a      	ldr	r2, [pc, #40]	; (8002564 <SysTick_Config+0x40>)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3b01      	subs	r3, #1
 8002540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002542:	210f      	movs	r1, #15
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	f7ff ff8e 	bl	8002468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <SysTick_Config+0x40>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002552:	4b04      	ldr	r3, [pc, #16]	; (8002564 <SysTick_Config+0x40>)
 8002554:	2207      	movs	r2, #7
 8002556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	e000e010 	.word	0xe000e010

08002568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff29 	bl	80023c8 <__NVIC_SetPriorityGrouping>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b086      	sub	sp, #24
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002590:	f7ff ff3e 	bl	8002410 <__NVIC_GetPriorityGrouping>
 8002594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	6978      	ldr	r0, [r7, #20]
 800259c:	f7ff ff8e 	bl	80024bc <NVIC_EncodePriority>
 80025a0:	4602      	mov	r2, r0
 80025a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff5d 	bl	8002468 <__NVIC_SetPriority>
}
 80025ae:	bf00      	nop
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff31 	bl	800242c <__NVIC_EnableIRQ>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ffa2 	bl	8002524 <SysTick_Config>
 80025e0:	4603      	mov	r3, r0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e037      	b.n	8002670 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002616:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800261a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002624:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f9b8 	bl	80029c8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}  
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
 8002684:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_DMA_Start_IT+0x20>
 8002694:	2302      	movs	r3, #2
 8002696:	e04a      	b.n	800272e <HAL_DMA_Start_IT+0xb6>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d13a      	bne.n	8002720 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2202      	movs	r2, #2
 80026ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f94b 	bl	800296a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 020e 	orr.w	r2, r2, #14
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e00f      	b.n	800270e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 020a 	orr.w	r2, r2, #10
 80026fc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0204 	bic.w	r2, r2, #4
 800270c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0201 	orr.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	e005      	b.n	800272c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002728:	2302      	movs	r3, #2
 800272a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800272c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002744:	2b02      	cmp	r3, #2
 8002746:	d008      	beq.n	800275a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2204      	movs	r2, #4
 800274c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e020      	b.n	800279c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 020e 	bic.w	r2, r2, #14
 8002768:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002782:	2101      	movs	r1, #1
 8002784:	fa01 f202 	lsl.w	r2, r1, r2
 8002788:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d005      	beq.n	80027ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2204      	movs	r2, #4
 80027c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	e027      	b.n	800281a <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 020e 	bic.w	r2, r2, #14
 80027d8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0201 	bic.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	2101      	movs	r1, #1
 80027f4:	fa01 f202 	lsl.w	r2, r1, r2
 80027f8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
    } 
  }
  return status;
 800281a:	7bfb      	ldrb	r3, [r7, #15]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	2204      	movs	r2, #4
 8002842:	409a      	lsls	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d024      	beq.n	8002896 <HAL_DMA_IRQHandler+0x72>
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01f      	beq.n	8002896 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b00      	cmp	r3, #0
 8002862:	d107      	bne.n	8002874 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0204 	bic.w	r2, r2, #4
 8002872:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287c:	2104      	movs	r1, #4
 800287e:	fa01 f202 	lsl.w	r2, r1, r2
 8002882:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d06a      	beq.n	8002962 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002894:	e065      	b.n	8002962 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2202      	movs	r2, #2
 800289c:	409a      	lsls	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d02c      	beq.n	8002900 <HAL_DMA_IRQHandler+0xdc>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d027      	beq.n	8002900 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0320 	and.w	r3, r3, #32
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10b      	bne.n	80028d6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 020a 	bic.w	r2, r2, #10
 80028cc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028de:	2102      	movs	r1, #2
 80028e0:	fa01 f202 	lsl.w	r2, r1, r2
 80028e4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d035      	beq.n	8002962 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80028fe:	e030      	b.n	8002962 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	2208      	movs	r2, #8
 8002906:	409a      	lsls	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d028      	beq.n	8002962 <HAL_DMA_IRQHandler+0x13e>
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d023      	beq.n	8002962 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 020e 	bic.w	r2, r2, #14
 8002928:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f202 	lsl.w	r2, r1, r2
 8002938:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	2b00      	cmp	r3, #0
 8002956:	d004      	beq.n	8002962 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
    }
  }
}  
 8002960:	e7ff      	b.n	8002962 <HAL_DMA_IRQHandler+0x13e>
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800296a:	b480      	push	{r7}
 800296c:	b085      	sub	sp, #20
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002980:	2101      	movs	r1, #1
 8002982:	fa01 f202 	lsl.w	r2, r1, r2
 8002986:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b10      	cmp	r3, #16
 8002996:	d108      	bne.n	80029aa <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029a8:	e007      	b.n	80029ba <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	60da      	str	r2, [r3, #12]
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <DMA_CalcBaseAndBitshift+0x60>)
 80029d8:	429a      	cmp	r2, r3
 80029da:	d80f      	bhi.n	80029fc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <DMA_CalcBaseAndBitshift+0x64>)
 80029e4:	4413      	add	r3, r2
 80029e6:	4a12      	ldr	r2, [pc, #72]	; (8002a30 <DMA_CalcBaseAndBitshift+0x68>)
 80029e8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	009a      	lsls	r2, r3, #2
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a0f      	ldr	r2, [pc, #60]	; (8002a34 <DMA_CalcBaseAndBitshift+0x6c>)
 80029f8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80029fa:	e00e      	b.n	8002a1a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <DMA_CalcBaseAndBitshift+0x70>)
 8002a04:	4413      	add	r3, r2
 8002a06:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <DMA_CalcBaseAndBitshift+0x68>)
 8002a08:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	009a      	lsls	r2, r3, #2
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a09      	ldr	r2, [pc, #36]	; (8002a3c <DMA_CalcBaseAndBitshift+0x74>)
 8002a18:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40020407 	.word	0x40020407
 8002a2c:	bffdfff8 	.word	0xbffdfff8
 8002a30:	cccccccd 	.word	0xcccccccd
 8002a34:	40020000 	.word	0x40020000
 8002a38:	bffdfbf8 	.word	0xbffdfbf8
 8002a3c:	40020400 	.word	0x40020400

08002a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a4e:	e160      	b.n	8002d12 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	2101      	movs	r1, #1
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 8152 	beq.w	8002d0c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d005      	beq.n	8002a80 <HAL_GPIO_Init+0x40>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d130      	bne.n	8002ae2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	091b      	lsrs	r3, r3, #4
 8002acc:	f003 0201 	and.w	r2, r3, #1
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d017      	beq.n	8002b1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	2203      	movs	r2, #3
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d123      	bne.n	8002b72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	08da      	lsrs	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3208      	adds	r2, #8
 8002b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	220f      	movs	r2, #15
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	691a      	ldr	r2, [r3, #16]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	08da      	lsrs	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3208      	adds	r2, #8
 8002b6c:	6939      	ldr	r1, [r7, #16]
 8002b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 0203 	and.w	r2, r3, #3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 80ac 	beq.w	8002d0c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb4:	4b5e      	ldr	r3, [pc, #376]	; (8002d30 <HAL_GPIO_Init+0x2f0>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	4a5d      	ldr	r2, [pc, #372]	; (8002d30 <HAL_GPIO_Init+0x2f0>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6193      	str	r3, [r2, #24]
 8002bc0:	4b5b      	ldr	r3, [pc, #364]	; (8002d30 <HAL_GPIO_Init+0x2f0>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bcc:	4a59      	ldr	r2, [pc, #356]	; (8002d34 <HAL_GPIO_Init+0x2f4>)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bf6:	d025      	beq.n	8002c44 <HAL_GPIO_Init+0x204>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a4f      	ldr	r2, [pc, #316]	; (8002d38 <HAL_GPIO_Init+0x2f8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d01f      	beq.n	8002c40 <HAL_GPIO_Init+0x200>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a4e      	ldr	r2, [pc, #312]	; (8002d3c <HAL_GPIO_Init+0x2fc>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d019      	beq.n	8002c3c <HAL_GPIO_Init+0x1fc>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a4d      	ldr	r2, [pc, #308]	; (8002d40 <HAL_GPIO_Init+0x300>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d013      	beq.n	8002c38 <HAL_GPIO_Init+0x1f8>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a4c      	ldr	r2, [pc, #304]	; (8002d44 <HAL_GPIO_Init+0x304>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00d      	beq.n	8002c34 <HAL_GPIO_Init+0x1f4>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a4b      	ldr	r2, [pc, #300]	; (8002d48 <HAL_GPIO_Init+0x308>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d007      	beq.n	8002c30 <HAL_GPIO_Init+0x1f0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a4a      	ldr	r2, [pc, #296]	; (8002d4c <HAL_GPIO_Init+0x30c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_GPIO_Init+0x1ec>
 8002c28:	2306      	movs	r3, #6
 8002c2a:	e00c      	b.n	8002c46 <HAL_GPIO_Init+0x206>
 8002c2c:	2307      	movs	r3, #7
 8002c2e:	e00a      	b.n	8002c46 <HAL_GPIO_Init+0x206>
 8002c30:	2305      	movs	r3, #5
 8002c32:	e008      	b.n	8002c46 <HAL_GPIO_Init+0x206>
 8002c34:	2304      	movs	r3, #4
 8002c36:	e006      	b.n	8002c46 <HAL_GPIO_Init+0x206>
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e004      	b.n	8002c46 <HAL_GPIO_Init+0x206>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e002      	b.n	8002c46 <HAL_GPIO_Init+0x206>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_GPIO_Init+0x206>
 8002c44:	2300      	movs	r3, #0
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	f002 0203 	and.w	r2, r2, #3
 8002c4c:	0092      	lsls	r2, r2, #2
 8002c4e:	4093      	lsls	r3, r2
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c56:	4937      	ldr	r1, [pc, #220]	; (8002d34 <HAL_GPIO_Init+0x2f4>)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	089b      	lsrs	r3, r3, #2
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c64:	4b3a      	ldr	r3, [pc, #232]	; (8002d50 <HAL_GPIO_Init+0x310>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c88:	4a31      	ldr	r2, [pc, #196]	; (8002d50 <HAL_GPIO_Init+0x310>)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c8e:	4b30      	ldr	r3, [pc, #192]	; (8002d50 <HAL_GPIO_Init+0x310>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cb2:	4a27      	ldr	r2, [pc, #156]	; (8002d50 <HAL_GPIO_Init+0x310>)
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cb8:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <HAL_GPIO_Init+0x310>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cdc:	4a1c      	ldr	r2, [pc, #112]	; (8002d50 <HAL_GPIO_Init+0x310>)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <HAL_GPIO_Init+0x310>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d06:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <HAL_GPIO_Init+0x310>)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f47f ae97 	bne.w	8002a50 <HAL_GPIO_Init+0x10>
  }
}
 8002d22:	bf00      	nop
 8002d24:	bf00      	nop
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40010000 	.word	0x40010000
 8002d38:	48000400 	.word	0x48000400
 8002d3c:	48000800 	.word	0x48000800
 8002d40:	48000c00 	.word	0x48000c00
 8002d44:	48001000 	.word	0x48001000
 8002d48:	48001400 	.word	0x48001400
 8002d4c:	48001800 	.word	0x48001800
 8002d50:	40010400 	.word	0x40010400

08002d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d70:	e002      	b.n	8002d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	041a      	lsls	r2, r3, #16
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	43d9      	mvns	r1, r3
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	400b      	ands	r3, r1
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	619a      	str	r2, [r3, #24]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	1d3b      	adds	r3, r7, #4
 8002dc2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f000 bf01 	b.w	8003bd4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 8160 	beq.w	80030a2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002de2:	4bae      	ldr	r3, [pc, #696]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d00c      	beq.n	8002e08 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dee:	4bab      	ldr	r3, [pc, #684]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d159      	bne.n	8002eae <HAL_RCC_OscConfig+0xf6>
 8002dfa:	4ba8      	ldr	r3, [pc, #672]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e06:	d152      	bne.n	8002eae <HAL_RCC_OscConfig+0xf6>
 8002e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e0c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e1c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	fab3 f383 	clz	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d102      	bne.n	8002e3a <HAL_RCC_OscConfig+0x82>
 8002e34:	4b99      	ldr	r3, [pc, #612]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	e015      	b.n	8002e66 <HAL_RCC_OscConfig+0xae>
 8002e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e3e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002e4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e52:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002e56:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002e62:	4b8e      	ldr	r3, [pc, #568]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e6a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002e6e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002e72:	fa92 f2a2 	rbit	r2, r2
 8002e76:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002e7a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002e7e:	fab2 f282 	clz	r2, r2
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	f042 0220 	orr.w	r2, r2, #32
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	f002 021f 	and.w	r2, r2, #31
 8002e8e:	2101      	movs	r1, #1
 8002e90:	fa01 f202 	lsl.w	r2, r1, r2
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 8102 	beq.w	80030a0 <HAL_RCC_OscConfig+0x2e8>
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f040 80fc 	bne.w	80030a0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f000 be93 	b.w	8003bd4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb8:	d106      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x110>
 8002eba:	4b78      	ldr	r3, [pc, #480]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a77      	ldr	r2, [pc, #476]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	e030      	b.n	8002f2a <HAL_RCC_OscConfig+0x172>
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x134>
 8002ed2:	4b72      	ldr	r3, [pc, #456]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a71      	ldr	r2, [pc, #452]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	4b6f      	ldr	r3, [pc, #444]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a6e      	ldr	r2, [pc, #440]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002ee4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	e01e      	b.n	8002f2a <HAL_RCC_OscConfig+0x172>
 8002eec:	1d3b      	adds	r3, r7, #4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef6:	d10c      	bne.n	8002f12 <HAL_RCC_OscConfig+0x15a>
 8002ef8:	4b68      	ldr	r3, [pc, #416]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a67      	ldr	r2, [pc, #412]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002efe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	4b65      	ldr	r3, [pc, #404]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a64      	ldr	r2, [pc, #400]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	e00b      	b.n	8002f2a <HAL_RCC_OscConfig+0x172>
 8002f12:	4b62      	ldr	r3, [pc, #392]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a61      	ldr	r2, [pc, #388]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b5f      	ldr	r3, [pc, #380]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a5e      	ldr	r2, [pc, #376]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f28:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d059      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fd fd94 	bl	8000a60 <HAL_GetTick>
 8002f38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3e:	f7fd fd8f 	bl	8000a60 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d902      	bls.n	8002f54 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	f000 be40 	b.w	8003bd4 <HAL_RCC_OscConfig+0xe1c>
 8002f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f58:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002f68:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d102      	bne.n	8002f86 <HAL_RCC_OscConfig+0x1ce>
 8002f80:	4b46      	ldr	r3, [pc, #280]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	e015      	b.n	8002fb2 <HAL_RCC_OscConfig+0x1fa>
 8002f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f8a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f9e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002fa2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002fae:	4b3b      	ldr	r3, [pc, #236]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fb6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002fba:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002fbe:	fa92 f2a2 	rbit	r2, r2
 8002fc2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002fc6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002fca:	fab2 f282 	clz	r2, r2
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	f042 0220 	orr.w	r2, r2, #32
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	f002 021f 	and.w	r2, r2, #31
 8002fda:	2101      	movs	r1, #1
 8002fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0ab      	beq.n	8002f3e <HAL_RCC_OscConfig+0x186>
 8002fe6:	e05c      	b.n	80030a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fd fd3a 	bl	8000a60 <HAL_GetTick>
 8002fec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff2:	f7fd fd35 	bl	8000a60 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d902      	bls.n	8003008 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	f000 bde6 	b.w	8003bd4 <HAL_RCC_OscConfig+0xe1c>
 8003008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800300c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003014:	fa93 f3a3 	rbit	r3, r3
 8003018:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800301c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003020:	fab3 f383 	clz	r3, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d102      	bne.n	800303a <HAL_RCC_OscConfig+0x282>
 8003034:	4b19      	ldr	r3, [pc, #100]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	e015      	b.n	8003066 <HAL_RCC_OscConfig+0x2ae>
 800303a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800303e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800304e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003052:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003056:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003062:	4b0e      	ldr	r3, [pc, #56]	; (800309c <HAL_RCC_OscConfig+0x2e4>)
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800306a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800306e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003072:	fa92 f2a2 	rbit	r2, r2
 8003076:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800307a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800307e:	fab2 f282 	clz	r2, r2
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	f042 0220 	orr.w	r2, r2, #32
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	f002 021f 	and.w	r2, r2, #31
 800308e:	2101      	movs	r1, #1
 8003090:	fa01 f202 	lsl.w	r2, r1, r2
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1ab      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x23a>
 800309a:	e002      	b.n	80030a2 <HAL_RCC_OscConfig+0x2ea>
 800309c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8170 	beq.w	8003392 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80030b2:	4bd0      	ldr	r3, [pc, #832]	; (80033f4 <HAL_RCC_OscConfig+0x63c>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 030c 	and.w	r3, r3, #12
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00c      	beq.n	80030d8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030be:	4bcd      	ldr	r3, [pc, #820]	; (80033f4 <HAL_RCC_OscConfig+0x63c>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d16d      	bne.n	80031a6 <HAL_RCC_OscConfig+0x3ee>
 80030ca:	4bca      	ldr	r3, [pc, #808]	; (80033f4 <HAL_RCC_OscConfig+0x63c>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80030d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d6:	d166      	bne.n	80031a6 <HAL_RCC_OscConfig+0x3ee>
 80030d8:	2302      	movs	r3, #2
 80030da:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80030e2:	fa93 f3a3 	rbit	r3, r3
 80030e6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80030ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	095b      	lsrs	r3, r3, #5
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d102      	bne.n	8003108 <HAL_RCC_OscConfig+0x350>
 8003102:	4bbc      	ldr	r3, [pc, #752]	; (80033f4 <HAL_RCC_OscConfig+0x63c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	e013      	b.n	8003130 <HAL_RCC_OscConfig+0x378>
 8003108:	2302      	movs	r3, #2
 800310a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800311a:	2302      	movs	r3, #2
 800311c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003120:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800312c:	4bb1      	ldr	r3, [pc, #708]	; (80033f4 <HAL_RCC_OscConfig+0x63c>)
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2202      	movs	r2, #2
 8003132:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003136:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800313a:	fa92 f2a2 	rbit	r2, r2
 800313e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003142:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003146:	fab2 f282 	clz	r2, r2
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	f042 0220 	orr.w	r2, r2, #32
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	f002 021f 	and.w	r2, r2, #31
 8003156:	2101      	movs	r1, #1
 8003158:	fa01 f202 	lsl.w	r2, r1, r2
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_RCC_OscConfig+0x3ba>
 8003162:	1d3b      	adds	r3, r7, #4
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d002      	beq.n	8003172 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	f000 bd31 	b.w	8003bd4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003172:	4ba0      	ldr	r3, [pc, #640]	; (80033f4 <HAL_RCC_OscConfig+0x63c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800317a:	1d3b      	adds	r3, r7, #4
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	21f8      	movs	r1, #248	; 0xf8
 8003182:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800318a:	fa91 f1a1 	rbit	r1, r1
 800318e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003192:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003196:	fab1 f181 	clz	r1, r1
 800319a:	b2c9      	uxtb	r1, r1
 800319c:	408b      	lsls	r3, r1
 800319e:	4995      	ldr	r1, [pc, #596]	; (80033f4 <HAL_RCC_OscConfig+0x63c>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a4:	e0f5      	b.n	8003392 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031a6:	1d3b      	adds	r3, r7, #4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8085 	beq.w	80032bc <HAL_RCC_OscConfig+0x504>
 80031b2:	2301      	movs	r3, #1
 80031b4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80031c4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c8:	fab3 f383 	clz	r3, r3
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031d2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	461a      	mov	r2, r3
 80031da:	2301      	movs	r3, #1
 80031dc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7fd fc3f 	bl	8000a60 <HAL_GetTick>
 80031e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031e8:	f7fd fc3a 	bl	8000a60 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d902      	bls.n	80031fe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	f000 bceb 	b.w	8003bd4 <HAL_RCC_OscConfig+0xe1c>
 80031fe:	2302      	movs	r3, #2
 8003200:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003210:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	d102      	bne.n	800322e <HAL_RCC_OscConfig+0x476>
 8003228:	4b72      	ldr	r3, [pc, #456]	; (80033f4 <HAL_RCC_OscConfig+0x63c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	e013      	b.n	8003256 <HAL_RCC_OscConfig+0x49e>
 800322e:	2302      	movs	r3, #2
 8003230:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003238:	fa93 f3a3 	rbit	r3, r3
 800323c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003240:	2302      	movs	r3, #2
 8003242:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003246:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800324a:	fa93 f3a3 	rbit	r3, r3
 800324e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003252:	4b68      	ldr	r3, [pc, #416]	; (80033f4 <HAL_RCC_OscConfig+0x63c>)
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	2202      	movs	r2, #2
 8003258:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800325c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003260:	fa92 f2a2 	rbit	r2, r2
 8003264:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003268:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800326c:	fab2 f282 	clz	r2, r2
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	f042 0220 	orr.w	r2, r2, #32
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	f002 021f 	and.w	r2, r2, #31
 800327c:	2101      	movs	r1, #1
 800327e:	fa01 f202 	lsl.w	r2, r1, r2
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0af      	beq.n	80031e8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003288:	4b5a      	ldr	r3, [pc, #360]	; (80033f4 <HAL_RCC_OscConfig+0x63c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003290:	1d3b      	adds	r3, r7, #4
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	21f8      	movs	r1, #248	; 0xf8
 8003298:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80032a0:	fa91 f1a1 	rbit	r1, r1
 80032a4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80032a8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80032ac:	fab1 f181 	clz	r1, r1
 80032b0:	b2c9      	uxtb	r1, r1
 80032b2:	408b      	lsls	r3, r1
 80032b4:	494f      	ldr	r1, [pc, #316]	; (80033f4 <HAL_RCC_OscConfig+0x63c>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]
 80032ba:	e06a      	b.n	8003392 <HAL_RCC_OscConfig+0x5da>
 80032bc:	2301      	movs	r3, #1
 80032be:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80032ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	461a      	mov	r2, r3
 80032e4:	2300      	movs	r3, #0
 80032e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7fd fbba 	bl	8000a60 <HAL_GetTick>
 80032ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f0:	e00a      	b.n	8003308 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f2:	f7fd fbb5 	bl	8000a60 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d902      	bls.n	8003308 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	f000 bc66 	b.w	8003bd4 <HAL_RCC_OscConfig+0xe1c>
 8003308:	2302      	movs	r3, #2
 800330a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800331a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331e:	fab3 f383 	clz	r3, r3
 8003322:	b2db      	uxtb	r3, r3
 8003324:	095b      	lsrs	r3, r3, #5
 8003326:	b2db      	uxtb	r3, r3
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d102      	bne.n	8003338 <HAL_RCC_OscConfig+0x580>
 8003332:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <HAL_RCC_OscConfig+0x63c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	e013      	b.n	8003360 <HAL_RCC_OscConfig+0x5a8>
 8003338:	2302      	movs	r3, #2
 800333a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800334a:	2302      	movs	r3, #2
 800334c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003350:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800335c:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <HAL_RCC_OscConfig+0x63c>)
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	2202      	movs	r2, #2
 8003362:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003366:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800336a:	fa92 f2a2 	rbit	r2, r2
 800336e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003372:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003376:	fab2 f282 	clz	r2, r2
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	f042 0220 	orr.w	r2, r2, #32
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	f002 021f 	and.w	r2, r2, #31
 8003386:	2101      	movs	r1, #1
 8003388:	fa01 f202 	lsl.w	r2, r1, r2
 800338c:	4013      	ands	r3, r2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1af      	bne.n	80032f2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 80da 	beq.w	8003556 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033a2:	1d3b      	adds	r3, r7, #4
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d069      	beq.n	8003480 <HAL_RCC_OscConfig+0x6c8>
 80033ac:	2301      	movs	r3, #1
 80033ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80033be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_OscConfig+0x640>)
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	461a      	mov	r2, r3
 80033d2:	2301      	movs	r3, #1
 80033d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d6:	f7fd fb43 	bl	8000a60 <HAL_GetTick>
 80033da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	e00d      	b.n	80033fc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e0:	f7fd fb3e 	bl	8000a60 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d905      	bls.n	80033fc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e3ef      	b.n	8003bd4 <HAL_RCC_OscConfig+0xe1c>
 80033f4:	40021000 	.word	0x40021000
 80033f8:	10908120 	.word	0x10908120
 80033fc:	2302      	movs	r3, #2
 80033fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003406:	fa93 f2a3 	rbit	r2, r3
 800340a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003414:	2202      	movs	r2, #2
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	fa93 f2a3 	rbit	r2, r3
 8003422:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800342c:	2202      	movs	r2, #2
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	fa93 f2a3 	rbit	r2, r3
 800343a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800343e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003440:	4ba4      	ldr	r3, [pc, #656]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 8003442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003444:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003448:	2102      	movs	r1, #2
 800344a:	6019      	str	r1, [r3, #0]
 800344c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fa93 f1a3 	rbit	r1, r3
 8003456:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800345a:	6019      	str	r1, [r3, #0]
  return result;
 800345c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	2101      	movs	r1, #1
 8003474:	fa01 f303 	lsl.w	r3, r1, r3
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0b0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x628>
 800347e:	e06a      	b.n	8003556 <HAL_RCC_OscConfig+0x79e>
 8003480:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003488:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	fa93 f2a3 	rbit	r2, r3
 8003492:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003496:	601a      	str	r2, [r3, #0]
  return result;
 8003498:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800349c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	4b8c      	ldr	r3, [pc, #560]	; (80036d8 <HAL_RCC_OscConfig+0x920>)
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	461a      	mov	r2, r3
 80034ae:	2300      	movs	r3, #0
 80034b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b2:	f7fd fad5 	bl	8000a60 <HAL_GetTick>
 80034b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ba:	e009      	b.n	80034d0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034bc:	f7fd fad0 	bl	8000a60 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e381      	b.n	8003bd4 <HAL_RCC_OscConfig+0xe1c>
 80034d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80034d4:	2202      	movs	r2, #2
 80034d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	fa93 f2a3 	rbit	r2, r3
 80034e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80034ec:	2202      	movs	r2, #2
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	fa93 f2a3 	rbit	r2, r3
 80034fa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003504:	2202      	movs	r2, #2
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	fa93 f2a3 	rbit	r2, r3
 8003512:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003516:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003518:	4b6e      	ldr	r3, [pc, #440]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 800351a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800351c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003520:	2102      	movs	r1, #2
 8003522:	6019      	str	r1, [r3, #0]
 8003524:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	fa93 f1a3 	rbit	r1, r3
 800352e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003532:	6019      	str	r1, [r3, #0]
  return result;
 8003534:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	2101      	movs	r1, #1
 800354c:	fa01 f303 	lsl.w	r3, r1, r3
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1b2      	bne.n	80034bc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003556:	1d3b      	adds	r3, r7, #4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8157 	beq.w	8003814 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003566:	2300      	movs	r3, #0
 8003568:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800356c:	4b59      	ldr	r3, [pc, #356]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d112      	bne.n	800359e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003578:	4b56      	ldr	r3, [pc, #344]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 800357a:	69db      	ldr	r3, [r3, #28]
 800357c:	4a55      	ldr	r2, [pc, #340]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 800357e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003582:	61d3      	str	r3, [r2, #28]
 8003584:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800358c:	f107 030c 	add.w	r3, r7, #12
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	f107 030c 	add.w	r3, r7, #12
 8003596:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003598:	2301      	movs	r3, #1
 800359a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359e:	4b4f      	ldr	r3, [pc, #316]	; (80036dc <HAL_RCC_OscConfig+0x924>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d11a      	bne.n	80035e0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035aa:	4b4c      	ldr	r3, [pc, #304]	; (80036dc <HAL_RCC_OscConfig+0x924>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a4b      	ldr	r2, [pc, #300]	; (80036dc <HAL_RCC_OscConfig+0x924>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b6:	f7fd fa53 	bl	8000a60 <HAL_GetTick>
 80035ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035be:	e009      	b.n	80035d4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c0:	f7fd fa4e 	bl	8000a60 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b64      	cmp	r3, #100	; 0x64
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e2ff      	b.n	8003bd4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	4b41      	ldr	r3, [pc, #260]	; (80036dc <HAL_RCC_OscConfig+0x924>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0ef      	beq.n	80035c0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e0:	1d3b      	adds	r3, r7, #4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_OscConfig+0x840>
 80035ea:	4b3a      	ldr	r3, [pc, #232]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4a39      	ldr	r2, [pc, #228]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6213      	str	r3, [r2, #32]
 80035f6:	e02f      	b.n	8003658 <HAL_RCC_OscConfig+0x8a0>
 80035f8:	1d3b      	adds	r3, r7, #4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10c      	bne.n	800361c <HAL_RCC_OscConfig+0x864>
 8003602:	4b34      	ldr	r3, [pc, #208]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	4a33      	ldr	r2, [pc, #204]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	6213      	str	r3, [r2, #32]
 800360e:	4b31      	ldr	r3, [pc, #196]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	4a30      	ldr	r2, [pc, #192]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 8003614:	f023 0304 	bic.w	r3, r3, #4
 8003618:	6213      	str	r3, [r2, #32]
 800361a:	e01d      	b.n	8003658 <HAL_RCC_OscConfig+0x8a0>
 800361c:	1d3b      	adds	r3, r7, #4
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b05      	cmp	r3, #5
 8003624:	d10c      	bne.n	8003640 <HAL_RCC_OscConfig+0x888>
 8003626:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	4a2a      	ldr	r2, [pc, #168]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 800362c:	f043 0304 	orr.w	r3, r3, #4
 8003630:	6213      	str	r3, [r2, #32]
 8003632:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4a27      	ldr	r2, [pc, #156]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	6213      	str	r3, [r2, #32]
 800363e:	e00b      	b.n	8003658 <HAL_RCC_OscConfig+0x8a0>
 8003640:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	4a23      	ldr	r2, [pc, #140]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 8003646:	f023 0301 	bic.w	r3, r3, #1
 800364a:	6213      	str	r3, [r2, #32]
 800364c:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4a20      	ldr	r2, [pc, #128]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 8003652:	f023 0304 	bic.w	r3, r3, #4
 8003656:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003658:	1d3b      	adds	r3, r7, #4
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d06a      	beq.n	8003738 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003662:	f7fd f9fd 	bl	8000a60 <HAL_GetTick>
 8003666:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366a:	e00b      	b.n	8003684 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fd f9f8 	bl	8000a60 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	; 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e2a7      	b.n	8003bd4 <HAL_RCC_OscConfig+0xe1c>
 8003684:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003688:	2202      	movs	r2, #2
 800368a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	fa93 f2a3 	rbit	r2, r3
 8003696:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80036a0:	2202      	movs	r2, #2
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	fa93 f2a3 	rbit	r2, r3
 80036ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80036b2:	601a      	str	r2, [r3, #0]
  return result;
 80036b4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80036b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ba:	fab3 f383 	clz	r3, r3
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	095b      	lsrs	r3, r3, #5
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f043 0302 	orr.w	r3, r3, #2
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d108      	bne.n	80036e0 <HAL_RCC_OscConfig+0x928>
 80036ce:	4b01      	ldr	r3, [pc, #4]	; (80036d4 <HAL_RCC_OscConfig+0x91c>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	e013      	b.n	80036fc <HAL_RCC_OscConfig+0x944>
 80036d4:	40021000 	.word	0x40021000
 80036d8:	10908120 	.word	0x10908120
 80036dc:	40007000 	.word	0x40007000
 80036e0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80036e4:	2202      	movs	r2, #2
 80036e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	fa93 f2a3 	rbit	r2, r3
 80036f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	4bc0      	ldr	r3, [pc, #768]	; (80039fc <HAL_RCC_OscConfig+0xc44>)
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003700:	2102      	movs	r1, #2
 8003702:	6011      	str	r1, [r2, #0]
 8003704:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003708:	6812      	ldr	r2, [r2, #0]
 800370a:	fa92 f1a2 	rbit	r1, r2
 800370e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003712:	6011      	str	r1, [r2, #0]
  return result;
 8003714:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	fab2 f282 	clz	r2, r2
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	f002 021f 	and.w	r2, r2, #31
 800372a:	2101      	movs	r1, #1
 800372c:	fa01 f202 	lsl.w	r2, r1, r2
 8003730:	4013      	ands	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d09a      	beq.n	800366c <HAL_RCC_OscConfig+0x8b4>
 8003736:	e063      	b.n	8003800 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003738:	f7fd f992 	bl	8000a60 <HAL_GetTick>
 800373c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003740:	e00b      	b.n	800375a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fd f98d 	bl	8000a60 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e23c      	b.n	8003bd4 <HAL_RCC_OscConfig+0xe1c>
 800375a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800375e:	2202      	movs	r2, #2
 8003760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	fa93 f2a3 	rbit	r2, r3
 800376c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003776:	2202      	movs	r2, #2
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	fa93 f2a3 	rbit	r2, r3
 8003784:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003788:	601a      	str	r2, [r3, #0]
  return result;
 800378a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800378e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003790:	fab3 f383 	clz	r3, r3
 8003794:	b2db      	uxtb	r3, r3
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f043 0302 	orr.w	r3, r3, #2
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d102      	bne.n	80037aa <HAL_RCC_OscConfig+0x9f2>
 80037a4:	4b95      	ldr	r3, [pc, #596]	; (80039fc <HAL_RCC_OscConfig+0xc44>)
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	e00d      	b.n	80037c6 <HAL_RCC_OscConfig+0xa0e>
 80037aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80037ae:	2202      	movs	r2, #2
 80037b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	fa93 f2a3 	rbit	r2, r3
 80037bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	4b8e      	ldr	r3, [pc, #568]	; (80039fc <HAL_RCC_OscConfig+0xc44>)
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80037ca:	2102      	movs	r1, #2
 80037cc:	6011      	str	r1, [r2, #0]
 80037ce:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	fa92 f1a2 	rbit	r1, r2
 80037d8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80037dc:	6011      	str	r1, [r2, #0]
  return result;
 80037de:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	fab2 f282 	clz	r2, r2
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	f002 021f 	and.w	r2, r2, #31
 80037f4:	2101      	movs	r1, #1
 80037f6:	fa01 f202 	lsl.w	r2, r1, r2
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1a0      	bne.n	8003742 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003800:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003804:	2b01      	cmp	r3, #1
 8003806:	d105      	bne.n	8003814 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003808:	4b7c      	ldr	r3, [pc, #496]	; (80039fc <HAL_RCC_OscConfig+0xc44>)
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	4a7b      	ldr	r2, [pc, #492]	; (80039fc <HAL_RCC_OscConfig+0xc44>)
 800380e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003812:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003814:	1d3b      	adds	r3, r7, #4
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 81d9 	beq.w	8003bd2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003820:	4b76      	ldr	r3, [pc, #472]	; (80039fc <HAL_RCC_OscConfig+0xc44>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b08      	cmp	r3, #8
 800382a:	f000 81a6 	beq.w	8003b7a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800382e:	1d3b      	adds	r3, r7, #4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2b02      	cmp	r3, #2
 8003836:	f040 811e 	bne.w	8003a76 <HAL_RCC_OscConfig+0xcbe>
 800383a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800383e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	fa93 f2a3 	rbit	r2, r3
 800384e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003852:	601a      	str	r2, [r3, #0]
  return result;
 8003854:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003858:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003864:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	461a      	mov	r2, r3
 800386c:	2300      	movs	r3, #0
 800386e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fd f8f6 	bl	8000a60 <HAL_GetTick>
 8003874:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003878:	e009      	b.n	800388e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800387a:	f7fd f8f1 	bl	8000a60 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e1a2      	b.n	8003bd4 <HAL_RCC_OscConfig+0xe1c>
 800388e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003892:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	fa93 f2a3 	rbit	r2, r3
 80038a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80038a6:	601a      	str	r2, [r3, #0]
  return result;
 80038a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80038ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	095b      	lsrs	r3, r3, #5
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d102      	bne.n	80038c8 <HAL_RCC_OscConfig+0xb10>
 80038c2:	4b4e      	ldr	r3, [pc, #312]	; (80039fc <HAL_RCC_OscConfig+0xc44>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	e01b      	b.n	8003900 <HAL_RCC_OscConfig+0xb48>
 80038c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	fa93 f2a3 	rbit	r2, r3
 80038dc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80038e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	fa93 f2a3 	rbit	r2, r3
 80038f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	4b3f      	ldr	r3, [pc, #252]	; (80039fc <HAL_RCC_OscConfig+0xc44>)
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003904:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003908:	6011      	str	r1, [r2, #0]
 800390a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	fa92 f1a2 	rbit	r1, r2
 8003914:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003918:	6011      	str	r1, [r2, #0]
  return result;
 800391a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	fab2 f282 	clz	r2, r2
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	f042 0220 	orr.w	r2, r2, #32
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	f002 021f 	and.w	r2, r2, #31
 8003930:	2101      	movs	r1, #1
 8003932:	fa01 f202 	lsl.w	r2, r1, r2
 8003936:	4013      	ands	r3, r2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d19e      	bne.n	800387a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800393c:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <HAL_RCC_OscConfig+0xc44>)
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	f023 020f 	bic.w	r2, r3, #15
 8003944:	1d3b      	adds	r3, r7, #4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	492c      	ldr	r1, [pc, #176]	; (80039fc <HAL_RCC_OscConfig+0xc44>)
 800394c:	4313      	orrs	r3, r2
 800394e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003950:	4b2a      	ldr	r3, [pc, #168]	; (80039fc <HAL_RCC_OscConfig+0xc44>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003958:	1d3b      	adds	r3, r7, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6a19      	ldr	r1, [r3, #32]
 800395e:	1d3b      	adds	r3, r7, #4
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	430b      	orrs	r3, r1
 8003966:	4925      	ldr	r1, [pc, #148]	; (80039fc <HAL_RCC_OscConfig+0xc44>)
 8003968:	4313      	orrs	r3, r2
 800396a:	604b      	str	r3, [r1, #4]
 800396c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003970:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	fa93 f2a3 	rbit	r2, r3
 8003980:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003984:	601a      	str	r2, [r3, #0]
  return result;
 8003986:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800398a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800398c:	fab3 f383 	clz	r3, r3
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003996:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	461a      	mov	r2, r3
 800399e:	2301      	movs	r3, #1
 80039a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a2:	f7fd f85d 	bl	8000a60 <HAL_GetTick>
 80039a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039aa:	e009      	b.n	80039c0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ac:	f7fd f858 	bl	8000a60 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e109      	b.n	8003bd4 <HAL_RCC_OscConfig+0xe1c>
 80039c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	fa93 f2a3 	rbit	r2, r3
 80039d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039d8:	601a      	str	r2, [r3, #0]
  return result;
 80039da:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039e0:	fab3 f383 	clz	r3, r3
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d105      	bne.n	8003a00 <HAL_RCC_OscConfig+0xc48>
 80039f4:	4b01      	ldr	r3, [pc, #4]	; (80039fc <HAL_RCC_OscConfig+0xc44>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	e01e      	b.n	8003a38 <HAL_RCC_OscConfig+0xc80>
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	fa93 f2a3 	rbit	r2, r3
 8003a14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	fa93 f2a3 	rbit	r2, r3
 8003a2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	4b6a      	ldr	r3, [pc, #424]	; (8003be0 <HAL_RCC_OscConfig+0xe28>)
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003a3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a40:	6011      	str	r1, [r2, #0]
 8003a42:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	fa92 f1a2 	rbit	r1, r2
 8003a4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a50:	6011      	str	r1, [r2, #0]
  return result;
 8003a52:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	fab2 f282 	clz	r2, r2
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	f042 0220 	orr.w	r2, r2, #32
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	f002 021f 	and.w	r2, r2, #31
 8003a68:	2101      	movs	r1, #1
 8003a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d09b      	beq.n	80039ac <HAL_RCC_OscConfig+0xbf4>
 8003a74:	e0ad      	b.n	8003bd2 <HAL_RCC_OscConfig+0xe1a>
 8003a76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	fa93 f2a3 	rbit	r2, r3
 8003a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a8e:	601a      	str	r2, [r3, #0]
  return result;
 8003a90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a94:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003aa0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fc ffd8 	bl	8000a60 <HAL_GetTick>
 8003ab0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab4:	e009      	b.n	8003aca <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab6:	f7fc ffd3 	bl	8000a60 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e084      	b.n	8003bd4 <HAL_RCC_OscConfig+0xe1c>
 8003aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ace:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	fa93 f2a3 	rbit	r2, r3
 8003ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ae2:	601a      	str	r2, [r3, #0]
  return result;
 8003ae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ae8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aea:	fab3 f383 	clz	r3, r3
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d102      	bne.n	8003b04 <HAL_RCC_OscConfig+0xd4c>
 8003afe:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <HAL_RCC_OscConfig+0xe28>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	e01b      	b.n	8003b3c <HAL_RCC_OscConfig+0xd84>
 8003b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	fa93 f2a3 	rbit	r2, r3
 8003b18:	f107 0320 	add.w	r3, r7, #32
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	f107 031c 	add.w	r3, r7, #28
 8003b22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	f107 031c 	add.w	r3, r7, #28
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	fa93 f2a3 	rbit	r2, r3
 8003b32:	f107 0318 	add.w	r3, r7, #24
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <HAL_RCC_OscConfig+0xe28>)
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	f107 0214 	add.w	r2, r7, #20
 8003b40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b44:	6011      	str	r1, [r2, #0]
 8003b46:	f107 0214 	add.w	r2, r7, #20
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	fa92 f1a2 	rbit	r1, r2
 8003b50:	f107 0210 	add.w	r2, r7, #16
 8003b54:	6011      	str	r1, [r2, #0]
  return result;
 8003b56:	f107 0210 	add.w	r2, r7, #16
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	fab2 f282 	clz	r2, r2
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	f042 0220 	orr.w	r2, r2, #32
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	f002 021f 	and.w	r2, r2, #31
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d19e      	bne.n	8003ab6 <HAL_RCC_OscConfig+0xcfe>
 8003b78:	e02b      	b.n	8003bd2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b7a:	1d3b      	adds	r3, r7, #4
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e025      	b.n	8003bd4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b88:	4b15      	ldr	r3, [pc, #84]	; (8003be0 <HAL_RCC_OscConfig+0xe28>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003b90:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <HAL_RCC_OscConfig+0xe28>)
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003b9c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003ba0:	1d3b      	adds	r3, r7, #4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d111      	bne.n	8003bce <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003baa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003bae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bb2:	1d3b      	adds	r3, r7, #4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d108      	bne.n	8003bce <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003bbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bc0:	f003 020f 	and.w	r2, r3, #15
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000

08003be4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b09e      	sub	sp, #120	; 0x78
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e162      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bfc:	4b90      	ldr	r3, [pc, #576]	; (8003e40 <HAL_RCC_ClockConfig+0x25c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d910      	bls.n	8003c2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0a:	4b8d      	ldr	r3, [pc, #564]	; (8003e40 <HAL_RCC_ClockConfig+0x25c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f023 0207 	bic.w	r2, r3, #7
 8003c12:	498b      	ldr	r1, [pc, #556]	; (8003e40 <HAL_RCC_ClockConfig+0x25c>)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1a:	4b89      	ldr	r3, [pc, #548]	; (8003e40 <HAL_RCC_ClockConfig+0x25c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d001      	beq.n	8003c2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e14a      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c38:	4b82      	ldr	r3, [pc, #520]	; (8003e44 <HAL_RCC_ClockConfig+0x260>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	497f      	ldr	r1, [pc, #508]	; (8003e44 <HAL_RCC_ClockConfig+0x260>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 80dc 	beq.w	8003e10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d13c      	bne.n	8003cda <HAL_RCC_ClockConfig+0xf6>
 8003c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c68:	fa93 f3a3 	rbit	r3, r3
 8003c6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c70:	fab3 f383 	clz	r3, r3
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	095b      	lsrs	r3, r3, #5
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d102      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xa6>
 8003c84:	4b6f      	ldr	r3, [pc, #444]	; (8003e44 <HAL_RCC_ClockConfig+0x260>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	e00f      	b.n	8003caa <HAL_RCC_ClockConfig+0xc6>
 8003c8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	667b      	str	r3, [r7, #100]	; 0x64
 8003c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ca6:	4b67      	ldr	r3, [pc, #412]	; (8003e44 <HAL_RCC_ClockConfig+0x260>)
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cae:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cb2:	fa92 f2a2 	rbit	r2, r2
 8003cb6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003cb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cba:	fab2 f282 	clz	r2, r2
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	f042 0220 	orr.w	r2, r2, #32
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	f002 021f 	and.w	r2, r2, #31
 8003cca:	2101      	movs	r1, #1
 8003ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d17b      	bne.n	8003dce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e0f3      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d13c      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x178>
 8003ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ce6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cea:	fa93 f3a3 	rbit	r3, r3
 8003cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cf2:	fab3 f383 	clz	r3, r3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d102      	bne.n	8003d0c <HAL_RCC_ClockConfig+0x128>
 8003d06:	4b4f      	ldr	r3, [pc, #316]	; (8003e44 <HAL_RCC_ClockConfig+0x260>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	e00f      	b.n	8003d2c <HAL_RCC_ClockConfig+0x148>
 8003d0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d14:	fa93 f3a3 	rbit	r3, r3
 8003d18:	647b      	str	r3, [r7, #68]	; 0x44
 8003d1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d1e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d28:	4b46      	ldr	r3, [pc, #280]	; (8003e44 <HAL_RCC_ClockConfig+0x260>)
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d30:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d34:	fa92 f2a2 	rbit	r2, r2
 8003d38:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d3c:	fab2 f282 	clz	r2, r2
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	f042 0220 	orr.w	r2, r2, #32
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	f002 021f 	and.w	r2, r2, #31
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d13a      	bne.n	8003dce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0b2      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x2de>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	fa93 f3a3 	rbit	r3, r3
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6a:	fab3 f383 	clz	r3, r3
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d102      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x1a0>
 8003d7e:	4b31      	ldr	r3, [pc, #196]	; (8003e44 <HAL_RCC_ClockConfig+0x260>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	e00d      	b.n	8003da0 <HAL_RCC_ClockConfig+0x1bc>
 8003d84:	2302      	movs	r3, #2
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	fa93 f3a3 	rbit	r3, r3
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d90:	2302      	movs	r3, #2
 8003d92:	623b      	str	r3, [r7, #32]
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	fa93 f3a3 	rbit	r3, r3
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <HAL_RCC_ClockConfig+0x260>)
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	2202      	movs	r2, #2
 8003da2:	61ba      	str	r2, [r7, #24]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	fa92 f2a2 	rbit	r2, r2
 8003daa:	617a      	str	r2, [r7, #20]
  return result;
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	fab2 f282 	clz	r2, r2
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	f042 0220 	orr.w	r2, r2, #32
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	f002 021f 	and.w	r2, r2, #31
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e079      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_RCC_ClockConfig+0x260>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f023 0203 	bic.w	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	491a      	ldr	r1, [pc, #104]	; (8003e44 <HAL_RCC_ClockConfig+0x260>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003de0:	f7fc fe3e 	bl	8000a60 <HAL_GetTick>
 8003de4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de6:	e00a      	b.n	8003dfe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de8:	f7fc fe3a 	bl	8000a60 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e061      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfe:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <HAL_RCC_ClockConfig+0x260>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 020c 	and.w	r2, r3, #12
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d1eb      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e10:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_RCC_ClockConfig+0x25c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d214      	bcs.n	8003e48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <HAL_RCC_ClockConfig+0x25c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f023 0207 	bic.w	r2, r3, #7
 8003e26:	4906      	ldr	r1, [pc, #24]	; (8003e40 <HAL_RCC_ClockConfig+0x25c>)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e2e:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <HAL_RCC_ClockConfig+0x25c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e040      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x2de>
 8003e40:	40022000 	.word	0x40022000
 8003e44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e54:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <HAL_RCC_ClockConfig+0x2e8>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	491a      	ldr	r1, [pc, #104]	; (8003ecc <HAL_RCC_ClockConfig+0x2e8>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e72:	4b16      	ldr	r3, [pc, #88]	; (8003ecc <HAL_RCC_ClockConfig+0x2e8>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4912      	ldr	r1, [pc, #72]	; (8003ecc <HAL_RCC_ClockConfig+0x2e8>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e86:	f000 f829 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8003e8a:	4601      	mov	r1, r0
 8003e8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ecc <HAL_RCC_ClockConfig+0x2e8>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e94:	22f0      	movs	r2, #240	; 0xf0
 8003e96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	fa92 f2a2 	rbit	r2, r2
 8003e9e:	60fa      	str	r2, [r7, #12]
  return result;
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	fab2 f282 	clz	r2, r2
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	40d3      	lsrs	r3, r2
 8003eaa:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <HAL_RCC_ClockConfig+0x2ec>)
 8003eac:	5cd3      	ldrb	r3, [r2, r3]
 8003eae:	fa21 f303 	lsr.w	r3, r1, r3
 8003eb2:	4a08      	ldr	r2, [pc, #32]	; (8003ed4 <HAL_RCC_ClockConfig+0x2f0>)
 8003eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003eb6:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <HAL_RCC_ClockConfig+0x2f4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc fd8c 	bl	80009d8 <HAL_InitTick>
  
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3778      	adds	r7, #120	; 0x78
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	08005d9c 	.word	0x08005d9c
 8003ed4:	20000000 	.word	0x20000000
 8003ed8:	20000004 	.word	0x20000004

08003edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b08b      	sub	sp, #44	; 0x2c
 8003ee0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	2300      	movs	r3, #0
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ef6:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d002      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x30>
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d003      	beq.n	8003f12 <HAL_RCC_GetSysClockFreq+0x36>
 8003f0a:	e03f      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f0c:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f0e:	623b      	str	r3, [r7, #32]
      break;
 8003f10:	e03f      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	fa92 f2a2 	rbit	r2, r2
 8003f24:	607a      	str	r2, [r7, #4]
  return result;
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	fab2 f282 	clz	r2, r2
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	40d3      	lsrs	r3, r2
 8003f30:	4a1d      	ldr	r2, [pc, #116]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f32:	5cd3      	ldrb	r3, [r2, r3]
 8003f34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f36:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	220f      	movs	r2, #15
 8003f40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	fa92 f2a2 	rbit	r2, r2
 8003f48:	60fa      	str	r2, [r7, #12]
  return result;
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	fab2 f282 	clz	r2, r2
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	40d3      	lsrs	r3, r2
 8003f54:	4a15      	ldr	r2, [pc, #84]	; (8003fac <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f56:	5cd3      	ldrb	r3, [r2, r3]
 8003f58:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f64:	4a0f      	ldr	r2, [pc, #60]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
 8003f74:	e007      	b.n	8003f86 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f76:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	fb02 f303 	mul.w	r3, r2, r3
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	623b      	str	r3, [r7, #32]
      break;
 8003f8a:	e002      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f8e:	623b      	str	r3, [r7, #32]
      break;
 8003f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f92:	6a3b      	ldr	r3, [r7, #32]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	372c      	adds	r7, #44	; 0x2c
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	007a1200 	.word	0x007a1200
 8003fa8:	08005db4 	.word	0x08005db4
 8003fac:	08005dc4 	.word	0x08005dc4

08003fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	20000000 	.word	0x20000000

08003fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003fce:	f7ff ffef 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003fd2:	4601      	mov	r1, r0
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fdc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003fe0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	fa92 f2a2 	rbit	r2, r2
 8003fe8:	603a      	str	r2, [r7, #0]
  return result;
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	fab2 f282 	clz	r2, r2
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	40d3      	lsrs	r3, r2
 8003ff4:	4a04      	ldr	r2, [pc, #16]	; (8004008 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003ff6:	5cd3      	ldrb	r3, [r2, r3]
 8003ff8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40021000 	.word	0x40021000
 8004008:	08005dac 	.word	0x08005dac

0800400c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004012:	f7ff ffcd 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8004016:	4601      	mov	r1, r0
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004020:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004024:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	fa92 f2a2 	rbit	r2, r2
 800402c:	603a      	str	r2, [r7, #0]
  return result;
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	fab2 f282 	clz	r2, r2
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	40d3      	lsrs	r3, r2
 8004038:	4a04      	ldr	r2, [pc, #16]	; (800404c <HAL_RCC_GetPCLK2Freq+0x40>)
 800403a:	5cd3      	ldrb	r3, [r2, r3]
 800403c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40021000 	.word	0x40021000
 800404c:	08005dac 	.word	0x08005dac

08004050 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b092      	sub	sp, #72	; 0x48
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004060:	2300      	movs	r3, #0
 8004062:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	f000 80d4 	beq.w	800421c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004074:	4b4e      	ldr	r3, [pc, #312]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10e      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004080:	4b4b      	ldr	r3, [pc, #300]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	4a4a      	ldr	r2, [pc, #296]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408a:	61d3      	str	r3, [r2, #28]
 800408c:	4b48      	ldr	r3, [pc, #288]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409e:	4b45      	ldr	r3, [pc, #276]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d118      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040aa:	4b42      	ldr	r3, [pc, #264]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a41      	ldr	r2, [pc, #260]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040b6:	f7fc fcd3 	bl	8000a60 <HAL_GetTick>
 80040ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040bc:	e008      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040be:	f7fc fccf 	bl	8000a60 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b64      	cmp	r3, #100	; 0x64
 80040ca:	d901      	bls.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e1d6      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d0:	4b38      	ldr	r3, [pc, #224]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f0      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040dc:	4b34      	ldr	r3, [pc, #208]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8084 	beq.w	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d07c      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040fc:	4b2c      	ldr	r3, [pc, #176]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004106:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800410a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	fa93 f3a3 	rbit	r3, r3
 8004112:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004116:	fab3 f383 	clz	r3, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	461a      	mov	r2, r3
 8004126:	2301      	movs	r3, #1
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800412e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	461a      	mov	r2, r3
 800414a:	2300      	movs	r3, #0
 800414c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800414e:	4a18      	ldr	r2, [pc, #96]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004152:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d04b      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415e:	f7fc fc7f 	bl	8000a60 <HAL_GetTick>
 8004162:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004164:	e00a      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004166:	f7fc fc7b 	bl	8000a60 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	f241 3288 	movw	r2, #5000	; 0x1388
 8004174:	4293      	cmp	r3, r2
 8004176:	d901      	bls.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e180      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800417c:	2302      	movs	r3, #2
 800417e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004182:	fa93 f3a3 	rbit	r3, r3
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
 8004188:	2302      	movs	r3, #2
 800418a:	623b      	str	r3, [r7, #32]
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	fa93 f3a3 	rbit	r3, r3
 8004192:	61fb      	str	r3, [r7, #28]
  return result;
 8004194:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	095b      	lsrs	r3, r3, #5
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	f043 0302 	orr.w	r3, r3, #2
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d108      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80041aa:	4b01      	ldr	r3, [pc, #4]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	e00d      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80041b0:	40021000 	.word	0x40021000
 80041b4:	40007000 	.word	0x40007000
 80041b8:	10908100 	.word	0x10908100
 80041bc:	2302      	movs	r3, #2
 80041be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	fa93 f3a3 	rbit	r3, r3
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	4ba0      	ldr	r3, [pc, #640]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	2202      	movs	r2, #2
 80041ce:	613a      	str	r2, [r7, #16]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	fa92 f2a2 	rbit	r2, r2
 80041d6:	60fa      	str	r2, [r7, #12]
  return result;
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	fab2 f282 	clz	r2, r2
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	f002 021f 	and.w	r2, r2, #31
 80041ea:	2101      	movs	r1, #1
 80041ec:	fa01 f202 	lsl.w	r2, r1, r2
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0b7      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80041f6:	4b95      	ldr	r3, [pc, #596]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4992      	ldr	r1, [pc, #584]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004204:	4313      	orrs	r3, r2
 8004206:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004208:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800420c:	2b01      	cmp	r3, #1
 800420e:	d105      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004210:	4b8e      	ldr	r3, [pc, #568]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	4a8d      	ldr	r2, [pc, #564]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004216:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d008      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004228:	4b88      	ldr	r3, [pc, #544]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	f023 0203 	bic.w	r2, r3, #3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4985      	ldr	r1, [pc, #532]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004236:	4313      	orrs	r3, r2
 8004238:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004246:	4b81      	ldr	r3, [pc, #516]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	497e      	ldr	r1, [pc, #504]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004254:	4313      	orrs	r3, r2
 8004256:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004264:	4b79      	ldr	r3, [pc, #484]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	4976      	ldr	r1, [pc, #472]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004272:	4313      	orrs	r3, r2
 8004274:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004282:	4b72      	ldr	r3, [pc, #456]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	f023 0210 	bic.w	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	496f      	ldr	r1, [pc, #444]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004290:	4313      	orrs	r3, r2
 8004292:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80042a0:	4b6a      	ldr	r3, [pc, #424]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ac:	4967      	ldr	r1, [pc, #412]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042be:	4b63      	ldr	r3, [pc, #396]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	f023 0220 	bic.w	r2, r3, #32
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	4960      	ldr	r1, [pc, #384]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042dc:	4b5b      	ldr	r3, [pc, #364]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	4958      	ldr	r1, [pc, #352]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042fa:	4b54      	ldr	r3, [pc, #336]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	4951      	ldr	r1, [pc, #324]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004308:	4313      	orrs	r3, r2
 800430a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004318:	4b4c      	ldr	r3, [pc, #304]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	4949      	ldr	r1, [pc, #292]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004336:	4b45      	ldr	r3, [pc, #276]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	4942      	ldr	r1, [pc, #264]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004344:	4313      	orrs	r3, r2
 8004346:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004354:	4b3d      	ldr	r3, [pc, #244]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004360:	493a      	ldr	r1, [pc, #232]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004362:	4313      	orrs	r3, r2
 8004364:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004372:	4b36      	ldr	r3, [pc, #216]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	4933      	ldr	r1, [pc, #204]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004380:	4313      	orrs	r3, r2
 8004382:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004390:	4b2e      	ldr	r3, [pc, #184]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004394:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439c:	492b      	ldr	r1, [pc, #172]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80043ae:	4b27      	ldr	r3, [pc, #156]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	4924      	ldr	r1, [pc, #144]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80043cc:	4b1f      	ldr	r3, [pc, #124]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	491c      	ldr	r1, [pc, #112]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80043ea:	4b18      	ldr	r3, [pc, #96]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	4915      	ldr	r1, [pc, #84]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d008      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004408:	4b10      	ldr	r3, [pc, #64]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	490d      	ldr	r1, [pc, #52]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004416:	4313      	orrs	r3, r2
 8004418:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d008      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004432:	4906      	ldr	r1, [pc, #24]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004434:	4313      	orrs	r3, r2
 8004436:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00c      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004444:	4b01      	ldr	r3, [pc, #4]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004448:	e002      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800444a:	bf00      	nop
 800444c:	40021000 	.word	0x40021000
 8004450:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004458:	490b      	ldr	r1, [pc, #44]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800445a:	4313      	orrs	r3, r2
 800445c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d008      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800446a:	4b07      	ldr	r3, [pc, #28]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	4904      	ldr	r1, [pc, #16]	; (8004488 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004478:	4313      	orrs	r3, r2
 800447a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3748      	adds	r7, #72	; 0x48
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000

0800448c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e040      	b.n	8004520 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fc f978 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2224      	movs	r2, #36	; 0x24
 80044b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fbbe 	bl	8004c4c <UART_SetConfig>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e022      	b.n	8004520 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fd88 	bl	8004ff8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 fe0f 	bl	800513c <UART_CheckIdleState>
 800451e:	4603      	mov	r3, r0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	; 0x28
 800452c:	af02      	add	r7, sp, #8
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4613      	mov	r3, r2
 8004536:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800453c:	2b20      	cmp	r3, #32
 800453e:	f040 8082 	bne.w	8004646 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_UART_Transmit+0x26>
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e07a      	b.n	8004648 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_UART_Transmit+0x38>
 800455c:	2302      	movs	r3, #2
 800455e:	e073      	b.n	8004648 <HAL_UART_Transmit+0x120>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2221      	movs	r2, #33	; 0x21
 8004574:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004576:	f7fc fa73 	bl	8000a60 <HAL_GetTick>
 800457a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	88fa      	ldrh	r2, [r7, #6]
 8004580:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	88fa      	ldrh	r2, [r7, #6]
 8004588:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004594:	d108      	bne.n	80045a8 <HAL_UART_Transmit+0x80>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	e003      	b.n	80045b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80045b8:	e02d      	b.n	8004616 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2200      	movs	r2, #0
 80045c2:	2180      	movs	r1, #128	; 0x80
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 fe02 	bl	80051ce <UART_WaitOnFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e039      	b.n	8004648 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	881a      	ldrh	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045e6:	b292      	uxth	r2, r2
 80045e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	3302      	adds	r3, #2
 80045ee:	61bb      	str	r3, [r7, #24]
 80045f0:	e008      	b.n	8004604 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	781a      	ldrb	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	b292      	uxth	r2, r2
 80045fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	3301      	adds	r3, #1
 8004602:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800460a:	b29b      	uxth	r3, r3
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1cb      	bne.n	80045ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2200      	movs	r2, #0
 800462a:	2140      	movs	r1, #64	; 0x40
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 fdce 	bl	80051ce <UART_WaitOnFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e005      	b.n	8004648 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	e000      	b.n	8004648 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004646:	2302      	movs	r3, #2
  }
}
 8004648:	4618      	mov	r0, r3
 800464a:	3720      	adds	r7, #32
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b0ba      	sub	sp, #232	; 0xe8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004676:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800467a:	f640 030f 	movw	r3, #2063	; 0x80f
 800467e:	4013      	ands	r3, r2
 8004680:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d115      	bne.n	80046b8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800468c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00f      	beq.n	80046b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d009      	beq.n	80046b8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 82a3 	beq.w	8004bf4 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	4798      	blx	r3
      }
      return;
 80046b6:	e29d      	b.n	8004bf4 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8117 	beq.w	80048f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80046d2:	4b85      	ldr	r3, [pc, #532]	; (80048e8 <HAL_UART_IRQHandler+0x298>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 810a 	beq.w	80048f0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d011      	beq.n	800470c <HAL_UART_IRQHandler+0xbc>
 80046e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00b      	beq.n	800470c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2201      	movs	r2, #1
 80046fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004702:	f043 0201 	orr.w	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800470c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d011      	beq.n	800473c <HAL_UART_IRQHandler+0xec>
 8004718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00b      	beq.n	800473c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2202      	movs	r2, #2
 800472a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004732:	f043 0204 	orr.w	r2, r3, #4
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800473c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d011      	beq.n	800476c <HAL_UART_IRQHandler+0x11c>
 8004748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00b      	beq.n	800476c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2204      	movs	r2, #4
 800475a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004762:	f043 0202 	orr.w	r2, r3, #2
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800476c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d017      	beq.n	80047a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b00      	cmp	r3, #0
 8004782:	d105      	bne.n	8004790 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004788:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00b      	beq.n	80047a8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2208      	movs	r2, #8
 8004796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800479e:	f043 0208 	orr.w	r2, r3, #8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d012      	beq.n	80047da <HAL_UART_IRQHandler+0x18a>
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00c      	beq.n	80047da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 8209 	beq.w	8004bf8 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00d      	beq.n	800480e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d007      	beq.n	800480e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004814:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004822:	2b40      	cmp	r3, #64	; 0x40
 8004824:	d005      	beq.n	8004832 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800482a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800482e:	2b00      	cmp	r3, #0
 8004830:	d04f      	beq.n	80048d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fd8f 	bl	8005356 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d141      	bne.n	80048ca <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3308      	adds	r3, #8
 800484c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800485c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004864:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004872:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800487e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800488a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1d9      	bne.n	8004846 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	2b00      	cmp	r3, #0
 8004898:	d013      	beq.n	80048c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489e:	4a13      	ldr	r2, [pc, #76]	; (80048ec <HAL_UART_IRQHandler+0x29c>)
 80048a0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fd ff7e 	bl	80027a8 <HAL_DMA_Abort_IT>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d017      	beq.n	80048e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80048bc:	4610      	mov	r0, r2
 80048be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c0:	e00f      	b.n	80048e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f9ac 	bl	8004c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c8:	e00b      	b.n	80048e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f9a8 	bl	8004c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	e007      	b.n	80048e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f9a4 	bl	8004c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80048e0:	e18a      	b.n	8004bf8 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e2:	bf00      	nop
    return;
 80048e4:	e188      	b.n	8004bf8 <HAL_UART_IRQHandler+0x5a8>
 80048e6:	bf00      	nop
 80048e8:	04000120 	.word	0x04000120
 80048ec:	0800541d 	.word	0x0800541d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	f040 8143 	bne.w	8004b80 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048fe:	f003 0310 	and.w	r3, r3, #16
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 813c 	beq.w	8004b80 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 8135 	beq.w	8004b80 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2210      	movs	r2, #16
 800491c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004928:	2b40      	cmp	r3, #64	; 0x40
 800492a:	f040 80b1 	bne.w	8004a90 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800493a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 815c 	beq.w	8004bfc <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800494a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800494e:	429a      	cmp	r2, r3
 8004950:	f080 8154 	bcs.w	8004bfc <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800495a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	2b20      	cmp	r3, #32
 8004966:	f000 8085 	beq.w	8004a74 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800497e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004982:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004986:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004994:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004998:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1da      	bne.n	800496a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3308      	adds	r3, #8
 80049ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049c6:	f023 0301 	bic.w	r3, r3, #1
 80049ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3308      	adds	r3, #8
 80049d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e1      	bne.n	80049b4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3308      	adds	r3, #8
 80049f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3308      	adds	r3, #8
 8004a10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e3      	bne.n	80049f0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a44:	f023 0310 	bic.w	r3, r3, #16
 8004a48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a56:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a58:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a5e:	e841 2300 	strex	r3, r2, [r1]
 8004a62:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1e4      	bne.n	8004a34 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fd fe61 	bl	8002736 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	4619      	mov	r1, r3
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f8d3 	bl	8004c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a8e:	e0b5      	b.n	8004bfc <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80a7 	beq.w	8004c00 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8004ab2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80a2 	beq.w	8004c00 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004acc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ade:	647b      	str	r3, [r7, #68]	; 0x44
 8004ae0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ae4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e4      	bne.n	8004abc <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3308      	adds	r3, #8
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	623b      	str	r3, [r7, #32]
   return(result);
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3308      	adds	r3, #8
 8004b12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b16:	633a      	str	r2, [r7, #48]	; 0x30
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1e3      	bne.n	8004af2 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f023 0310 	bic.w	r3, r3, #16
 8004b50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b5e:	61fb      	str	r3, [r7, #28]
 8004b60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	69b9      	ldr	r1, [r7, #24]
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	617b      	str	r3, [r7, #20]
   return(result);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e4      	bne.n	8004b3c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b76:	4619      	mov	r1, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f85b 	bl	8004c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b7e:	e03f      	b.n	8004c00 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00e      	beq.n	8004baa <HAL_UART_IRQHandler+0x55a>
 8004b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ba0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fc7a 	bl	800549c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ba8:	e02d      	b.n	8004c06 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00e      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d008      	beq.n	8004bd4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01c      	beq.n	8004c04 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
    }
    return;
 8004bd2:	e017      	b.n	8004c04 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d012      	beq.n	8004c06 <HAL_UART_IRQHandler+0x5b6>
 8004be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00c      	beq.n	8004c06 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 fc2b 	bl	8005448 <UART_EndTransmit_IT>
    return;
 8004bf2:	e008      	b.n	8004c06 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004bf4:	bf00      	nop
 8004bf6:	e006      	b.n	8004c06 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004bf8:	bf00      	nop
 8004bfa:	e004      	b.n	8004c06 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004bfc:	bf00      	nop
 8004bfe:	e002      	b.n	8004c06 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004c00:	bf00      	nop
 8004c02:	e000      	b.n	8004c06 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004c04:	bf00      	nop
  }

}
 8004c06:	37e8      	adds	r7, #232	; 0xe8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689a      	ldr	r2, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	431a      	orrs	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4bab      	ldr	r3, [pc, #684]	; (8004f24 <UART_SetConfig+0x2d8>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	6979      	ldr	r1, [r7, #20]
 8004c80:	430b      	orrs	r3, r1
 8004c82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a99      	ldr	r2, [pc, #612]	; (8004f28 <UART_SetConfig+0x2dc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d120      	bne.n	8004d0a <UART_SetConfig+0xbe>
 8004cc8:	4b98      	ldr	r3, [pc, #608]	; (8004f2c <UART_SetConfig+0x2e0>)
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d817      	bhi.n	8004d04 <UART_SetConfig+0xb8>
 8004cd4:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <UART_SetConfig+0x90>)
 8004cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cda:	bf00      	nop
 8004cdc:	08004ced 	.word	0x08004ced
 8004ce0:	08004cf9 	.word	0x08004cf9
 8004ce4:	08004cff 	.word	0x08004cff
 8004ce8:	08004cf3 	.word	0x08004cf3
 8004cec:	2301      	movs	r3, #1
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e0b5      	b.n	8004e5e <UART_SetConfig+0x212>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	77fb      	strb	r3, [r7, #31]
 8004cf6:	e0b2      	b.n	8004e5e <UART_SetConfig+0x212>
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e0af      	b.n	8004e5e <UART_SetConfig+0x212>
 8004cfe:	2308      	movs	r3, #8
 8004d00:	77fb      	strb	r3, [r7, #31]
 8004d02:	e0ac      	b.n	8004e5e <UART_SetConfig+0x212>
 8004d04:	2310      	movs	r3, #16
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e0a9      	b.n	8004e5e <UART_SetConfig+0x212>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a88      	ldr	r2, [pc, #544]	; (8004f30 <UART_SetConfig+0x2e4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d124      	bne.n	8004d5e <UART_SetConfig+0x112>
 8004d14:	4b85      	ldr	r3, [pc, #532]	; (8004f2c <UART_SetConfig+0x2e0>)
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d20:	d011      	beq.n	8004d46 <UART_SetConfig+0xfa>
 8004d22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d26:	d817      	bhi.n	8004d58 <UART_SetConfig+0x10c>
 8004d28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d2c:	d011      	beq.n	8004d52 <UART_SetConfig+0x106>
 8004d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d32:	d811      	bhi.n	8004d58 <UART_SetConfig+0x10c>
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <UART_SetConfig+0xf4>
 8004d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d3c:	d006      	beq.n	8004d4c <UART_SetConfig+0x100>
 8004d3e:	e00b      	b.n	8004d58 <UART_SetConfig+0x10c>
 8004d40:	2300      	movs	r3, #0
 8004d42:	77fb      	strb	r3, [r7, #31]
 8004d44:	e08b      	b.n	8004e5e <UART_SetConfig+0x212>
 8004d46:	2302      	movs	r3, #2
 8004d48:	77fb      	strb	r3, [r7, #31]
 8004d4a:	e088      	b.n	8004e5e <UART_SetConfig+0x212>
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	e085      	b.n	8004e5e <UART_SetConfig+0x212>
 8004d52:	2308      	movs	r3, #8
 8004d54:	77fb      	strb	r3, [r7, #31]
 8004d56:	e082      	b.n	8004e5e <UART_SetConfig+0x212>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	77fb      	strb	r3, [r7, #31]
 8004d5c:	e07f      	b.n	8004e5e <UART_SetConfig+0x212>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a74      	ldr	r2, [pc, #464]	; (8004f34 <UART_SetConfig+0x2e8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d124      	bne.n	8004db2 <UART_SetConfig+0x166>
 8004d68:	4b70      	ldr	r3, [pc, #448]	; (8004f2c <UART_SetConfig+0x2e0>)
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004d70:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d74:	d011      	beq.n	8004d9a <UART_SetConfig+0x14e>
 8004d76:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d7a:	d817      	bhi.n	8004dac <UART_SetConfig+0x160>
 8004d7c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d80:	d011      	beq.n	8004da6 <UART_SetConfig+0x15a>
 8004d82:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d86:	d811      	bhi.n	8004dac <UART_SetConfig+0x160>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <UART_SetConfig+0x148>
 8004d8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d90:	d006      	beq.n	8004da0 <UART_SetConfig+0x154>
 8004d92:	e00b      	b.n	8004dac <UART_SetConfig+0x160>
 8004d94:	2300      	movs	r3, #0
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e061      	b.n	8004e5e <UART_SetConfig+0x212>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e05e      	b.n	8004e5e <UART_SetConfig+0x212>
 8004da0:	2304      	movs	r3, #4
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e05b      	b.n	8004e5e <UART_SetConfig+0x212>
 8004da6:	2308      	movs	r3, #8
 8004da8:	77fb      	strb	r3, [r7, #31]
 8004daa:	e058      	b.n	8004e5e <UART_SetConfig+0x212>
 8004dac:	2310      	movs	r3, #16
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	e055      	b.n	8004e5e <UART_SetConfig+0x212>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a60      	ldr	r2, [pc, #384]	; (8004f38 <UART_SetConfig+0x2ec>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d124      	bne.n	8004e06 <UART_SetConfig+0x1ba>
 8004dbc:	4b5b      	ldr	r3, [pc, #364]	; (8004f2c <UART_SetConfig+0x2e0>)
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004dc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004dc8:	d011      	beq.n	8004dee <UART_SetConfig+0x1a2>
 8004dca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004dce:	d817      	bhi.n	8004e00 <UART_SetConfig+0x1b4>
 8004dd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dd4:	d011      	beq.n	8004dfa <UART_SetConfig+0x1ae>
 8004dd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dda:	d811      	bhi.n	8004e00 <UART_SetConfig+0x1b4>
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <UART_SetConfig+0x19c>
 8004de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004de4:	d006      	beq.n	8004df4 <UART_SetConfig+0x1a8>
 8004de6:	e00b      	b.n	8004e00 <UART_SetConfig+0x1b4>
 8004de8:	2300      	movs	r3, #0
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e037      	b.n	8004e5e <UART_SetConfig+0x212>
 8004dee:	2302      	movs	r3, #2
 8004df0:	77fb      	strb	r3, [r7, #31]
 8004df2:	e034      	b.n	8004e5e <UART_SetConfig+0x212>
 8004df4:	2304      	movs	r3, #4
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e031      	b.n	8004e5e <UART_SetConfig+0x212>
 8004dfa:	2308      	movs	r3, #8
 8004dfc:	77fb      	strb	r3, [r7, #31]
 8004dfe:	e02e      	b.n	8004e5e <UART_SetConfig+0x212>
 8004e00:	2310      	movs	r3, #16
 8004e02:	77fb      	strb	r3, [r7, #31]
 8004e04:	e02b      	b.n	8004e5e <UART_SetConfig+0x212>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a4c      	ldr	r2, [pc, #304]	; (8004f3c <UART_SetConfig+0x2f0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d124      	bne.n	8004e5a <UART_SetConfig+0x20e>
 8004e10:	4b46      	ldr	r3, [pc, #280]	; (8004f2c <UART_SetConfig+0x2e0>)
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004e18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e1c:	d011      	beq.n	8004e42 <UART_SetConfig+0x1f6>
 8004e1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e22:	d817      	bhi.n	8004e54 <UART_SetConfig+0x208>
 8004e24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e28:	d011      	beq.n	8004e4e <UART_SetConfig+0x202>
 8004e2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e2e:	d811      	bhi.n	8004e54 <UART_SetConfig+0x208>
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <UART_SetConfig+0x1f0>
 8004e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e38:	d006      	beq.n	8004e48 <UART_SetConfig+0x1fc>
 8004e3a:	e00b      	b.n	8004e54 <UART_SetConfig+0x208>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	77fb      	strb	r3, [r7, #31]
 8004e40:	e00d      	b.n	8004e5e <UART_SetConfig+0x212>
 8004e42:	2302      	movs	r3, #2
 8004e44:	77fb      	strb	r3, [r7, #31]
 8004e46:	e00a      	b.n	8004e5e <UART_SetConfig+0x212>
 8004e48:	2304      	movs	r3, #4
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e007      	b.n	8004e5e <UART_SetConfig+0x212>
 8004e4e:	2308      	movs	r3, #8
 8004e50:	77fb      	strb	r3, [r7, #31]
 8004e52:	e004      	b.n	8004e5e <UART_SetConfig+0x212>
 8004e54:	2310      	movs	r3, #16
 8004e56:	77fb      	strb	r3, [r7, #31]
 8004e58:	e001      	b.n	8004e5e <UART_SetConfig+0x212>
 8004e5a:	2310      	movs	r3, #16
 8004e5c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e66:	d16d      	bne.n	8004f44 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8004e68:	7ffb      	ldrb	r3, [r7, #31]
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d827      	bhi.n	8004ebe <UART_SetConfig+0x272>
 8004e6e:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <UART_SetConfig+0x228>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004e99 	.word	0x08004e99
 8004e78:	08004ea1 	.word	0x08004ea1
 8004e7c:	08004ea9 	.word	0x08004ea9
 8004e80:	08004ebf 	.word	0x08004ebf
 8004e84:	08004eaf 	.word	0x08004eaf
 8004e88:	08004ebf 	.word	0x08004ebf
 8004e8c:	08004ebf 	.word	0x08004ebf
 8004e90:	08004ebf 	.word	0x08004ebf
 8004e94:	08004eb7 	.word	0x08004eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e98:	f7ff f896 	bl	8003fc8 <HAL_RCC_GetPCLK1Freq>
 8004e9c:	61b8      	str	r0, [r7, #24]
        break;
 8004e9e:	e013      	b.n	8004ec8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea0:	f7ff f8b4 	bl	800400c <HAL_RCC_GetPCLK2Freq>
 8004ea4:	61b8      	str	r0, [r7, #24]
        break;
 8004ea6:	e00f      	b.n	8004ec8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ea8:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <UART_SetConfig+0x2f4>)
 8004eaa:	61bb      	str	r3, [r7, #24]
        break;
 8004eac:	e00c      	b.n	8004ec8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eae:	f7ff f815 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8004eb2:	61b8      	str	r0, [r7, #24]
        break;
 8004eb4:	e008      	b.n	8004ec8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eba:	61bb      	str	r3, [r7, #24]
        break;
 8004ebc:	e004      	b.n	8004ec8 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ec6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 8086 	beq.w	8004fdc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	005a      	lsls	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	441a      	add	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	2b0f      	cmp	r3, #15
 8004eec:	d916      	bls.n	8004f1c <UART_SetConfig+0x2d0>
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef4:	d212      	bcs.n	8004f1c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f023 030f 	bic.w	r3, r3, #15
 8004efe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	085b      	lsrs	r3, r3, #1
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	89fb      	ldrh	r3, [r7, #14]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	89fa      	ldrh	r2, [r7, #14]
 8004f18:	60da      	str	r2, [r3, #12]
 8004f1a:	e05f      	b.n	8004fdc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	77bb      	strb	r3, [r7, #30]
 8004f20:	e05c      	b.n	8004fdc <UART_SetConfig+0x390>
 8004f22:	bf00      	nop
 8004f24:	efff69f3 	.word	0xefff69f3
 8004f28:	40013800 	.word	0x40013800
 8004f2c:	40021000 	.word	0x40021000
 8004f30:	40004400 	.word	0x40004400
 8004f34:	40004800 	.word	0x40004800
 8004f38:	40004c00 	.word	0x40004c00
 8004f3c:	40005000 	.word	0x40005000
 8004f40:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f44:	7ffb      	ldrb	r3, [r7, #31]
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d827      	bhi.n	8004f9a <UART_SetConfig+0x34e>
 8004f4a:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <UART_SetConfig+0x304>)
 8004f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08004f7d 	.word	0x08004f7d
 8004f58:	08004f85 	.word	0x08004f85
 8004f5c:	08004f9b 	.word	0x08004f9b
 8004f60:	08004f8b 	.word	0x08004f8b
 8004f64:	08004f9b 	.word	0x08004f9b
 8004f68:	08004f9b 	.word	0x08004f9b
 8004f6c:	08004f9b 	.word	0x08004f9b
 8004f70:	08004f93 	.word	0x08004f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f74:	f7ff f828 	bl	8003fc8 <HAL_RCC_GetPCLK1Freq>
 8004f78:	61b8      	str	r0, [r7, #24]
        break;
 8004f7a:	e013      	b.n	8004fa4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f7c:	f7ff f846 	bl	800400c <HAL_RCC_GetPCLK2Freq>
 8004f80:	61b8      	str	r0, [r7, #24]
        break;
 8004f82:	e00f      	b.n	8004fa4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f84:	4b1b      	ldr	r3, [pc, #108]	; (8004ff4 <UART_SetConfig+0x3a8>)
 8004f86:	61bb      	str	r3, [r7, #24]
        break;
 8004f88:	e00c      	b.n	8004fa4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f8a:	f7fe ffa7 	bl	8003edc <HAL_RCC_GetSysClockFreq>
 8004f8e:	61b8      	str	r0, [r7, #24]
        break;
 8004f90:	e008      	b.n	8004fa4 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f96:	61bb      	str	r3, [r7, #24]
        break;
 8004f98:	e004      	b.n	8004fa4 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	77bb      	strb	r3, [r7, #30]
        break;
 8004fa2:	bf00      	nop
    }

    if (pclk != 0U)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d018      	beq.n	8004fdc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	085a      	lsrs	r2, r3, #1
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	441a      	add	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b0f      	cmp	r3, #15
 8004fc4:	d908      	bls.n	8004fd8 <UART_SetConfig+0x38c>
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fcc:	d204      	bcs.n	8004fd8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	60da      	str	r2, [r3, #12]
 8004fd6:	e001      	b.n	8004fdc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004fe8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3720      	adds	r7, #32
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	007a1200 	.word	0x007a1200

08004ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01a      	beq.n	800510e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f6:	d10a      	bne.n	800510e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	605a      	str	r2, [r3, #4]
  }
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af02      	add	r7, sp, #8
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800514c:	f7fb fc88 	bl	8000a60 <HAL_GetTick>
 8005150:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b08      	cmp	r3, #8
 800515e:	d10e      	bne.n	800517e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f82d 	bl	80051ce <UART_WaitOnFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e023      	b.n	80051c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b04      	cmp	r3, #4
 800518a:	d10e      	bne.n	80051aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800518c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f817 	bl	80051ce <UART_WaitOnFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e00d      	b.n	80051c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b09c      	sub	sp, #112	; 0x70
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	603b      	str	r3, [r7, #0]
 80051da:	4613      	mov	r3, r2
 80051dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051de:	e0a5      	b.n	800532c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e6:	f000 80a1 	beq.w	800532c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ea:	f7fb fc39 	bl	8000a60 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d302      	bcc.n	8005200 <UART_WaitOnFlagUntilTimeout+0x32>
 80051fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d13e      	bne.n	800527e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005208:	e853 3f00 	ldrex	r3, [r3]
 800520c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800520e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005210:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005214:	667b      	str	r3, [r7, #100]	; 0x64
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800521e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005220:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005224:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005226:	e841 2300 	strex	r3, r2, [r1]
 800522a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800522c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1e6      	bne.n	8005200 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3308      	adds	r3, #8
 8005238:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	663b      	str	r3, [r7, #96]	; 0x60
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3308      	adds	r3, #8
 8005250:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005252:	64ba      	str	r2, [r7, #72]	; 0x48
 8005254:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005258:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1e5      	bne.n	8005232 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2220      	movs	r2, #32
 800526a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e067      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d04f      	beq.n	800532c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800529a:	d147      	bne.n	800532c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ae:	e853 3f00 	ldrex	r3, [r3]
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	461a      	mov	r2, r3
 80052c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c4:	637b      	str	r3, [r7, #52]	; 0x34
 80052c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052cc:	e841 2300 	strex	r3, r2, [r1]
 80052d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1e6      	bne.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3308      	adds	r3, #8
 80052de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	e853 3f00 	ldrex	r3, [r3]
 80052e6:	613b      	str	r3, [r7, #16]
   return(result);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f023 0301 	bic.w	r3, r3, #1
 80052ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3308      	adds	r3, #8
 80052f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052f8:	623a      	str	r2, [r7, #32]
 80052fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fc:	69f9      	ldr	r1, [r7, #28]
 80052fe:	6a3a      	ldr	r2, [r7, #32]
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	61bb      	str	r3, [r7, #24]
   return(result);
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1e5      	bne.n	80052d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e010      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	69da      	ldr	r2, [r3, #28]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4013      	ands	r3, r2
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	429a      	cmp	r2, r3
 800533a:	bf0c      	ite	eq
 800533c:	2301      	moveq	r3, #1
 800533e:	2300      	movne	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	461a      	mov	r2, r3
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	429a      	cmp	r2, r3
 8005348:	f43f af4a 	beq.w	80051e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3770      	adds	r7, #112	; 0x70
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005356:	b480      	push	{r7}
 8005358:	b095      	sub	sp, #84	; 0x54
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537c:	643b      	str	r3, [r7, #64]	; 0x40
 800537e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005382:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e6      	bne.n	800535e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	61fb      	str	r3, [r7, #28]
   return(result);
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f023 0301 	bic.w	r3, r3, #1
 80053a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e5      	bne.n	8005390 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d118      	bne.n	80053fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f023 0310 	bic.w	r3, r3, #16
 80053e0:	647b      	str	r3, [r7, #68]	; 0x44
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6979      	ldr	r1, [r7, #20]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	613b      	str	r3, [r7, #16]
   return(result);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e6      	bne.n	80053cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005410:	bf00      	nop
 8005412:	3754      	adds	r7, #84	; 0x54
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff fbf0 	bl	8004c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	60bb      	str	r3, [r7, #8]
   return(result);
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005464:	61fb      	str	r3, [r7, #28]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005472:	6979      	ldr	r1, [r7, #20]
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	e841 2300 	strex	r3, r2, [r1]
 800547a:	613b      	str	r3, [r7, #16]
   return(result);
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1e6      	bne.n	8005450 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7ff fbbc 	bl	8004c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005494:	bf00      	nop
 8005496:	3720      	adds	r7, #32
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <__errno>:
 80054b0:	4b01      	ldr	r3, [pc, #4]	; (80054b8 <__errno+0x8>)
 80054b2:	6818      	ldr	r0, [r3, #0]
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	2000000c 	.word	0x2000000c

080054bc <__libc_init_array>:
 80054bc:	b570      	push	{r4, r5, r6, lr}
 80054be:	4d0d      	ldr	r5, [pc, #52]	; (80054f4 <__libc_init_array+0x38>)
 80054c0:	4c0d      	ldr	r4, [pc, #52]	; (80054f8 <__libc_init_array+0x3c>)
 80054c2:	1b64      	subs	r4, r4, r5
 80054c4:	10a4      	asrs	r4, r4, #2
 80054c6:	2600      	movs	r6, #0
 80054c8:	42a6      	cmp	r6, r4
 80054ca:	d109      	bne.n	80054e0 <__libc_init_array+0x24>
 80054cc:	4d0b      	ldr	r5, [pc, #44]	; (80054fc <__libc_init_array+0x40>)
 80054ce:	4c0c      	ldr	r4, [pc, #48]	; (8005500 <__libc_init_array+0x44>)
 80054d0:	f000 fc4e 	bl	8005d70 <_init>
 80054d4:	1b64      	subs	r4, r4, r5
 80054d6:	10a4      	asrs	r4, r4, #2
 80054d8:	2600      	movs	r6, #0
 80054da:	42a6      	cmp	r6, r4
 80054dc:	d105      	bne.n	80054ea <__libc_init_array+0x2e>
 80054de:	bd70      	pop	{r4, r5, r6, pc}
 80054e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054e4:	4798      	blx	r3
 80054e6:	3601      	adds	r6, #1
 80054e8:	e7ee      	b.n	80054c8 <__libc_init_array+0xc>
 80054ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ee:	4798      	blx	r3
 80054f0:	3601      	adds	r6, #1
 80054f2:	e7f2      	b.n	80054da <__libc_init_array+0x1e>
 80054f4:	08005e08 	.word	0x08005e08
 80054f8:	08005e08 	.word	0x08005e08
 80054fc:	08005e08 	.word	0x08005e08
 8005500:	08005e0c 	.word	0x08005e0c

08005504 <memset>:
 8005504:	4402      	add	r2, r0
 8005506:	4603      	mov	r3, r0
 8005508:	4293      	cmp	r3, r2
 800550a:	d100      	bne.n	800550e <memset+0xa>
 800550c:	4770      	bx	lr
 800550e:	f803 1b01 	strb.w	r1, [r3], #1
 8005512:	e7f9      	b.n	8005508 <memset+0x4>

08005514 <siprintf>:
 8005514:	b40e      	push	{r1, r2, r3}
 8005516:	b500      	push	{lr}
 8005518:	b09c      	sub	sp, #112	; 0x70
 800551a:	ab1d      	add	r3, sp, #116	; 0x74
 800551c:	9002      	str	r0, [sp, #8]
 800551e:	9006      	str	r0, [sp, #24]
 8005520:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005524:	4809      	ldr	r0, [pc, #36]	; (800554c <siprintf+0x38>)
 8005526:	9107      	str	r1, [sp, #28]
 8005528:	9104      	str	r1, [sp, #16]
 800552a:	4909      	ldr	r1, [pc, #36]	; (8005550 <siprintf+0x3c>)
 800552c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005530:	9105      	str	r1, [sp, #20]
 8005532:	6800      	ldr	r0, [r0, #0]
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	a902      	add	r1, sp, #8
 8005538:	f000 f868 	bl	800560c <_svfiprintf_r>
 800553c:	9b02      	ldr	r3, [sp, #8]
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	b01c      	add	sp, #112	; 0x70
 8005544:	f85d eb04 	ldr.w	lr, [sp], #4
 8005548:	b003      	add	sp, #12
 800554a:	4770      	bx	lr
 800554c:	2000000c 	.word	0x2000000c
 8005550:	ffff0208 	.word	0xffff0208

08005554 <__ssputs_r>:
 8005554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005558:	688e      	ldr	r6, [r1, #8]
 800555a:	429e      	cmp	r6, r3
 800555c:	4682      	mov	sl, r0
 800555e:	460c      	mov	r4, r1
 8005560:	4690      	mov	r8, r2
 8005562:	461f      	mov	r7, r3
 8005564:	d838      	bhi.n	80055d8 <__ssputs_r+0x84>
 8005566:	898a      	ldrh	r2, [r1, #12]
 8005568:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800556c:	d032      	beq.n	80055d4 <__ssputs_r+0x80>
 800556e:	6825      	ldr	r5, [r4, #0]
 8005570:	6909      	ldr	r1, [r1, #16]
 8005572:	eba5 0901 	sub.w	r9, r5, r1
 8005576:	6965      	ldr	r5, [r4, #20]
 8005578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800557c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005580:	3301      	adds	r3, #1
 8005582:	444b      	add	r3, r9
 8005584:	106d      	asrs	r5, r5, #1
 8005586:	429d      	cmp	r5, r3
 8005588:	bf38      	it	cc
 800558a:	461d      	movcc	r5, r3
 800558c:	0553      	lsls	r3, r2, #21
 800558e:	d531      	bpl.n	80055f4 <__ssputs_r+0xa0>
 8005590:	4629      	mov	r1, r5
 8005592:	f000 fb47 	bl	8005c24 <_malloc_r>
 8005596:	4606      	mov	r6, r0
 8005598:	b950      	cbnz	r0, 80055b0 <__ssputs_r+0x5c>
 800559a:	230c      	movs	r3, #12
 800559c:	f8ca 3000 	str.w	r3, [sl]
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055a6:	81a3      	strh	r3, [r4, #12]
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b0:	6921      	ldr	r1, [r4, #16]
 80055b2:	464a      	mov	r2, r9
 80055b4:	f000 fabe 	bl	8005b34 <memcpy>
 80055b8:	89a3      	ldrh	r3, [r4, #12]
 80055ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c2:	81a3      	strh	r3, [r4, #12]
 80055c4:	6126      	str	r6, [r4, #16]
 80055c6:	6165      	str	r5, [r4, #20]
 80055c8:	444e      	add	r6, r9
 80055ca:	eba5 0509 	sub.w	r5, r5, r9
 80055ce:	6026      	str	r6, [r4, #0]
 80055d0:	60a5      	str	r5, [r4, #8]
 80055d2:	463e      	mov	r6, r7
 80055d4:	42be      	cmp	r6, r7
 80055d6:	d900      	bls.n	80055da <__ssputs_r+0x86>
 80055d8:	463e      	mov	r6, r7
 80055da:	4632      	mov	r2, r6
 80055dc:	6820      	ldr	r0, [r4, #0]
 80055de:	4641      	mov	r1, r8
 80055e0:	f000 fab6 	bl	8005b50 <memmove>
 80055e4:	68a3      	ldr	r3, [r4, #8]
 80055e6:	6822      	ldr	r2, [r4, #0]
 80055e8:	1b9b      	subs	r3, r3, r6
 80055ea:	4432      	add	r2, r6
 80055ec:	60a3      	str	r3, [r4, #8]
 80055ee:	6022      	str	r2, [r4, #0]
 80055f0:	2000      	movs	r0, #0
 80055f2:	e7db      	b.n	80055ac <__ssputs_r+0x58>
 80055f4:	462a      	mov	r2, r5
 80055f6:	f000 fb6f 	bl	8005cd8 <_realloc_r>
 80055fa:	4606      	mov	r6, r0
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d1e1      	bne.n	80055c4 <__ssputs_r+0x70>
 8005600:	6921      	ldr	r1, [r4, #16]
 8005602:	4650      	mov	r0, sl
 8005604:	f000 fabe 	bl	8005b84 <_free_r>
 8005608:	e7c7      	b.n	800559a <__ssputs_r+0x46>
	...

0800560c <_svfiprintf_r>:
 800560c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005610:	4698      	mov	r8, r3
 8005612:	898b      	ldrh	r3, [r1, #12]
 8005614:	061b      	lsls	r3, r3, #24
 8005616:	b09d      	sub	sp, #116	; 0x74
 8005618:	4607      	mov	r7, r0
 800561a:	460d      	mov	r5, r1
 800561c:	4614      	mov	r4, r2
 800561e:	d50e      	bpl.n	800563e <_svfiprintf_r+0x32>
 8005620:	690b      	ldr	r3, [r1, #16]
 8005622:	b963      	cbnz	r3, 800563e <_svfiprintf_r+0x32>
 8005624:	2140      	movs	r1, #64	; 0x40
 8005626:	f000 fafd 	bl	8005c24 <_malloc_r>
 800562a:	6028      	str	r0, [r5, #0]
 800562c:	6128      	str	r0, [r5, #16]
 800562e:	b920      	cbnz	r0, 800563a <_svfiprintf_r+0x2e>
 8005630:	230c      	movs	r3, #12
 8005632:	603b      	str	r3, [r7, #0]
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	e0d1      	b.n	80057de <_svfiprintf_r+0x1d2>
 800563a:	2340      	movs	r3, #64	; 0x40
 800563c:	616b      	str	r3, [r5, #20]
 800563e:	2300      	movs	r3, #0
 8005640:	9309      	str	r3, [sp, #36]	; 0x24
 8005642:	2320      	movs	r3, #32
 8005644:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005648:	f8cd 800c 	str.w	r8, [sp, #12]
 800564c:	2330      	movs	r3, #48	; 0x30
 800564e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057f8 <_svfiprintf_r+0x1ec>
 8005652:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005656:	f04f 0901 	mov.w	r9, #1
 800565a:	4623      	mov	r3, r4
 800565c:	469a      	mov	sl, r3
 800565e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005662:	b10a      	cbz	r2, 8005668 <_svfiprintf_r+0x5c>
 8005664:	2a25      	cmp	r2, #37	; 0x25
 8005666:	d1f9      	bne.n	800565c <_svfiprintf_r+0x50>
 8005668:	ebba 0b04 	subs.w	fp, sl, r4
 800566c:	d00b      	beq.n	8005686 <_svfiprintf_r+0x7a>
 800566e:	465b      	mov	r3, fp
 8005670:	4622      	mov	r2, r4
 8005672:	4629      	mov	r1, r5
 8005674:	4638      	mov	r0, r7
 8005676:	f7ff ff6d 	bl	8005554 <__ssputs_r>
 800567a:	3001      	adds	r0, #1
 800567c:	f000 80aa 	beq.w	80057d4 <_svfiprintf_r+0x1c8>
 8005680:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005682:	445a      	add	r2, fp
 8005684:	9209      	str	r2, [sp, #36]	; 0x24
 8005686:	f89a 3000 	ldrb.w	r3, [sl]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 80a2 	beq.w	80057d4 <_svfiprintf_r+0x1c8>
 8005690:	2300      	movs	r3, #0
 8005692:	f04f 32ff 	mov.w	r2, #4294967295
 8005696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800569a:	f10a 0a01 	add.w	sl, sl, #1
 800569e:	9304      	str	r3, [sp, #16]
 80056a0:	9307      	str	r3, [sp, #28]
 80056a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056a6:	931a      	str	r3, [sp, #104]	; 0x68
 80056a8:	4654      	mov	r4, sl
 80056aa:	2205      	movs	r2, #5
 80056ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b0:	4851      	ldr	r0, [pc, #324]	; (80057f8 <_svfiprintf_r+0x1ec>)
 80056b2:	f7fa fd95 	bl	80001e0 <memchr>
 80056b6:	9a04      	ldr	r2, [sp, #16]
 80056b8:	b9d8      	cbnz	r0, 80056f2 <_svfiprintf_r+0xe6>
 80056ba:	06d0      	lsls	r0, r2, #27
 80056bc:	bf44      	itt	mi
 80056be:	2320      	movmi	r3, #32
 80056c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c4:	0711      	lsls	r1, r2, #28
 80056c6:	bf44      	itt	mi
 80056c8:	232b      	movmi	r3, #43	; 0x2b
 80056ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056ce:	f89a 3000 	ldrb.w	r3, [sl]
 80056d2:	2b2a      	cmp	r3, #42	; 0x2a
 80056d4:	d015      	beq.n	8005702 <_svfiprintf_r+0xf6>
 80056d6:	9a07      	ldr	r2, [sp, #28]
 80056d8:	4654      	mov	r4, sl
 80056da:	2000      	movs	r0, #0
 80056dc:	f04f 0c0a 	mov.w	ip, #10
 80056e0:	4621      	mov	r1, r4
 80056e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056e6:	3b30      	subs	r3, #48	; 0x30
 80056e8:	2b09      	cmp	r3, #9
 80056ea:	d94e      	bls.n	800578a <_svfiprintf_r+0x17e>
 80056ec:	b1b0      	cbz	r0, 800571c <_svfiprintf_r+0x110>
 80056ee:	9207      	str	r2, [sp, #28]
 80056f0:	e014      	b.n	800571c <_svfiprintf_r+0x110>
 80056f2:	eba0 0308 	sub.w	r3, r0, r8
 80056f6:	fa09 f303 	lsl.w	r3, r9, r3
 80056fa:	4313      	orrs	r3, r2
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	46a2      	mov	sl, r4
 8005700:	e7d2      	b.n	80056a8 <_svfiprintf_r+0x9c>
 8005702:	9b03      	ldr	r3, [sp, #12]
 8005704:	1d19      	adds	r1, r3, #4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	9103      	str	r1, [sp, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	bfbb      	ittet	lt
 800570e:	425b      	neglt	r3, r3
 8005710:	f042 0202 	orrlt.w	r2, r2, #2
 8005714:	9307      	strge	r3, [sp, #28]
 8005716:	9307      	strlt	r3, [sp, #28]
 8005718:	bfb8      	it	lt
 800571a:	9204      	strlt	r2, [sp, #16]
 800571c:	7823      	ldrb	r3, [r4, #0]
 800571e:	2b2e      	cmp	r3, #46	; 0x2e
 8005720:	d10c      	bne.n	800573c <_svfiprintf_r+0x130>
 8005722:	7863      	ldrb	r3, [r4, #1]
 8005724:	2b2a      	cmp	r3, #42	; 0x2a
 8005726:	d135      	bne.n	8005794 <_svfiprintf_r+0x188>
 8005728:	9b03      	ldr	r3, [sp, #12]
 800572a:	1d1a      	adds	r2, r3, #4
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	9203      	str	r2, [sp, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	bfb8      	it	lt
 8005734:	f04f 33ff 	movlt.w	r3, #4294967295
 8005738:	3402      	adds	r4, #2
 800573a:	9305      	str	r3, [sp, #20]
 800573c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005808 <_svfiprintf_r+0x1fc>
 8005740:	7821      	ldrb	r1, [r4, #0]
 8005742:	2203      	movs	r2, #3
 8005744:	4650      	mov	r0, sl
 8005746:	f7fa fd4b 	bl	80001e0 <memchr>
 800574a:	b140      	cbz	r0, 800575e <_svfiprintf_r+0x152>
 800574c:	2340      	movs	r3, #64	; 0x40
 800574e:	eba0 000a 	sub.w	r0, r0, sl
 8005752:	fa03 f000 	lsl.w	r0, r3, r0
 8005756:	9b04      	ldr	r3, [sp, #16]
 8005758:	4303      	orrs	r3, r0
 800575a:	3401      	adds	r4, #1
 800575c:	9304      	str	r3, [sp, #16]
 800575e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005762:	4826      	ldr	r0, [pc, #152]	; (80057fc <_svfiprintf_r+0x1f0>)
 8005764:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005768:	2206      	movs	r2, #6
 800576a:	f7fa fd39 	bl	80001e0 <memchr>
 800576e:	2800      	cmp	r0, #0
 8005770:	d038      	beq.n	80057e4 <_svfiprintf_r+0x1d8>
 8005772:	4b23      	ldr	r3, [pc, #140]	; (8005800 <_svfiprintf_r+0x1f4>)
 8005774:	bb1b      	cbnz	r3, 80057be <_svfiprintf_r+0x1b2>
 8005776:	9b03      	ldr	r3, [sp, #12]
 8005778:	3307      	adds	r3, #7
 800577a:	f023 0307 	bic.w	r3, r3, #7
 800577e:	3308      	adds	r3, #8
 8005780:	9303      	str	r3, [sp, #12]
 8005782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005784:	4433      	add	r3, r6
 8005786:	9309      	str	r3, [sp, #36]	; 0x24
 8005788:	e767      	b.n	800565a <_svfiprintf_r+0x4e>
 800578a:	fb0c 3202 	mla	r2, ip, r2, r3
 800578e:	460c      	mov	r4, r1
 8005790:	2001      	movs	r0, #1
 8005792:	e7a5      	b.n	80056e0 <_svfiprintf_r+0xd4>
 8005794:	2300      	movs	r3, #0
 8005796:	3401      	adds	r4, #1
 8005798:	9305      	str	r3, [sp, #20]
 800579a:	4619      	mov	r1, r3
 800579c:	f04f 0c0a 	mov.w	ip, #10
 80057a0:	4620      	mov	r0, r4
 80057a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057a6:	3a30      	subs	r2, #48	; 0x30
 80057a8:	2a09      	cmp	r2, #9
 80057aa:	d903      	bls.n	80057b4 <_svfiprintf_r+0x1a8>
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0c5      	beq.n	800573c <_svfiprintf_r+0x130>
 80057b0:	9105      	str	r1, [sp, #20]
 80057b2:	e7c3      	b.n	800573c <_svfiprintf_r+0x130>
 80057b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80057b8:	4604      	mov	r4, r0
 80057ba:	2301      	movs	r3, #1
 80057bc:	e7f0      	b.n	80057a0 <_svfiprintf_r+0x194>
 80057be:	ab03      	add	r3, sp, #12
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	462a      	mov	r2, r5
 80057c4:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <_svfiprintf_r+0x1f8>)
 80057c6:	a904      	add	r1, sp, #16
 80057c8:	4638      	mov	r0, r7
 80057ca:	f3af 8000 	nop.w
 80057ce:	1c42      	adds	r2, r0, #1
 80057d0:	4606      	mov	r6, r0
 80057d2:	d1d6      	bne.n	8005782 <_svfiprintf_r+0x176>
 80057d4:	89ab      	ldrh	r3, [r5, #12]
 80057d6:	065b      	lsls	r3, r3, #25
 80057d8:	f53f af2c 	bmi.w	8005634 <_svfiprintf_r+0x28>
 80057dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057de:	b01d      	add	sp, #116	; 0x74
 80057e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e4:	ab03      	add	r3, sp, #12
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	462a      	mov	r2, r5
 80057ea:	4b06      	ldr	r3, [pc, #24]	; (8005804 <_svfiprintf_r+0x1f8>)
 80057ec:	a904      	add	r1, sp, #16
 80057ee:	4638      	mov	r0, r7
 80057f0:	f000 f87a 	bl	80058e8 <_printf_i>
 80057f4:	e7eb      	b.n	80057ce <_svfiprintf_r+0x1c2>
 80057f6:	bf00      	nop
 80057f8:	08005dd4 	.word	0x08005dd4
 80057fc:	08005dde 	.word	0x08005dde
 8005800:	00000000 	.word	0x00000000
 8005804:	08005555 	.word	0x08005555
 8005808:	08005dda 	.word	0x08005dda

0800580c <_printf_common>:
 800580c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005810:	4616      	mov	r6, r2
 8005812:	4699      	mov	r9, r3
 8005814:	688a      	ldr	r2, [r1, #8]
 8005816:	690b      	ldr	r3, [r1, #16]
 8005818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800581c:	4293      	cmp	r3, r2
 800581e:	bfb8      	it	lt
 8005820:	4613      	movlt	r3, r2
 8005822:	6033      	str	r3, [r6, #0]
 8005824:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005828:	4607      	mov	r7, r0
 800582a:	460c      	mov	r4, r1
 800582c:	b10a      	cbz	r2, 8005832 <_printf_common+0x26>
 800582e:	3301      	adds	r3, #1
 8005830:	6033      	str	r3, [r6, #0]
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	0699      	lsls	r1, r3, #26
 8005836:	bf42      	ittt	mi
 8005838:	6833      	ldrmi	r3, [r6, #0]
 800583a:	3302      	addmi	r3, #2
 800583c:	6033      	strmi	r3, [r6, #0]
 800583e:	6825      	ldr	r5, [r4, #0]
 8005840:	f015 0506 	ands.w	r5, r5, #6
 8005844:	d106      	bne.n	8005854 <_printf_common+0x48>
 8005846:	f104 0a19 	add.w	sl, r4, #25
 800584a:	68e3      	ldr	r3, [r4, #12]
 800584c:	6832      	ldr	r2, [r6, #0]
 800584e:	1a9b      	subs	r3, r3, r2
 8005850:	42ab      	cmp	r3, r5
 8005852:	dc26      	bgt.n	80058a2 <_printf_common+0x96>
 8005854:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005858:	1e13      	subs	r3, r2, #0
 800585a:	6822      	ldr	r2, [r4, #0]
 800585c:	bf18      	it	ne
 800585e:	2301      	movne	r3, #1
 8005860:	0692      	lsls	r2, r2, #26
 8005862:	d42b      	bmi.n	80058bc <_printf_common+0xb0>
 8005864:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005868:	4649      	mov	r1, r9
 800586a:	4638      	mov	r0, r7
 800586c:	47c0      	blx	r8
 800586e:	3001      	adds	r0, #1
 8005870:	d01e      	beq.n	80058b0 <_printf_common+0xa4>
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	68e5      	ldr	r5, [r4, #12]
 8005876:	6832      	ldr	r2, [r6, #0]
 8005878:	f003 0306 	and.w	r3, r3, #6
 800587c:	2b04      	cmp	r3, #4
 800587e:	bf08      	it	eq
 8005880:	1aad      	subeq	r5, r5, r2
 8005882:	68a3      	ldr	r3, [r4, #8]
 8005884:	6922      	ldr	r2, [r4, #16]
 8005886:	bf0c      	ite	eq
 8005888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800588c:	2500      	movne	r5, #0
 800588e:	4293      	cmp	r3, r2
 8005890:	bfc4      	itt	gt
 8005892:	1a9b      	subgt	r3, r3, r2
 8005894:	18ed      	addgt	r5, r5, r3
 8005896:	2600      	movs	r6, #0
 8005898:	341a      	adds	r4, #26
 800589a:	42b5      	cmp	r5, r6
 800589c:	d11a      	bne.n	80058d4 <_printf_common+0xc8>
 800589e:	2000      	movs	r0, #0
 80058a0:	e008      	b.n	80058b4 <_printf_common+0xa8>
 80058a2:	2301      	movs	r3, #1
 80058a4:	4652      	mov	r2, sl
 80058a6:	4649      	mov	r1, r9
 80058a8:	4638      	mov	r0, r7
 80058aa:	47c0      	blx	r8
 80058ac:	3001      	adds	r0, #1
 80058ae:	d103      	bne.n	80058b8 <_printf_common+0xac>
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b8:	3501      	adds	r5, #1
 80058ba:	e7c6      	b.n	800584a <_printf_common+0x3e>
 80058bc:	18e1      	adds	r1, r4, r3
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	2030      	movs	r0, #48	; 0x30
 80058c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058c6:	4422      	add	r2, r4
 80058c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058d0:	3302      	adds	r3, #2
 80058d2:	e7c7      	b.n	8005864 <_printf_common+0x58>
 80058d4:	2301      	movs	r3, #1
 80058d6:	4622      	mov	r2, r4
 80058d8:	4649      	mov	r1, r9
 80058da:	4638      	mov	r0, r7
 80058dc:	47c0      	blx	r8
 80058de:	3001      	adds	r0, #1
 80058e0:	d0e6      	beq.n	80058b0 <_printf_common+0xa4>
 80058e2:	3601      	adds	r6, #1
 80058e4:	e7d9      	b.n	800589a <_printf_common+0x8e>
	...

080058e8 <_printf_i>:
 80058e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058ec:	460c      	mov	r4, r1
 80058ee:	4691      	mov	r9, r2
 80058f0:	7e27      	ldrb	r7, [r4, #24]
 80058f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80058f4:	2f78      	cmp	r7, #120	; 0x78
 80058f6:	4680      	mov	r8, r0
 80058f8:	469a      	mov	sl, r3
 80058fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058fe:	d807      	bhi.n	8005910 <_printf_i+0x28>
 8005900:	2f62      	cmp	r7, #98	; 0x62
 8005902:	d80a      	bhi.n	800591a <_printf_i+0x32>
 8005904:	2f00      	cmp	r7, #0
 8005906:	f000 80d8 	beq.w	8005aba <_printf_i+0x1d2>
 800590a:	2f58      	cmp	r7, #88	; 0x58
 800590c:	f000 80a3 	beq.w	8005a56 <_printf_i+0x16e>
 8005910:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005914:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005918:	e03a      	b.n	8005990 <_printf_i+0xa8>
 800591a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800591e:	2b15      	cmp	r3, #21
 8005920:	d8f6      	bhi.n	8005910 <_printf_i+0x28>
 8005922:	a001      	add	r0, pc, #4	; (adr r0, 8005928 <_printf_i+0x40>)
 8005924:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005928:	08005981 	.word	0x08005981
 800592c:	08005995 	.word	0x08005995
 8005930:	08005911 	.word	0x08005911
 8005934:	08005911 	.word	0x08005911
 8005938:	08005911 	.word	0x08005911
 800593c:	08005911 	.word	0x08005911
 8005940:	08005995 	.word	0x08005995
 8005944:	08005911 	.word	0x08005911
 8005948:	08005911 	.word	0x08005911
 800594c:	08005911 	.word	0x08005911
 8005950:	08005911 	.word	0x08005911
 8005954:	08005aa1 	.word	0x08005aa1
 8005958:	080059c5 	.word	0x080059c5
 800595c:	08005a83 	.word	0x08005a83
 8005960:	08005911 	.word	0x08005911
 8005964:	08005911 	.word	0x08005911
 8005968:	08005ac3 	.word	0x08005ac3
 800596c:	08005911 	.word	0x08005911
 8005970:	080059c5 	.word	0x080059c5
 8005974:	08005911 	.word	0x08005911
 8005978:	08005911 	.word	0x08005911
 800597c:	08005a8b 	.word	0x08005a8b
 8005980:	680b      	ldr	r3, [r1, #0]
 8005982:	1d1a      	adds	r2, r3, #4
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	600a      	str	r2, [r1, #0]
 8005988:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800598c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005990:	2301      	movs	r3, #1
 8005992:	e0a3      	b.n	8005adc <_printf_i+0x1f4>
 8005994:	6825      	ldr	r5, [r4, #0]
 8005996:	6808      	ldr	r0, [r1, #0]
 8005998:	062e      	lsls	r6, r5, #24
 800599a:	f100 0304 	add.w	r3, r0, #4
 800599e:	d50a      	bpl.n	80059b6 <_printf_i+0xce>
 80059a0:	6805      	ldr	r5, [r0, #0]
 80059a2:	600b      	str	r3, [r1, #0]
 80059a4:	2d00      	cmp	r5, #0
 80059a6:	da03      	bge.n	80059b0 <_printf_i+0xc8>
 80059a8:	232d      	movs	r3, #45	; 0x2d
 80059aa:	426d      	negs	r5, r5
 80059ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059b0:	485e      	ldr	r0, [pc, #376]	; (8005b2c <_printf_i+0x244>)
 80059b2:	230a      	movs	r3, #10
 80059b4:	e019      	b.n	80059ea <_printf_i+0x102>
 80059b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80059ba:	6805      	ldr	r5, [r0, #0]
 80059bc:	600b      	str	r3, [r1, #0]
 80059be:	bf18      	it	ne
 80059c0:	b22d      	sxthne	r5, r5
 80059c2:	e7ef      	b.n	80059a4 <_printf_i+0xbc>
 80059c4:	680b      	ldr	r3, [r1, #0]
 80059c6:	6825      	ldr	r5, [r4, #0]
 80059c8:	1d18      	adds	r0, r3, #4
 80059ca:	6008      	str	r0, [r1, #0]
 80059cc:	0628      	lsls	r0, r5, #24
 80059ce:	d501      	bpl.n	80059d4 <_printf_i+0xec>
 80059d0:	681d      	ldr	r5, [r3, #0]
 80059d2:	e002      	b.n	80059da <_printf_i+0xf2>
 80059d4:	0669      	lsls	r1, r5, #25
 80059d6:	d5fb      	bpl.n	80059d0 <_printf_i+0xe8>
 80059d8:	881d      	ldrh	r5, [r3, #0]
 80059da:	4854      	ldr	r0, [pc, #336]	; (8005b2c <_printf_i+0x244>)
 80059dc:	2f6f      	cmp	r7, #111	; 0x6f
 80059de:	bf0c      	ite	eq
 80059e0:	2308      	moveq	r3, #8
 80059e2:	230a      	movne	r3, #10
 80059e4:	2100      	movs	r1, #0
 80059e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059ea:	6866      	ldr	r6, [r4, #4]
 80059ec:	60a6      	str	r6, [r4, #8]
 80059ee:	2e00      	cmp	r6, #0
 80059f0:	bfa2      	ittt	ge
 80059f2:	6821      	ldrge	r1, [r4, #0]
 80059f4:	f021 0104 	bicge.w	r1, r1, #4
 80059f8:	6021      	strge	r1, [r4, #0]
 80059fa:	b90d      	cbnz	r5, 8005a00 <_printf_i+0x118>
 80059fc:	2e00      	cmp	r6, #0
 80059fe:	d04d      	beq.n	8005a9c <_printf_i+0x1b4>
 8005a00:	4616      	mov	r6, r2
 8005a02:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a06:	fb03 5711 	mls	r7, r3, r1, r5
 8005a0a:	5dc7      	ldrb	r7, [r0, r7]
 8005a0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a10:	462f      	mov	r7, r5
 8005a12:	42bb      	cmp	r3, r7
 8005a14:	460d      	mov	r5, r1
 8005a16:	d9f4      	bls.n	8005a02 <_printf_i+0x11a>
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d10b      	bne.n	8005a34 <_printf_i+0x14c>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	07df      	lsls	r7, r3, #31
 8005a20:	d508      	bpl.n	8005a34 <_printf_i+0x14c>
 8005a22:	6923      	ldr	r3, [r4, #16]
 8005a24:	6861      	ldr	r1, [r4, #4]
 8005a26:	4299      	cmp	r1, r3
 8005a28:	bfde      	ittt	le
 8005a2a:	2330      	movle	r3, #48	; 0x30
 8005a2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a34:	1b92      	subs	r2, r2, r6
 8005a36:	6122      	str	r2, [r4, #16]
 8005a38:	f8cd a000 	str.w	sl, [sp]
 8005a3c:	464b      	mov	r3, r9
 8005a3e:	aa03      	add	r2, sp, #12
 8005a40:	4621      	mov	r1, r4
 8005a42:	4640      	mov	r0, r8
 8005a44:	f7ff fee2 	bl	800580c <_printf_common>
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d14c      	bne.n	8005ae6 <_printf_i+0x1fe>
 8005a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a50:	b004      	add	sp, #16
 8005a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a56:	4835      	ldr	r0, [pc, #212]	; (8005b2c <_printf_i+0x244>)
 8005a58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	680e      	ldr	r6, [r1, #0]
 8005a60:	061f      	lsls	r7, r3, #24
 8005a62:	f856 5b04 	ldr.w	r5, [r6], #4
 8005a66:	600e      	str	r6, [r1, #0]
 8005a68:	d514      	bpl.n	8005a94 <_printf_i+0x1ac>
 8005a6a:	07d9      	lsls	r1, r3, #31
 8005a6c:	bf44      	itt	mi
 8005a6e:	f043 0320 	orrmi.w	r3, r3, #32
 8005a72:	6023      	strmi	r3, [r4, #0]
 8005a74:	b91d      	cbnz	r5, 8005a7e <_printf_i+0x196>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	f023 0320 	bic.w	r3, r3, #32
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	2310      	movs	r3, #16
 8005a80:	e7b0      	b.n	80059e4 <_printf_i+0xfc>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	f043 0320 	orr.w	r3, r3, #32
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	2378      	movs	r3, #120	; 0x78
 8005a8c:	4828      	ldr	r0, [pc, #160]	; (8005b30 <_printf_i+0x248>)
 8005a8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a92:	e7e3      	b.n	8005a5c <_printf_i+0x174>
 8005a94:	065e      	lsls	r6, r3, #25
 8005a96:	bf48      	it	mi
 8005a98:	b2ad      	uxthmi	r5, r5
 8005a9a:	e7e6      	b.n	8005a6a <_printf_i+0x182>
 8005a9c:	4616      	mov	r6, r2
 8005a9e:	e7bb      	b.n	8005a18 <_printf_i+0x130>
 8005aa0:	680b      	ldr	r3, [r1, #0]
 8005aa2:	6826      	ldr	r6, [r4, #0]
 8005aa4:	6960      	ldr	r0, [r4, #20]
 8005aa6:	1d1d      	adds	r5, r3, #4
 8005aa8:	600d      	str	r5, [r1, #0]
 8005aaa:	0635      	lsls	r5, r6, #24
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	d501      	bpl.n	8005ab4 <_printf_i+0x1cc>
 8005ab0:	6018      	str	r0, [r3, #0]
 8005ab2:	e002      	b.n	8005aba <_printf_i+0x1d2>
 8005ab4:	0671      	lsls	r1, r6, #25
 8005ab6:	d5fb      	bpl.n	8005ab0 <_printf_i+0x1c8>
 8005ab8:	8018      	strh	r0, [r3, #0]
 8005aba:	2300      	movs	r3, #0
 8005abc:	6123      	str	r3, [r4, #16]
 8005abe:	4616      	mov	r6, r2
 8005ac0:	e7ba      	b.n	8005a38 <_printf_i+0x150>
 8005ac2:	680b      	ldr	r3, [r1, #0]
 8005ac4:	1d1a      	adds	r2, r3, #4
 8005ac6:	600a      	str	r2, [r1, #0]
 8005ac8:	681e      	ldr	r6, [r3, #0]
 8005aca:	6862      	ldr	r2, [r4, #4]
 8005acc:	2100      	movs	r1, #0
 8005ace:	4630      	mov	r0, r6
 8005ad0:	f7fa fb86 	bl	80001e0 <memchr>
 8005ad4:	b108      	cbz	r0, 8005ada <_printf_i+0x1f2>
 8005ad6:	1b80      	subs	r0, r0, r6
 8005ad8:	6060      	str	r0, [r4, #4]
 8005ada:	6863      	ldr	r3, [r4, #4]
 8005adc:	6123      	str	r3, [r4, #16]
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ae4:	e7a8      	b.n	8005a38 <_printf_i+0x150>
 8005ae6:	6923      	ldr	r3, [r4, #16]
 8005ae8:	4632      	mov	r2, r6
 8005aea:	4649      	mov	r1, r9
 8005aec:	4640      	mov	r0, r8
 8005aee:	47d0      	blx	sl
 8005af0:	3001      	adds	r0, #1
 8005af2:	d0ab      	beq.n	8005a4c <_printf_i+0x164>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	079b      	lsls	r3, r3, #30
 8005af8:	d413      	bmi.n	8005b22 <_printf_i+0x23a>
 8005afa:	68e0      	ldr	r0, [r4, #12]
 8005afc:	9b03      	ldr	r3, [sp, #12]
 8005afe:	4298      	cmp	r0, r3
 8005b00:	bfb8      	it	lt
 8005b02:	4618      	movlt	r0, r3
 8005b04:	e7a4      	b.n	8005a50 <_printf_i+0x168>
 8005b06:	2301      	movs	r3, #1
 8005b08:	4632      	mov	r2, r6
 8005b0a:	4649      	mov	r1, r9
 8005b0c:	4640      	mov	r0, r8
 8005b0e:	47d0      	blx	sl
 8005b10:	3001      	adds	r0, #1
 8005b12:	d09b      	beq.n	8005a4c <_printf_i+0x164>
 8005b14:	3501      	adds	r5, #1
 8005b16:	68e3      	ldr	r3, [r4, #12]
 8005b18:	9903      	ldr	r1, [sp, #12]
 8005b1a:	1a5b      	subs	r3, r3, r1
 8005b1c:	42ab      	cmp	r3, r5
 8005b1e:	dcf2      	bgt.n	8005b06 <_printf_i+0x21e>
 8005b20:	e7eb      	b.n	8005afa <_printf_i+0x212>
 8005b22:	2500      	movs	r5, #0
 8005b24:	f104 0619 	add.w	r6, r4, #25
 8005b28:	e7f5      	b.n	8005b16 <_printf_i+0x22e>
 8005b2a:	bf00      	nop
 8005b2c:	08005de5 	.word	0x08005de5
 8005b30:	08005df6 	.word	0x08005df6

08005b34 <memcpy>:
 8005b34:	440a      	add	r2, r1
 8005b36:	4291      	cmp	r1, r2
 8005b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b3c:	d100      	bne.n	8005b40 <memcpy+0xc>
 8005b3e:	4770      	bx	lr
 8005b40:	b510      	push	{r4, lr}
 8005b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b4a:	4291      	cmp	r1, r2
 8005b4c:	d1f9      	bne.n	8005b42 <memcpy+0xe>
 8005b4e:	bd10      	pop	{r4, pc}

08005b50 <memmove>:
 8005b50:	4288      	cmp	r0, r1
 8005b52:	b510      	push	{r4, lr}
 8005b54:	eb01 0402 	add.w	r4, r1, r2
 8005b58:	d902      	bls.n	8005b60 <memmove+0x10>
 8005b5a:	4284      	cmp	r4, r0
 8005b5c:	4623      	mov	r3, r4
 8005b5e:	d807      	bhi.n	8005b70 <memmove+0x20>
 8005b60:	1e43      	subs	r3, r0, #1
 8005b62:	42a1      	cmp	r1, r4
 8005b64:	d008      	beq.n	8005b78 <memmove+0x28>
 8005b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b6e:	e7f8      	b.n	8005b62 <memmove+0x12>
 8005b70:	4402      	add	r2, r0
 8005b72:	4601      	mov	r1, r0
 8005b74:	428a      	cmp	r2, r1
 8005b76:	d100      	bne.n	8005b7a <memmove+0x2a>
 8005b78:	bd10      	pop	{r4, pc}
 8005b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b82:	e7f7      	b.n	8005b74 <memmove+0x24>

08005b84 <_free_r>:
 8005b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b86:	2900      	cmp	r1, #0
 8005b88:	d048      	beq.n	8005c1c <_free_r+0x98>
 8005b8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b8e:	9001      	str	r0, [sp, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f1a1 0404 	sub.w	r4, r1, #4
 8005b96:	bfb8      	it	lt
 8005b98:	18e4      	addlt	r4, r4, r3
 8005b9a:	f000 f8d3 	bl	8005d44 <__malloc_lock>
 8005b9e:	4a20      	ldr	r2, [pc, #128]	; (8005c20 <_free_r+0x9c>)
 8005ba0:	9801      	ldr	r0, [sp, #4]
 8005ba2:	6813      	ldr	r3, [r2, #0]
 8005ba4:	4615      	mov	r5, r2
 8005ba6:	b933      	cbnz	r3, 8005bb6 <_free_r+0x32>
 8005ba8:	6063      	str	r3, [r4, #4]
 8005baa:	6014      	str	r4, [r2, #0]
 8005bac:	b003      	add	sp, #12
 8005bae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bb2:	f000 b8cd 	b.w	8005d50 <__malloc_unlock>
 8005bb6:	42a3      	cmp	r3, r4
 8005bb8:	d90b      	bls.n	8005bd2 <_free_r+0x4e>
 8005bba:	6821      	ldr	r1, [r4, #0]
 8005bbc:	1862      	adds	r2, r4, r1
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	bf04      	itt	eq
 8005bc2:	681a      	ldreq	r2, [r3, #0]
 8005bc4:	685b      	ldreq	r3, [r3, #4]
 8005bc6:	6063      	str	r3, [r4, #4]
 8005bc8:	bf04      	itt	eq
 8005bca:	1852      	addeq	r2, r2, r1
 8005bcc:	6022      	streq	r2, [r4, #0]
 8005bce:	602c      	str	r4, [r5, #0]
 8005bd0:	e7ec      	b.n	8005bac <_free_r+0x28>
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	b10b      	cbz	r3, 8005bdc <_free_r+0x58>
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	d9fa      	bls.n	8005bd2 <_free_r+0x4e>
 8005bdc:	6811      	ldr	r1, [r2, #0]
 8005bde:	1855      	adds	r5, r2, r1
 8005be0:	42a5      	cmp	r5, r4
 8005be2:	d10b      	bne.n	8005bfc <_free_r+0x78>
 8005be4:	6824      	ldr	r4, [r4, #0]
 8005be6:	4421      	add	r1, r4
 8005be8:	1854      	adds	r4, r2, r1
 8005bea:	42a3      	cmp	r3, r4
 8005bec:	6011      	str	r1, [r2, #0]
 8005bee:	d1dd      	bne.n	8005bac <_free_r+0x28>
 8005bf0:	681c      	ldr	r4, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	6053      	str	r3, [r2, #4]
 8005bf6:	4421      	add	r1, r4
 8005bf8:	6011      	str	r1, [r2, #0]
 8005bfa:	e7d7      	b.n	8005bac <_free_r+0x28>
 8005bfc:	d902      	bls.n	8005c04 <_free_r+0x80>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	6003      	str	r3, [r0, #0]
 8005c02:	e7d3      	b.n	8005bac <_free_r+0x28>
 8005c04:	6825      	ldr	r5, [r4, #0]
 8005c06:	1961      	adds	r1, r4, r5
 8005c08:	428b      	cmp	r3, r1
 8005c0a:	bf04      	itt	eq
 8005c0c:	6819      	ldreq	r1, [r3, #0]
 8005c0e:	685b      	ldreq	r3, [r3, #4]
 8005c10:	6063      	str	r3, [r4, #4]
 8005c12:	bf04      	itt	eq
 8005c14:	1949      	addeq	r1, r1, r5
 8005c16:	6021      	streq	r1, [r4, #0]
 8005c18:	6054      	str	r4, [r2, #4]
 8005c1a:	e7c7      	b.n	8005bac <_free_r+0x28>
 8005c1c:	b003      	add	sp, #12
 8005c1e:	bd30      	pop	{r4, r5, pc}
 8005c20:	20000094 	.word	0x20000094

08005c24 <_malloc_r>:
 8005c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c26:	1ccd      	adds	r5, r1, #3
 8005c28:	f025 0503 	bic.w	r5, r5, #3
 8005c2c:	3508      	adds	r5, #8
 8005c2e:	2d0c      	cmp	r5, #12
 8005c30:	bf38      	it	cc
 8005c32:	250c      	movcc	r5, #12
 8005c34:	2d00      	cmp	r5, #0
 8005c36:	4606      	mov	r6, r0
 8005c38:	db01      	blt.n	8005c3e <_malloc_r+0x1a>
 8005c3a:	42a9      	cmp	r1, r5
 8005c3c:	d903      	bls.n	8005c46 <_malloc_r+0x22>
 8005c3e:	230c      	movs	r3, #12
 8005c40:	6033      	str	r3, [r6, #0]
 8005c42:	2000      	movs	r0, #0
 8005c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c46:	f000 f87d 	bl	8005d44 <__malloc_lock>
 8005c4a:	4921      	ldr	r1, [pc, #132]	; (8005cd0 <_malloc_r+0xac>)
 8005c4c:	680a      	ldr	r2, [r1, #0]
 8005c4e:	4614      	mov	r4, r2
 8005c50:	b99c      	cbnz	r4, 8005c7a <_malloc_r+0x56>
 8005c52:	4f20      	ldr	r7, [pc, #128]	; (8005cd4 <_malloc_r+0xb0>)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	b923      	cbnz	r3, 8005c62 <_malloc_r+0x3e>
 8005c58:	4621      	mov	r1, r4
 8005c5a:	4630      	mov	r0, r6
 8005c5c:	f000 f862 	bl	8005d24 <_sbrk_r>
 8005c60:	6038      	str	r0, [r7, #0]
 8005c62:	4629      	mov	r1, r5
 8005c64:	4630      	mov	r0, r6
 8005c66:	f000 f85d 	bl	8005d24 <_sbrk_r>
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	d123      	bne.n	8005cb6 <_malloc_r+0x92>
 8005c6e:	230c      	movs	r3, #12
 8005c70:	6033      	str	r3, [r6, #0]
 8005c72:	4630      	mov	r0, r6
 8005c74:	f000 f86c 	bl	8005d50 <__malloc_unlock>
 8005c78:	e7e3      	b.n	8005c42 <_malloc_r+0x1e>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	1b5b      	subs	r3, r3, r5
 8005c7e:	d417      	bmi.n	8005cb0 <_malloc_r+0x8c>
 8005c80:	2b0b      	cmp	r3, #11
 8005c82:	d903      	bls.n	8005c8c <_malloc_r+0x68>
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	441c      	add	r4, r3
 8005c88:	6025      	str	r5, [r4, #0]
 8005c8a:	e004      	b.n	8005c96 <_malloc_r+0x72>
 8005c8c:	6863      	ldr	r3, [r4, #4]
 8005c8e:	42a2      	cmp	r2, r4
 8005c90:	bf0c      	ite	eq
 8005c92:	600b      	streq	r3, [r1, #0]
 8005c94:	6053      	strne	r3, [r2, #4]
 8005c96:	4630      	mov	r0, r6
 8005c98:	f000 f85a 	bl	8005d50 <__malloc_unlock>
 8005c9c:	f104 000b 	add.w	r0, r4, #11
 8005ca0:	1d23      	adds	r3, r4, #4
 8005ca2:	f020 0007 	bic.w	r0, r0, #7
 8005ca6:	1ac2      	subs	r2, r0, r3
 8005ca8:	d0cc      	beq.n	8005c44 <_malloc_r+0x20>
 8005caa:	1a1b      	subs	r3, r3, r0
 8005cac:	50a3      	str	r3, [r4, r2]
 8005cae:	e7c9      	b.n	8005c44 <_malloc_r+0x20>
 8005cb0:	4622      	mov	r2, r4
 8005cb2:	6864      	ldr	r4, [r4, #4]
 8005cb4:	e7cc      	b.n	8005c50 <_malloc_r+0x2c>
 8005cb6:	1cc4      	adds	r4, r0, #3
 8005cb8:	f024 0403 	bic.w	r4, r4, #3
 8005cbc:	42a0      	cmp	r0, r4
 8005cbe:	d0e3      	beq.n	8005c88 <_malloc_r+0x64>
 8005cc0:	1a21      	subs	r1, r4, r0
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f000 f82e 	bl	8005d24 <_sbrk_r>
 8005cc8:	3001      	adds	r0, #1
 8005cca:	d1dd      	bne.n	8005c88 <_malloc_r+0x64>
 8005ccc:	e7cf      	b.n	8005c6e <_malloc_r+0x4a>
 8005cce:	bf00      	nop
 8005cd0:	20000094 	.word	0x20000094
 8005cd4:	20000098 	.word	0x20000098

08005cd8 <_realloc_r>:
 8005cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cda:	4607      	mov	r7, r0
 8005cdc:	4614      	mov	r4, r2
 8005cde:	460e      	mov	r6, r1
 8005ce0:	b921      	cbnz	r1, 8005cec <_realloc_r+0x14>
 8005ce2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	f7ff bf9c 	b.w	8005c24 <_malloc_r>
 8005cec:	b922      	cbnz	r2, 8005cf8 <_realloc_r+0x20>
 8005cee:	f7ff ff49 	bl	8005b84 <_free_r>
 8005cf2:	4625      	mov	r5, r4
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cf8:	f000 f830 	bl	8005d5c <_malloc_usable_size_r>
 8005cfc:	42a0      	cmp	r0, r4
 8005cfe:	d20f      	bcs.n	8005d20 <_realloc_r+0x48>
 8005d00:	4621      	mov	r1, r4
 8005d02:	4638      	mov	r0, r7
 8005d04:	f7ff ff8e 	bl	8005c24 <_malloc_r>
 8005d08:	4605      	mov	r5, r0
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d0f2      	beq.n	8005cf4 <_realloc_r+0x1c>
 8005d0e:	4631      	mov	r1, r6
 8005d10:	4622      	mov	r2, r4
 8005d12:	f7ff ff0f 	bl	8005b34 <memcpy>
 8005d16:	4631      	mov	r1, r6
 8005d18:	4638      	mov	r0, r7
 8005d1a:	f7ff ff33 	bl	8005b84 <_free_r>
 8005d1e:	e7e9      	b.n	8005cf4 <_realloc_r+0x1c>
 8005d20:	4635      	mov	r5, r6
 8005d22:	e7e7      	b.n	8005cf4 <_realloc_r+0x1c>

08005d24 <_sbrk_r>:
 8005d24:	b538      	push	{r3, r4, r5, lr}
 8005d26:	4d06      	ldr	r5, [pc, #24]	; (8005d40 <_sbrk_r+0x1c>)
 8005d28:	2300      	movs	r3, #0
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	4608      	mov	r0, r1
 8005d2e:	602b      	str	r3, [r5, #0]
 8005d30:	f7fa fdca 	bl	80008c8 <_sbrk>
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	d102      	bne.n	8005d3e <_sbrk_r+0x1a>
 8005d38:	682b      	ldr	r3, [r5, #0]
 8005d3a:	b103      	cbz	r3, 8005d3e <_sbrk_r+0x1a>
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	bd38      	pop	{r3, r4, r5, pc}
 8005d40:	200001dc 	.word	0x200001dc

08005d44 <__malloc_lock>:
 8005d44:	4801      	ldr	r0, [pc, #4]	; (8005d4c <__malloc_lock+0x8>)
 8005d46:	f000 b811 	b.w	8005d6c <__retarget_lock_acquire_recursive>
 8005d4a:	bf00      	nop
 8005d4c:	200001e4 	.word	0x200001e4

08005d50 <__malloc_unlock>:
 8005d50:	4801      	ldr	r0, [pc, #4]	; (8005d58 <__malloc_unlock+0x8>)
 8005d52:	f000 b80c 	b.w	8005d6e <__retarget_lock_release_recursive>
 8005d56:	bf00      	nop
 8005d58:	200001e4 	.word	0x200001e4

08005d5c <_malloc_usable_size_r>:
 8005d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d60:	1f18      	subs	r0, r3, #4
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	bfbc      	itt	lt
 8005d66:	580b      	ldrlt	r3, [r1, r0]
 8005d68:	18c0      	addlt	r0, r0, r3
 8005d6a:	4770      	bx	lr

08005d6c <__retarget_lock_acquire_recursive>:
 8005d6c:	4770      	bx	lr

08005d6e <__retarget_lock_release_recursive>:
 8005d6e:	4770      	bx	lr

08005d70 <_init>:
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d72:	bf00      	nop
 8005d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d76:	bc08      	pop	{r3}
 8005d78:	469e      	mov	lr, r3
 8005d7a:	4770      	bx	lr

08005d7c <_fini>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	bf00      	nop
 8005d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d82:	bc08      	pop	{r3}
 8005d84:	469e      	mov	lr, r3
 8005d86:	4770      	bx	lr
