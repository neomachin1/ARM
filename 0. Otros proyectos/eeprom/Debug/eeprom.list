
eeprom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d60  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004f60  08004f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff8  08004ff8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005000  08005000  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005000  08005000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005004  08005004  00015004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000070  08005078  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  08005078  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014189  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d5  00000000  00000000  00034227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00036b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d50  00000000  00000000  00037958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f52  00000000  00000000  000386a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012604  00000000  00000000  000605fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4a5a  00000000  00000000  00072bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00167658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f54  00000000  00000000  001676ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004f48 	.word	0x08004f48

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004f48 	.word	0x08004f48

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <bytestowrite>:
/*****************************************************************************************************************************************/
uint8_t bytes_temp[4];

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	460a      	mov	r2, r1
 80005e2:	80fb      	strh	r3, [r7, #6]
 80005e4:	4613      	mov	r3, r2
 80005e6:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 80005e8:	88fa      	ldrh	r2, [r7, #6]
 80005ea:	88bb      	ldrh	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	2b1f      	cmp	r3, #31
 80005f0:	dc01      	bgt.n	80005f6 <bytestowrite+0x1e>
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	e003      	b.n	80005fe <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	f1c3 0320 	rsb	r3, r3, #32
 80005fc:	b29b      	uxth	r3, r3
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
	...

0800060c <EEPROM_Read>:
 * @offset is the start byte offset in the page. Range from 0 to PAGE_SIZE-1
 * @data is the pointer to the data to write in bytes
 * @size is the size of the data
 */
void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08e      	sub	sp, #56	; 0x38
 8000610:	af04      	add	r7, sp, #16
 8000612:	60ba      	str	r2, [r7, #8]
 8000614:	461a      	mov	r2, r3
 8000616:	4603      	mov	r3, r0
 8000618:	81fb      	strh	r3, [r7, #14]
 800061a:	460b      	mov	r3, r1
 800061c:	81bb      	strh	r3, [r7, #12]
 800061e:	4613      	mov	r3, r2
 8000620:	80fb      	strh	r3, [r7, #6]
	int paddrposition = log(PAGE_SIZE)/log(2);
 8000622:	2305      	movs	r3, #5
 8000624:	61fb      	str	r3, [r7, #28]

	uint16_t startPage = page;
 8000626:	89fb      	ldrh	r3, [r7, #14]
 8000628:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t endPage = page + ((size+offset)/PAGE_SIZE);
 800062a:	88fa      	ldrh	r2, [r7, #6]
 800062c:	89bb      	ldrh	r3, [r7, #12]
 800062e:	4413      	add	r3, r2
 8000630:	2b00      	cmp	r3, #0
 8000632:	da00      	bge.n	8000636 <EEPROM_Read+0x2a>
 8000634:	331f      	adds	r3, #31
 8000636:	115b      	asrs	r3, r3, #5
 8000638:	b29a      	uxth	r2, r3
 800063a:	89fb      	ldrh	r3, [r7, #14]
 800063c:	4413      	add	r3, r2
 800063e:	837b      	strh	r3, [r7, #26]

	uint16_t numofpages = (endPage-startPage) + 1;
 8000640:	8b7a      	ldrh	r2, [r7, #26]
 8000642:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	b29b      	uxth	r3, r3
 8000648:	3301      	adds	r3, #1
 800064a:	833b      	strh	r3, [r7, #24]
	uint16_t pos=0;
 800064c:	2300      	movs	r3, #0
 800064e:	84bb      	strh	r3, [r7, #36]	; 0x24

	for (int i=0; i<numofpages; i++)
 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]
 8000654:	e031      	b.n	80006ba <EEPROM_Read+0xae>
	{
		uint16_t MemAddress = startPage<<paddrposition | offset;
 8000656:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	fa02 f303 	lsl.w	r3, r2, r3
 800065e:	b21a      	sxth	r2, r3
 8000660:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000664:	4313      	orrs	r3, r2
 8000666:	b21b      	sxth	r3, r3
 8000668:	82fb      	strh	r3, [r7, #22]
		uint16_t bytesremaining = bytestowrite(size, offset);
 800066a:	89ba      	ldrh	r2, [r7, #12]
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	4611      	mov	r1, r2
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff ffb1 	bl	80005d8 <bytestowrite>
 8000676:	4603      	mov	r3, r0
 8000678:	82bb      	strh	r3, [r7, #20]
		HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, MemAddress, 2, &data[pos], bytesremaining, 1000);
 800067a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800067c:	68ba      	ldr	r2, [r7, #8]
 800067e:	4413      	add	r3, r2
 8000680:	8af9      	ldrh	r1, [r7, #22]
 8000682:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000686:	9202      	str	r2, [sp, #8]
 8000688:	8aba      	ldrh	r2, [r7, #20]
 800068a:	9201      	str	r2, [sp, #4]
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2302      	movs	r3, #2
 8000690:	460a      	mov	r2, r1
 8000692:	21a0      	movs	r1, #160	; 0xa0
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <EEPROM_Read+0xc0>)
 8000696:	f001 f889 	bl	80017ac <HAL_I2C_Mem_Read>
		startPage += 1;
 800069a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800069c:	3301      	adds	r3, #1
 800069e:	84fb      	strh	r3, [r7, #38]	; 0x26
		offset=0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	81bb      	strh	r3, [r7, #12]
		size = size-bytesremaining;
 80006a4:	88fa      	ldrh	r2, [r7, #6]
 80006a6:	8abb      	ldrh	r3, [r7, #20]
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	80fb      	strh	r3, [r7, #6]
		pos += bytesremaining;
 80006ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80006ae:	8abb      	ldrh	r3, [r7, #20]
 80006b0:	4413      	add	r3, r2
 80006b2:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (int i=0; i<numofpages; i++)
 80006b4:	6a3b      	ldr	r3, [r7, #32]
 80006b6:	3301      	adds	r3, #1
 80006b8:	623b      	str	r3, [r7, #32]
 80006ba:	8b3b      	ldrh	r3, [r7, #24]
 80006bc:	6a3a      	ldr	r2, [r7, #32]
 80006be:	429a      	cmp	r2, r3
 80006c0:	dbc9      	blt.n	8000656 <EEPROM_Read+0x4a>
	}
}
 80006c2:	bf00      	nop
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	; 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000150 	.word	0x20000150

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f000 fc92 	bl	8000ffe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f89b 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f000 f9a9 	bl	8000a34 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006e2:	f000 f949 	bl	8000978 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006e6:	f000 f977 	bl	80009d8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80006ea:	f000 f905 	bl	80008f8 <MX_I2C1_Init>
  EEPROM_Write(29, 0, dataw2, strlen((char *)dataw2));
  HAL_Delay(10);
  EEPROM_Write(30, 0, dataw2, strlen((char *)dataw2));
  HAL_Delay(10);*/

  HAL_GPIO_WritePin(GPIOB, LD2_Pin, SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	483e      	ldr	r0, [pc, #248]	; (80007ec <main+0x11c>)
 80006f4:	f000 ff96 	bl	8001624 <HAL_GPIO_WritePin>

  if (!HAL_I2C_IsDeviceReady(&hi2c1, 0xA0, 3, 5))
 80006f8:	2305      	movs	r3, #5
 80006fa:	2203      	movs	r2, #3
 80006fc:	21a0      	movs	r1, #160	; 0xa0
 80006fe:	483c      	ldr	r0, [pc, #240]	; (80007f0 <main+0x120>)
 8000700:	f001 f96e 	bl	80019e0 <HAL_I2C_IsDeviceReady>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d107      	bne.n	800071a <main+0x4a>
	  HAL_UART_Transmit(&huart3, "Dispositivo I2C Disponble:\r\n", sizeof("Dispositivo I2C Disponble:\r\n"), 10000);
 800070a:	f242 7310 	movw	r3, #10000	; 0x2710
 800070e:	221d      	movs	r2, #29
 8000710:	4938      	ldr	r1, [pc, #224]	; (80007f4 <main+0x124>)
 8000712:	4839      	ldr	r0, [pc, #228]	; (80007f8 <main+0x128>)
 8000714:	f003 f824 	bl	8003760 <HAL_UART_Transmit>
 8000718:	e006      	b.n	8000728 <main+0x58>
  else
	  HAL_UART_Transmit(&huart3, "Dispositivo I2C No Disponble:\r\n", sizeof("Dispositivo I2C No Disponble:\r\n"), 10000);
 800071a:	f242 7310 	movw	r3, #10000	; 0x2710
 800071e:	2220      	movs	r2, #32
 8000720:	4936      	ldr	r1, [pc, #216]	; (80007fc <main+0x12c>)
 8000722:	4835      	ldr	r0, [pc, #212]	; (80007f8 <main+0x128>)
 8000724:	f003 f81c 	bl	8003760 <HAL_UART_Transmit>
  HAL_Delay(2000);
 8000728:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800072c:	f000 fcc4 	bl	80010b8 <HAL_Delay>
  //EEPROM_Read(10, 0, datar2, 32);
  //EEPROM_Read(11, 0, datar1, 32);
  uint8_t t=0;
 8000730:	2300      	movs	r3, #0
 8000732:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000734:	2101      	movs	r1, #1
 8000736:	482d      	ldr	r0, [pc, #180]	; (80007ec <main+0x11c>)
 8000738:	f000 ff8d 	bl	8001656 <HAL_GPIO_TogglePin>
	EEPROM_Read(t, 0, datar1, 32);
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	b298      	uxth	r0, r3
 8000740:	2320      	movs	r3, #32
 8000742:	4a2f      	ldr	r2, [pc, #188]	; (8000800 <main+0x130>)
 8000744:	2100      	movs	r1, #0
 8000746:	f7ff ff61 	bl	800060c <EEPROM_Read>
	t++;
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	3301      	adds	r3, #1
 800074e:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, datar1, 32, 100);
 8000750:	2364      	movs	r3, #100	; 0x64
 8000752:	2220      	movs	r2, #32
 8000754:	492a      	ldr	r1, [pc, #168]	; (8000800 <main+0x130>)
 8000756:	4828      	ldr	r0, [pc, #160]	; (80007f8 <main+0x128>)
 8000758:	f003 f802 	bl	8003760 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), 100);
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2203      	movs	r2, #3
 8000760:	4928      	ldr	r1, [pc, #160]	; (8000804 <main+0x134>)
 8000762:	4825      	ldr	r0, [pc, #148]	; (80007f8 <main+0x128>)
 8000764:	f002 fffc 	bl	8003760 <HAL_UART_Transmit>
	HAL_Delay(250);
 8000768:	20fa      	movs	r0, #250	; 0xfa
 800076a:	f000 fca5 	bl	80010b8 <HAL_Delay>
	sprintf(datar3, "%hu:", t);
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	461a      	mov	r2, r3
 8000772:	4925      	ldr	r1, [pc, #148]	; (8000808 <main+0x138>)
 8000774:	4825      	ldr	r0, [pc, #148]	; (800080c <main+0x13c>)
 8000776:	f003 ffb9 	bl	80046ec <siprintf>
    HAL_UART_Transmit(&huart3, datar3, sizeof(datar3), 10);
 800077a:	230a      	movs	r3, #10
 800077c:	2203      	movs	r2, #3
 800077e:	4923      	ldr	r1, [pc, #140]	; (800080c <main+0x13c>)
 8000780:	481d      	ldr	r0, [pc, #116]	; (80007f8 <main+0x128>)
 8000782:	f002 ffed 	bl	8003760 <HAL_UART_Transmit>

	HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078a:	4818      	ldr	r0, [pc, #96]	; (80007ec <main+0x11c>)
 800078c:	f000 ff63 	bl	8001656 <HAL_GPIO_TogglePin>
	EEPROM_Read(t, 0, datar2, 32);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	b298      	uxth	r0, r3
 8000794:	2320      	movs	r3, #32
 8000796:	4a1e      	ldr	r2, [pc, #120]	; (8000810 <main+0x140>)
 8000798:	2100      	movs	r1, #0
 800079a:	f7ff ff37 	bl	800060c <EEPROM_Read>
	t++;
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	3301      	adds	r3, #1
 80007a2:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, datar2, 32, 100);
 80007a4:	2364      	movs	r3, #100	; 0x64
 80007a6:	2220      	movs	r2, #32
 80007a8:	4919      	ldr	r1, [pc, #100]	; (8000810 <main+0x140>)
 80007aa:	4813      	ldr	r0, [pc, #76]	; (80007f8 <main+0x128>)
 80007ac:	f002 ffd8 	bl	8003760 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, "\r\n", sizeof("\r\n"), 100);
 80007b0:	2364      	movs	r3, #100	; 0x64
 80007b2:	2203      	movs	r2, #3
 80007b4:	4913      	ldr	r1, [pc, #76]	; (8000804 <main+0x134>)
 80007b6:	4810      	ldr	r0, [pc, #64]	; (80007f8 <main+0x128>)
 80007b8:	f002 ffd2 	bl	8003760 <HAL_UART_Transmit>
	HAL_Delay(250);
 80007bc:	20fa      	movs	r0, #250	; 0xfa
 80007be:	f000 fc7b 	bl	80010b8 <HAL_Delay>


	if (t >= 30)
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	2b1d      	cmp	r3, #29
 80007c6:	d901      	bls.n	80007cc <main+0xfc>
		t=0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	71fb      	strb	r3, [r7, #7]
	sprintf(datar3, "%hu:", t);
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	461a      	mov	r2, r3
 80007d0:	490d      	ldr	r1, [pc, #52]	; (8000808 <main+0x138>)
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <main+0x13c>)
 80007d4:	f003 ff8a 	bl	80046ec <siprintf>
	HAL_UART_Transmit(&huart3, datar3, sizeof(datar3), 10);
 80007d8:	230a      	movs	r3, #10
 80007da:	2203      	movs	r2, #3
 80007dc:	490b      	ldr	r1, [pc, #44]	; (800080c <main+0x13c>)
 80007de:	4806      	ldr	r0, [pc, #24]	; (80007f8 <main+0x128>)
 80007e0:	f002 ffbe 	bl	8003760 <HAL_UART_Transmit>
	HAL_Delay(250);
 80007e4:	20fa      	movs	r0, #250	; 0xfa
 80007e6:	f000 fc67 	bl	80010b8 <HAL_Delay>
  {
 80007ea:	e7a3      	b.n	8000734 <main+0x64>
 80007ec:	40020400 	.word	0x40020400
 80007f0:	20000150 	.word	0x20000150
 80007f4:	08004f60 	.word	0x08004f60
 80007f8:	200000cc 	.word	0x200000cc
 80007fc:	08004f80 	.word	0x08004f80
 8000800:	20000098 	.word	0x20000098
 8000804:	08004fa0 	.word	0x08004fa0
 8000808:	08004fa4 	.word	0x08004fa4
 800080c:	200005a0 	.word	0x200005a0
 8000810:	200005a4 	.word	0x200005a4

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2234      	movs	r2, #52	; 0x34
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f003 ff5a 	bl	80046dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000838:	f001 fe0c 	bl	8002454 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <SystemClock_Config+0xdc>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a2b      	ldr	r2, [pc, #172]	; (80008f0 <SystemClock_Config+0xdc>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <SystemClock_Config+0xdc>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000854:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <SystemClock_Config+0xe0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800085c:	4a25      	ldr	r2, [pc, #148]	; (80008f4 <SystemClock_Config+0xe0>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6013      	str	r3, [r2, #0]
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <SystemClock_Config+0xe0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000874:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000878:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800087a:	2302      	movs	r3, #2
 800087c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800087e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000882:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000884:	2304      	movs	r3, #4
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000888:	2360      	movs	r3, #96	; 0x60
 800088a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088c:	2302      	movs	r3, #2
 800088e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000894:	2302      	movs	r3, #2
 8000896:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4618      	mov	r0, r3
 800089e:	f001 fe39 	bl	8002514 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008a8:	f000 f9aa 	bl	8000c00 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008ac:	f001 fde2 	bl	8002474 <HAL_PWREx_EnableOverDrive>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008b6:	f000 f9a3 	bl	8000c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ba:	230f      	movs	r3, #15
 80008bc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2302      	movs	r3, #2
 80008c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008d0:	f107 0308 	add.w	r3, r7, #8
 80008d4:	2103      	movs	r1, #3
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 f8ca 	bl	8002a70 <HAL_RCC_ClockConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008e2:	f000 f98d 	bl	8000c00 <Error_Handler>
  }
}
 80008e6:	bf00      	nop
 80008e8:	3750      	adds	r7, #80	; 0x50
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_I2C1_Init+0x74>)
 80008fe:	4a1c      	ldr	r2, [pc, #112]	; (8000970 <MX_I2C1_Init+0x78>)
 8000900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_I2C1_Init+0x74>)
 8000904:	4a1b      	ldr	r2, [pc, #108]	; (8000974 <MX_I2C1_Init+0x7c>)
 8000906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_I2C1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_I2C1_Init+0x74>)
 8000910:	2201      	movs	r2, #1
 8000912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_I2C1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_I2C1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000932:	480e      	ldr	r0, [pc, #56]	; (800096c <MX_I2C1_Init+0x74>)
 8000934:	f000 feaa 	bl	800168c <HAL_I2C_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800093e:	f000 f95f 	bl	8000c00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000942:	2100      	movs	r1, #0
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <MX_I2C1_Init+0x74>)
 8000946:	f001 fba5 	bl	8002094 <HAL_I2CEx_ConfigAnalogFilter>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000950:	f000 f956 	bl	8000c00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000954:	2100      	movs	r1, #0
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_I2C1_Init+0x74>)
 8000958:	f001 fbe7 	bl	800212a <HAL_I2CEx_ConfigDigitalFilter>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000962:	f000 f94d 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000150 	.word	0x20000150
 8000970:	40005400 	.word	0x40005400
 8000974:	20303e5d 	.word	0x20303e5d

08000978 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800097c:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 800097e:	4a15      	ldr	r2, [pc, #84]	; (80009d4 <MX_USART3_UART_Init+0x5c>)
 8000980:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000982:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_USART3_UART_Init+0x58>)
 80009bc:	f002 fe82 	bl	80036c4 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009c6:	f000 f91b 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200000cc 	.word	0x200000cc
 80009d4:	40004800 	.word	0x40004800

080009d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e6:	2206      	movs	r2, #6
 80009e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ec:	2202      	movs	r2, #2
 80009ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1c:	f001 fbd1 	bl	80021c2 <HAL_PCD_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a26:	f000 f8eb 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000019c 	.word	0x2000019c

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08c      	sub	sp, #48	; 0x30
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b68      	ldr	r3, [pc, #416]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a67      	ldr	r2, [pc, #412]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b65      	ldr	r3, [pc, #404]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	61bb      	str	r3, [r7, #24]
 8000a60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	4b62      	ldr	r3, [pc, #392]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a61      	ldr	r2, [pc, #388]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b5f      	ldr	r3, [pc, #380]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b5c      	ldr	r3, [pc, #368]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a5b      	ldr	r2, [pc, #364]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b59      	ldr	r3, [pc, #356]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a92:	4b56      	ldr	r3, [pc, #344]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a55      	ldr	r2, [pc, #340]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b53      	ldr	r3, [pc, #332]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4b50      	ldr	r3, [pc, #320]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a4f      	ldr	r2, [pc, #316]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b4d      	ldr	r3, [pc, #308]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac2:	4b4a      	ldr	r3, [pc, #296]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a49      	ldr	r2, [pc, #292]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b47      	ldr	r3, [pc, #284]	; (8000bec <MX_GPIO_Init+0x1b8>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ae0:	4843      	ldr	r0, [pc, #268]	; (8000bf0 <MX_GPIO_Init+0x1bc>)
 8000ae2:	f000 fd9f 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2140      	movs	r1, #64	; 0x40
 8000aea:	4842      	ldr	r0, [pc, #264]	; (8000bf4 <MX_GPIO_Init+0x1c0>)
 8000aec:	f000 fd9a 	bl	8001624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	4619      	mov	r1, r3
 8000b06:	483c      	ldr	r0, [pc, #240]	; (8000bf8 <MX_GPIO_Init+0x1c4>)
 8000b08:	f000 fbe0 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b0c:	2332      	movs	r3, #50	; 0x32
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b1c:	230b      	movs	r3, #11
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4834      	ldr	r0, [pc, #208]	; (8000bf8 <MX_GPIO_Init+0x1c4>)
 8000b28:	f000 fbd0 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b2c:	2386      	movs	r3, #134	; 0x86
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b3c:	230b      	movs	r3, #11
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	4619      	mov	r1, r3
 8000b46:	482d      	ldr	r0, [pc, #180]	; (8000bfc <MX_GPIO_Init+0x1c8>)
 8000b48:	f000 fbc0 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b4c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4822      	ldr	r0, [pc, #136]	; (8000bf0 <MX_GPIO_Init+0x1bc>)
 8000b66:	f000 fbb1 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b7c:	230b      	movs	r3, #11
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	481a      	ldr	r0, [pc, #104]	; (8000bf0 <MX_GPIO_Init+0x1bc>)
 8000b88:	f000 fba0 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b8c:	2340      	movs	r3, #64	; 0x40
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4814      	ldr	r0, [pc, #80]	; (8000bf4 <MX_GPIO_Init+0x1c0>)
 8000ba4:	f000 fb92 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <MX_GPIO_Init+0x1c0>)
 8000bbc:	f000 fb86 	bl	80012cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bc0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd2:	230b      	movs	r3, #11
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_GPIO_Init+0x1c0>)
 8000bde:	f000 fb75 	bl	80012cc <HAL_GPIO_Init>

}
 8000be2:	bf00      	nop
 8000be4:	3730      	adds	r7, #48	; 0x30
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020400 	.word	0x40020400
 8000bf4:	40021800 	.word	0x40021800
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020000 	.word	0x40020000

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_MspInit+0x44>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <HAL_MspInit+0x44>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_MspInit+0x44>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x44>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x44>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	; 0x44
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x44>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0ae      	sub	sp, #184	; 0xb8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2290      	movs	r2, #144	; 0x90
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 fd31 	bl	80046dc <memset>
  if(hi2c->Instance==I2C1)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a22      	ldr	r2, [pc, #136]	; (8000d08 <HAL_I2C_MspInit+0xb4>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d13c      	bne.n	8000cfe <HAL_I2C_MspInit+0xaa>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 f8ee 	bl	8002e74 <HAL_RCCEx_PeriphCLKConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c9e:	f7ff ffaf 	bl	8000c00 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <HAL_I2C_MspInit+0xb8>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <HAL_I2C_MspInit+0xb8>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <HAL_I2C_MspInit+0xb8>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc2:	2312      	movs	r3, #18
 8000cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480b      	ldr	r0, [pc, #44]	; (8000d10 <HAL_I2C_MspInit+0xbc>)
 8000ce2:	f000 faf3 	bl	80012cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_I2C_MspInit+0xb8>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_I2C_MspInit+0xb8>)
 8000cec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_I2C_MspInit+0xb8>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	37b8      	adds	r7, #184	; 0xb8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020400 	.word	0x40020400

08000d14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0ae      	sub	sp, #184	; 0xb8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2290      	movs	r2, #144	; 0x90
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 fcd1 	bl	80046dc <memset>
  if(huart->Instance==USART3)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a22      	ldr	r2, [pc, #136]	; (8000dc8 <HAL_UART_MspInit+0xb4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d13c      	bne.n	8000dbe <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4618      	mov	r0, r3
 8000d54:	f002 f88e 	bl	8002e74 <HAL_RCCEx_PeriphCLKConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d5e:	f7ff ff4f 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <HAL_UART_MspInit+0xb8>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a19      	ldr	r2, [pc, #100]	; (8000dcc <HAL_UART_MspInit+0xb8>)
 8000d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_UART_MspInit+0xb8>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_UART_MspInit+0xb8>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a13      	ldr	r2, [pc, #76]	; (8000dcc <HAL_UART_MspInit+0xb8>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_UART_MspInit+0xb8>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da6:	2303      	movs	r3, #3
 8000da8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dac:	2307      	movs	r3, #7
 8000dae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_UART_MspInit+0xbc>)
 8000dba:	f000 fa87 	bl	80012cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	37b8      	adds	r7, #184	; 0xb8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40004800 	.word	0x40004800
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020c00 	.word	0x40020c00

08000dd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b0ae      	sub	sp, #184	; 0xb8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2290      	movs	r2, #144	; 0x90
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 fc71 	bl	80046dc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e02:	d159      	bne.n	8000eb8 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e08:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 f82d 	bl	8002e74 <HAL_RCCEx_PeriphCLKConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e20:	f7ff feee 	bl	8000c00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e24:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a25      	ldr	r2, [pc, #148]	; (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e30:	4b23      	ldr	r3, [pc, #140]	; (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e3c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e56:	230a      	movs	r3, #10
 8000e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4818      	ldr	r0, [pc, #96]	; (8000ec4 <HAL_PCD_MspInit+0xf0>)
 8000e64:	f000 fa32 	bl	80012cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e80:	4619      	mov	r1, r3
 8000e82:	4810      	ldr	r0, [pc, #64]	; (8000ec4 <HAL_PCD_MspInit+0xf0>)
 8000e84:	f000 fa22 	bl	80012cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e92:	6353      	str	r3, [r2, #52]	; 0x34
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000ea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eaa:	6453      	str	r3, [r2, #68]	; 0x44
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <HAL_PCD_MspInit+0xec>)
 8000eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eb8:	bf00      	nop
 8000eba:	37b8      	adds	r7, #184	; 0xb8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f8b0 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f24:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <_sbrk+0x5c>)
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <_sbrk+0x60>)
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <_sbrk+0x64>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <_sbrk+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d207      	bcs.n	8000f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f4c:	f003 fb9c 	bl	8004688 <__errno>
 8000f50:	4603      	mov	r3, r0
 8000f52:	220c      	movs	r2, #12
 8000f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f56:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5a:	e009      	b.n	8000f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <_sbrk+0x64>)
 8000f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20080000 	.word	0x20080000
 8000f7c:	00000400 	.word	0x00000400
 8000f80:	2000008c 	.word	0x2000008c
 8000f84:	200005f0 	.word	0x200005f0

08000f88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <SystemInit+0x20>)
 8000f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <SystemInit+0x20>)
 8000f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fb2:	490e      	ldr	r1, [pc, #56]	; (8000fec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fc8:	4c0b      	ldr	r4, [pc, #44]	; (8000ff8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fd6:	f7ff ffd7 	bl	8000f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fda:	f003 fb5b 	bl	8004694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fde:	f7ff fb77 	bl	80006d0 <main>
  bx  lr    
 8000fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ff0:	08005008 	.word	0x08005008
  ldr r2, =_sbss
 8000ff4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ff8:	200005ec 	.word	0x200005ec

08000ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC_IRQHandler>

08000ffe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001002:	2003      	movs	r0, #3
 8001004:	f000 f92e 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001008:	2000      	movs	r0, #0
 800100a:	f000 f805 	bl	8001018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100e:	f7ff fdfd 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_InitTick+0x54>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <HAL_InitTick+0x58>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f93b 	bl	80012b2 <HAL_SYSTICK_Config>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e00e      	b.n	8001064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d80a      	bhi.n	8001062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f000 f911 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4a06      	ldr	r2, [pc, #24]	; (8001074 <HAL_InitTick+0x5c>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000000 	.word	0x20000000
 8001070:	20000008 	.word	0x20000008
 8001074:	20000004 	.word	0x20000004

08001078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x20>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x24>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4413      	add	r3, r2
 8001088:	4a04      	ldr	r2, [pc, #16]	; (800109c <HAL_IncTick+0x24>)
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008
 800109c:	200005d8 	.word	0x200005d8

080010a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTick;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GetTick+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	200005d8 	.word	0x200005d8

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff ffee 	bl	80010a0 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_Delay+0x44>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffde 	bl	80010a0 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <__NVIC_SetPriorityGrouping+0x40>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	4313      	orrs	r3, r2
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <__NVIC_SetPriorityGrouping+0x40>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00
 8001144:	05fa0000 	.word	0x05fa0000

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	; (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff47 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800128c:	f7ff ff5c 	bl	8001148 <__NVIC_GetPriorityGrouping>
 8001290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68b9      	ldr	r1, [r7, #8]
 8001296:	6978      	ldr	r0, [r7, #20]
 8001298:	f7ff ff8e 	bl	80011b8 <NVIC_EncodePriority>
 800129c:	4602      	mov	r2, r0
 800129e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff ff5d 	bl	8001164 <__NVIC_SetPriority>
}
 80012aa:	bf00      	nop
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffb0 	bl	8001220 <SysTick_Config>
 80012c0:	4603      	mov	r3, r0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	e175      	b.n	80015d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012ec:	2201      	movs	r2, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	429a      	cmp	r2, r3
 8001306:	f040 8164 	bne.w	80015d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d005      	beq.n	8001322 <HAL_GPIO_Init+0x56>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d130      	bne.n	8001384 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	68da      	ldr	r2, [r3, #12]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001358:	2201      	movs	r2, #1
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 0201 	and.w	r2, r3, #1
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b03      	cmp	r3, #3
 800138e:	d017      	beq.n	80013c0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d123      	bne.n	8001414 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	08da      	lsrs	r2, r3, #3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3208      	adds	r2, #8
 80013d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	08da      	lsrs	r2, r3, #3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3208      	adds	r2, #8
 800140e:	69b9      	ldr	r1, [r7, #24]
 8001410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 0203 	and.w	r2, r3, #3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 80be 	beq.w	80015d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	4b66      	ldr	r3, [pc, #408]	; (80015f0 <HAL_GPIO_Init+0x324>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	4a65      	ldr	r2, [pc, #404]	; (80015f0 <HAL_GPIO_Init+0x324>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001460:	6453      	str	r3, [r2, #68]	; 0x44
 8001462:	4b63      	ldr	r3, [pc, #396]	; (80015f0 <HAL_GPIO_Init+0x324>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800146e:	4a61      	ldr	r2, [pc, #388]	; (80015f4 <HAL_GPIO_Init+0x328>)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a58      	ldr	r2, [pc, #352]	; (80015f8 <HAL_GPIO_Init+0x32c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d037      	beq.n	800150a <HAL_GPIO_Init+0x23e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a57      	ldr	r2, [pc, #348]	; (80015fc <HAL_GPIO_Init+0x330>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d031      	beq.n	8001506 <HAL_GPIO_Init+0x23a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a56      	ldr	r2, [pc, #344]	; (8001600 <HAL_GPIO_Init+0x334>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d02b      	beq.n	8001502 <HAL_GPIO_Init+0x236>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a55      	ldr	r2, [pc, #340]	; (8001604 <HAL_GPIO_Init+0x338>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d025      	beq.n	80014fe <HAL_GPIO_Init+0x232>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a54      	ldr	r2, [pc, #336]	; (8001608 <HAL_GPIO_Init+0x33c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d01f      	beq.n	80014fa <HAL_GPIO_Init+0x22e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a53      	ldr	r2, [pc, #332]	; (800160c <HAL_GPIO_Init+0x340>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d019      	beq.n	80014f6 <HAL_GPIO_Init+0x22a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a52      	ldr	r2, [pc, #328]	; (8001610 <HAL_GPIO_Init+0x344>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0x226>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a51      	ldr	r2, [pc, #324]	; (8001614 <HAL_GPIO_Init+0x348>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00d      	beq.n	80014ee <HAL_GPIO_Init+0x222>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a50      	ldr	r2, [pc, #320]	; (8001618 <HAL_GPIO_Init+0x34c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d007      	beq.n	80014ea <HAL_GPIO_Init+0x21e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a4f      	ldr	r2, [pc, #316]	; (800161c <HAL_GPIO_Init+0x350>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d101      	bne.n	80014e6 <HAL_GPIO_Init+0x21a>
 80014e2:	2309      	movs	r3, #9
 80014e4:	e012      	b.n	800150c <HAL_GPIO_Init+0x240>
 80014e6:	230a      	movs	r3, #10
 80014e8:	e010      	b.n	800150c <HAL_GPIO_Init+0x240>
 80014ea:	2308      	movs	r3, #8
 80014ec:	e00e      	b.n	800150c <HAL_GPIO_Init+0x240>
 80014ee:	2307      	movs	r3, #7
 80014f0:	e00c      	b.n	800150c <HAL_GPIO_Init+0x240>
 80014f2:	2306      	movs	r3, #6
 80014f4:	e00a      	b.n	800150c <HAL_GPIO_Init+0x240>
 80014f6:	2305      	movs	r3, #5
 80014f8:	e008      	b.n	800150c <HAL_GPIO_Init+0x240>
 80014fa:	2304      	movs	r3, #4
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x240>
 80014fe:	2303      	movs	r3, #3
 8001500:	e004      	b.n	800150c <HAL_GPIO_Init+0x240>
 8001502:	2302      	movs	r3, #2
 8001504:	e002      	b.n	800150c <HAL_GPIO_Init+0x240>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x240>
 800150a:	2300      	movs	r3, #0
 800150c:	69fa      	ldr	r2, [r7, #28]
 800150e:	f002 0203 	and.w	r2, r2, #3
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	4093      	lsls	r3, r2
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800151c:	4935      	ldr	r1, [pc, #212]	; (80015f4 <HAL_GPIO_Init+0x328>)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3302      	adds	r3, #2
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800152a:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <HAL_GPIO_Init+0x354>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800154e:	4a34      	ldr	r2, [pc, #208]	; (8001620 <HAL_GPIO_Init+0x354>)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001554:	4b32      	ldr	r3, [pc, #200]	; (8001620 <HAL_GPIO_Init+0x354>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001578:	4a29      	ldr	r2, [pc, #164]	; (8001620 <HAL_GPIO_Init+0x354>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800157e:	4b28      	ldr	r3, [pc, #160]	; (8001620 <HAL_GPIO_Init+0x354>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015a2:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <HAL_GPIO_Init+0x354>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_GPIO_Init+0x354>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <HAL_GPIO_Init+0x354>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b0f      	cmp	r3, #15
 80015dc:	f67f ae86 	bls.w	80012ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40013800 	.word	0x40013800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020400 	.word	0x40020400
 8001600:	40020800 	.word	0x40020800
 8001604:	40020c00 	.word	0x40020c00
 8001608:	40021000 	.word	0x40021000
 800160c:	40021400 	.word	0x40021400
 8001610:	40021800 	.word	0x40021800
 8001614:	40021c00 	.word	0x40021c00
 8001618:	40022000 	.word	0x40022000
 800161c:	40022400 	.word	0x40022400
 8001620:	40013c00 	.word	0x40013c00

08001624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
 8001630:	4613      	mov	r3, r2
 8001632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001634:	787b      	ldrb	r3, [r7, #1]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001640:	e003      	b.n	800164a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	041a      	lsls	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	619a      	str	r2, [r3, #24]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001668:	887a      	ldrh	r2, [r7, #2]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4013      	ands	r3, r2
 800166e:	041a      	lsls	r2, r3, #16
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43d9      	mvns	r1, r3
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	400b      	ands	r3, r1
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e07f      	b.n	800179e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d106      	bne.n	80016b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff face 	bl	8000c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2224      	movs	r2, #36	; 0x24
 80016bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d107      	bne.n	8001706 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	e006      	b.n	8001714 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001712:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d104      	bne.n	8001726 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001724:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6859      	ldr	r1, [r3, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <HAL_I2C_Init+0x11c>)
 8001732:	430b      	orrs	r3, r1
 8001734:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001744:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691a      	ldr	r2, [r3, #16]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69d9      	ldr	r1, [r3, #28]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0201 	orr.w	r2, r2, #1
 800177e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2220      	movs	r2, #32
 800178a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	02008000 	.word	0x02008000

080017ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	4608      	mov	r0, r1
 80017b6:	4611      	mov	r1, r2
 80017b8:	461a      	mov	r2, r3
 80017ba:	4603      	mov	r3, r0
 80017bc:	817b      	strh	r3, [r7, #10]
 80017be:	460b      	mov	r3, r1
 80017c0:	813b      	strh	r3, [r7, #8]
 80017c2:	4613      	mov	r3, r2
 80017c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b20      	cmp	r3, #32
 80017d0:	f040 80fd 	bne.w	80019ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d002      	beq.n	80017e0 <HAL_I2C_Mem_Read+0x34>
 80017da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d105      	bne.n	80017ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0f1      	b.n	80019d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_I2C_Mem_Read+0x4e>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e0ea      	b.n	80019d0 <HAL_I2C_Mem_Read+0x224>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001802:	f7ff fc4d 	bl	80010a0 <HAL_GetTick>
 8001806:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2319      	movs	r3, #25
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 fa63 	bl	8001ce0 <I2C_WaitOnFlagUntilTimeout>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0d5      	b.n	80019d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2222      	movs	r2, #34	; 0x22
 8001828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2240      	movs	r2, #64	; 0x40
 8001830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a3a      	ldr	r2, [r7, #32]
 800183e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001844:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800184c:	88f8      	ldrh	r0, [r7, #6]
 800184e:	893a      	ldrh	r2, [r7, #8]
 8001850:	8979      	ldrh	r1, [r7, #10]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	4603      	mov	r3, r0
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f000 f9c7 	bl	8001bf0 <I2C_RequestMemoryRead>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d005      	beq.n	8001874 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0ad      	b.n	80019d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001878:	b29b      	uxth	r3, r3
 800187a:	2bff      	cmp	r3, #255	; 0xff
 800187c:	d90e      	bls.n	800189c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	22ff      	movs	r2, #255	; 0xff
 8001882:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001888:	b2da      	uxtb	r2, r3
 800188a:	8979      	ldrh	r1, [r7, #10]
 800188c:	4b52      	ldr	r3, [pc, #328]	; (80019d8 <HAL_I2C_Mem_Read+0x22c>)
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 fbcb 	bl	8002030 <I2C_TransferConfig>
 800189a:	e00f      	b.n	80018bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	8979      	ldrh	r1, [r7, #10]
 80018ae:	4b4a      	ldr	r3, [pc, #296]	; (80019d8 <HAL_I2C_Mem_Read+0x22c>)
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 fbba 	bl	8002030 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c2:	2200      	movs	r2, #0
 80018c4:	2104      	movs	r1, #4
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f000 fa0a 	bl	8001ce0 <I2C_WaitOnFlagUntilTimeout>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e07c      	b.n	80019d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fe:	b29b      	uxth	r3, r3
 8001900:	3b01      	subs	r3, #1
 8001902:	b29a      	uxth	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190c:	b29b      	uxth	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d034      	beq.n	800197c <HAL_I2C_Mem_Read+0x1d0>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001916:	2b00      	cmp	r3, #0
 8001918:	d130      	bne.n	800197c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001920:	2200      	movs	r2, #0
 8001922:	2180      	movs	r1, #128	; 0x80
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 f9db 	bl	8001ce0 <I2C_WaitOnFlagUntilTimeout>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e04d      	b.n	80019d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001938:	b29b      	uxth	r3, r3
 800193a:	2bff      	cmp	r3, #255	; 0xff
 800193c:	d90e      	bls.n	800195c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	22ff      	movs	r2, #255	; 0xff
 8001942:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001948:	b2da      	uxtb	r2, r3
 800194a:	8979      	ldrh	r1, [r7, #10]
 800194c:	2300      	movs	r3, #0
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 fb6b 	bl	8002030 <I2C_TransferConfig>
 800195a:	e00f      	b.n	800197c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001960:	b29a      	uxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196a:	b2da      	uxtb	r2, r3
 800196c:	8979      	ldrh	r1, [r7, #10]
 800196e:	2300      	movs	r3, #0
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 fb5a 	bl	8002030 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001980:	b29b      	uxth	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d19a      	bne.n	80018bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fa28 	bl	8001de0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e01a      	b.n	80019d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2220      	movs	r2, #32
 80019a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6859      	ldr	r1, [r3, #4]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_I2C_Mem_Read+0x230>)
 80019ae:	400b      	ands	r3, r1
 80019b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2220      	movs	r2, #32
 80019b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e000      	b.n	80019d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80019ce:	2302      	movs	r3, #2
  }
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	80002400 	.word	0x80002400
 80019dc:	fe00e800 	.word	0xfe00e800

080019e0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af02      	add	r7, sp, #8
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	460b      	mov	r3, r1
 80019ee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b20      	cmp	r3, #32
 80019fe:	f040 80ef 	bne.w	8001be0 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a10:	d101      	bne.n	8001a16 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001a12:	2302      	movs	r3, #2
 8001a14:	e0e5      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_I2C_IsDeviceReady+0x44>
 8001a20:	2302      	movs	r3, #2
 8001a22:	e0de      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x202>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2224      	movs	r2, #36	; 0x24
 8001a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2200      	movs	r2, #0
 8001a38:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d105      	bne.n	8001a4e <HAL_I2C_IsDeviceReady+0x6e>
 8001a42:	897b      	ldrh	r3, [r7, #10]
 8001a44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a48:	4b68      	ldr	r3, [pc, #416]	; (8001bec <HAL_I2C_IsDeviceReady+0x20c>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	e004      	b.n	8001a58 <HAL_I2C_IsDeviceReady+0x78>
 8001a4e:	897b      	ldrh	r3, [r7, #10]
 8001a50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a54:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a5e:	f7ff fb1f 	bl	80010a0 <HAL_GetTick>
 8001a62:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f003 0320 	and.w	r3, r3, #32
 8001a6e:	2b20      	cmp	r3, #32
 8001a70:	bf0c      	ite	eq
 8001a72:	2301      	moveq	r3, #1
 8001a74:	2300      	movne	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b10      	cmp	r3, #16
 8001a86:	bf0c      	ite	eq
 8001a88:	2301      	moveq	r3, #1
 8001a8a:	2300      	movne	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001a90:	e034      	b.n	8001afc <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a98:	d01a      	beq.n	8001ad0 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a9a:	f7ff fb01 	bl	80010a0 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d302      	bcc.n	8001ab0 <HAL_I2C_IsDeviceReady+0xd0>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10f      	bne.n	8001ad0 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	f043 0220 	orr.w	r2, r3, #32
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e088      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0320 	and.w	r3, r3, #32
 8001ada:	2b20      	cmp	r3, #32
 8001adc:	bf0c      	ite	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	2300      	movne	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	bf0c      	ite	eq
 8001af4:	2301      	moveq	r3, #1
 8001af6:	2300      	movne	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001afc:	7ffb      	ldrb	r3, [r7, #31]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d102      	bne.n	8001b08 <HAL_I2C_IsDeviceReady+0x128>
 8001b02:	7fbb      	ldrb	r3, [r7, #30]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0c4      	beq.n	8001a92 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b10      	cmp	r3, #16
 8001b14:	d01a      	beq.n	8001b4c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2120      	movs	r1, #32
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f8dd 	bl	8001ce0 <I2C_WaitOnFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e058      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2220      	movs	r2, #32
 8001b36:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e04a      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2200      	movs	r2, #0
 8001b54:	2120      	movs	r1, #32
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f8c2 	bl	8001ce0 <I2C_WaitOnFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e03d      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2220      	movs	r2, #32
 8001b74:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d118      	bne.n	8001bb0 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b8c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	2120      	movs	r1, #32
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 f8a1 	bl	8001ce0 <I2C_WaitOnFlagUntilTimeout>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e01c      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2220      	movs	r2, #32
 8001bae:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	f63f af3d 	bhi.w	8001a3a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bcc:	f043 0220 	orr.w	r2, r3, #32
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001be0:	2302      	movs	r3, #2
  }
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3720      	adds	r7, #32
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	02002000 	.word	0x02002000

08001bf0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4603      	mov	r3, r0
 8001c00:	817b      	strh	r3, [r7, #10]
 8001c02:	460b      	mov	r3, r1
 8001c04:	813b      	strh	r3, [r7, #8]
 8001c06:	4613      	mov	r3, r2
 8001c08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	8979      	ldrh	r1, [r7, #10]
 8001c10:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <I2C_RequestMemoryRead+0xa4>)
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2300      	movs	r3, #0
 8001c16:	68f8      	ldr	r0, [r7, #12]
 8001c18:	f000 fa0a 	bl	8002030 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c1c:	69fa      	ldr	r2, [r7, #28]
 8001c1e:	69b9      	ldr	r1, [r7, #24]
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 f89d 	bl	8001d60 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e02c      	b.n	8001c8a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d105      	bne.n	8001c42 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c36:	893b      	ldrh	r3, [r7, #8]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c40:	e015      	b.n	8001c6e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c42:	893b      	ldrh	r3, [r7, #8]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	69b9      	ldr	r1, [r7, #24]
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f883 	bl	8001d60 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e012      	b.n	8001c8a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c64:	893b      	ldrh	r3, [r7, #8]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2200      	movs	r2, #0
 8001c76:	2140      	movs	r1, #64	; 0x40
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f831 	bl	8001ce0 <I2C_WaitOnFlagUntilTimeout>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	80002000 	.word	0x80002000

08001c98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d103      	bne.n	8001cb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d007      	beq.n	8001cd4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699a      	ldr	r2, [r3, #24]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0201 	orr.w	r2, r2, #1
 8001cd2:	619a      	str	r2, [r3, #24]
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cf0:	e022      	b.n	8001d38 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf8:	d01e      	beq.n	8001d38 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cfa:	f7ff f9d1 	bl	80010a0 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d302      	bcc.n	8001d10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d113      	bne.n	8001d38 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d14:	f043 0220 	orr.w	r2, r3, #32
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e00f      	b.n	8001d58 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	4013      	ands	r3, r2
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	bf0c      	ite	eq
 8001d48:	2301      	moveq	r3, #1
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d0cd      	beq.n	8001cf2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d6c:	e02c      	b.n	8001dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f870 	bl	8001e58 <I2C_IsErrorOccurred>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e02a      	b.n	8001dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d88:	d01e      	beq.n	8001dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d8a:	f7ff f989 	bl	80010a0 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	68ba      	ldr	r2, [r7, #8]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d302      	bcc.n	8001da0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d113      	bne.n	8001dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da4:	f043 0220 	orr.w	r2, r3, #32
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e007      	b.n	8001dd8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d1cb      	bne.n	8001d6e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dec:	e028      	b.n	8001e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f830 	bl	8001e58 <I2C_IsErrorOccurred>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e026      	b.n	8001e50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e02:	f7ff f94d 	bl	80010a0 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d302      	bcc.n	8001e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d113      	bne.n	8001e40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e007      	b.n	8001e50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b20      	cmp	r3, #32
 8001e4c:	d1cf      	bne.n	8001dee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f003 0310 	and.w	r3, r3, #16
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d075      	beq.n	8001f70 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2210      	movs	r2, #16
 8001e8a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e8c:	e056      	b.n	8001f3c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d052      	beq.n	8001f3c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e96:	f7ff f903 	bl	80010a0 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d302      	bcc.n	8001eac <I2C_IsErrorOccurred+0x54>
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d147      	bne.n	8001f3c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ebe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ece:	d12e      	bne.n	8001f2e <I2C_IsErrorOccurred+0xd6>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ed6:	d02a      	beq.n	8001f2e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d027      	beq.n	8001f2e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eec:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001eee:	f7ff f8d7 	bl	80010a0 <HAL_GetTick>
 8001ef2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ef4:	e01b      	b.n	8001f2e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ef6:	f7ff f8d3 	bl	80010a0 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b19      	cmp	r3, #25
 8001f02:	d914      	bls.n	8001f2e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	f043 0220 	orr.w	r2, r3, #32
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	d1dc      	bne.n	8001ef6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d003      	beq.n	8001f52 <I2C_IsErrorOccurred+0xfa>
 8001f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d09d      	beq.n	8001e8e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d103      	bne.n	8001f62 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f82:	6a3b      	ldr	r3, [r7, #32]
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00b      	beq.n	8001fbc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	f043 0308 	orr.w	r3, r3, #8
 8001faa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d01c      	beq.n	8002020 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff fe56 	bl	8001c98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6859      	ldr	r1, [r3, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <I2C_IsErrorOccurred+0x1d4>)
 8001ff8:	400b      	ands	r3, r1
 8001ffa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	431a      	orrs	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002024:	4618      	mov	r0, r3
 8002026:	3728      	adds	r7, #40	; 0x28
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	fe00e800 	.word	0xfe00e800

08002030 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	817b      	strh	r3, [r7, #10]
 800203e:	4613      	mov	r3, r2
 8002040:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002042:	897b      	ldrh	r3, [r7, #10]
 8002044:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002048:	7a7b      	ldrb	r3, [r7, #9]
 800204a:	041b      	lsls	r3, r3, #16
 800204c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002050:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	4313      	orrs	r3, r2
 800205a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800205e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	0d5b      	lsrs	r3, r3, #21
 800206a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <I2C_TransferConfig+0x60>)
 8002070:	430b      	orrs	r3, r1
 8002072:	43db      	mvns	r3, r3
 8002074:	ea02 0103 	and.w	r1, r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	430a      	orrs	r2, r1
 8002080:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	03ff63ff 	.word	0x03ff63ff

08002094 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d138      	bne.n	800211c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e032      	b.n	800211e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2224      	movs	r2, #36	; 0x24
 80020c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0201 	bic.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6819      	ldr	r1, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2220      	movs	r2, #32
 800210c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	e000      	b.n	800211e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800211c:	2302      	movs	r3, #2
  }
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b20      	cmp	r3, #32
 800213e:	d139      	bne.n	80021b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800214a:	2302      	movs	r3, #2
 800214c:	e033      	b.n	80021b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2224      	movs	r2, #36	; 0x24
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0201 	bic.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800217c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021c4:	b08f      	sub	sp, #60	; 0x3c
 80021c6:	af0a      	add	r7, sp, #40	; 0x28
 80021c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e116      	b.n	8002402 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe fdf0 	bl	8000dd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2203      	movs	r2, #3
 80021f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f001 ffa2 	bl	800415c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	687e      	ldr	r6, [r7, #4]
 8002220:	466d      	mov	r5, sp
 8002222:	f106 0410 	add.w	r4, r6, #16
 8002226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800222c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800222e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002232:	e885 0003 	stmia.w	r5, {r0, r1}
 8002236:	1d33      	adds	r3, r6, #4
 8002238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223a:	6838      	ldr	r0, [r7, #0]
 800223c:	f001 ff36 	bl	80040ac <USB_CoreInit>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2202      	movs	r2, #2
 800224a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e0d7      	b.n	8002402 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f001 ff90 	bl	800417e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	e04a      	b.n	80022fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	333d      	adds	r3, #61	; 0x3d
 8002274:	2201      	movs	r2, #1
 8002276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	333c      	adds	r3, #60	; 0x3c
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	b298      	uxth	r0, r3
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	3342      	adds	r3, #66	; 0x42
 80022a0:	4602      	mov	r2, r0
 80022a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	333f      	adds	r3, #63	; 0x3f
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	3344      	adds	r3, #68	; 0x44
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	3348      	adds	r3, #72	; 0x48
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3350      	adds	r3, #80	; 0x50
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	3301      	adds	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	d3af      	bcc.n	8002264 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002304:	2300      	movs	r3, #0
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	e044      	b.n	8002394 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	3301      	adds	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	429a      	cmp	r2, r3
 800239c:	d3b5      	bcc.n	800230a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	687e      	ldr	r6, [r7, #4]
 80023a6:	466d      	mov	r5, sp
 80023a8:	f106 0410 	add.w	r4, r6, #16
 80023ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80023bc:	1d33      	adds	r3, r6, #4
 80023be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c0:	6838      	ldr	r0, [r7, #0]
 80023c2:	f001 ff29 	bl	8004218 <USB_DevInit>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2202      	movs	r2, #2
 80023d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e014      	b.n	8002402 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d102      	bne.n	80023f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f80b 	bl	800240c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f002 f8e3 	bl	80045c6 <USB_DevDisconnect>

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800240c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800243a:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_PCDEx_ActivateLPM+0x44>)
 800243c:	4313      	orrs	r3, r2
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	10000003 	.word	0x10000003

08002454 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a04      	ldr	r2, [pc, #16]	; (8002470 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800245e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002462:	6013      	str	r3, [r2, #0]
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40007000 	.word	0x40007000

08002474 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_PWREx_EnableOverDrive+0x98>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a22      	ldr	r2, [pc, #136]	; (800250c <HAL_PWREx_EnableOverDrive+0x98>)
 8002484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_PWREx_EnableOverDrive+0x98>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002496:	4b1e      	ldr	r3, [pc, #120]	; (8002510 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <HAL_PWREx_EnableOverDrive+0x9c>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024a2:	f7fe fdfd 	bl	80010a0 <HAL_GetTick>
 80024a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024a8:	e009      	b.n	80024be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024aa:	f7fe fdf9 	bl	80010a0 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024b8:	d901      	bls.n	80024be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e022      	b.n	8002504 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ca:	d1ee      	bne.n	80024aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024d8:	f7fe fde2 	bl	80010a0 <HAL_GetTick>
 80024dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024de:	e009      	b.n	80024f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024e0:	f7fe fdde 	bl	80010a0 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ee:	d901      	bls.n	80024f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e007      	b.n	8002504 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002500:	d1ee      	bne.n	80024e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	40007000 	.word	0x40007000

08002514 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800251c:	2300      	movs	r3, #0
 800251e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e29b      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8087 	beq.w	8002646 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002538:	4b96      	ldr	r3, [pc, #600]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b04      	cmp	r3, #4
 8002542:	d00c      	beq.n	800255e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002544:	4b93      	ldr	r3, [pc, #588]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d112      	bne.n	8002576 <HAL_RCC_OscConfig+0x62>
 8002550:	4b90      	ldr	r3, [pc, #576]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800255c:	d10b      	bne.n	8002576 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255e:	4b8d      	ldr	r3, [pc, #564]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d06c      	beq.n	8002644 <HAL_RCC_OscConfig+0x130>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d168      	bne.n	8002644 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e275      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x7a>
 8002580:	4b84      	ldr	r3, [pc, #528]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a83      	ldr	r2, [pc, #524]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	e02e      	b.n	80025ec <HAL_RCC_OscConfig+0xd8>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x9c>
 8002596:	4b7f      	ldr	r3, [pc, #508]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a7e      	ldr	r2, [pc, #504]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 800259c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b7c      	ldr	r3, [pc, #496]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a7b      	ldr	r2, [pc, #492]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80025a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e01d      	b.n	80025ec <HAL_RCC_OscConfig+0xd8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0xc0>
 80025ba:	4b76      	ldr	r3, [pc, #472]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a75      	ldr	r2, [pc, #468]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b73      	ldr	r3, [pc, #460]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a72      	ldr	r2, [pc, #456]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0xd8>
 80025d4:	4b6f      	ldr	r3, [pc, #444]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a6e      	ldr	r2, [pc, #440]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80025da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b6c      	ldr	r3, [pc, #432]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a6b      	ldr	r2, [pc, #428]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80025e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fd54 	bl	80010a0 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7fe fd50 	bl	80010a0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e229      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b61      	ldr	r3, [pc, #388]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0xe8>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe fd40 	bl	80010a0 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7fe fd3c 	bl	80010a0 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e215      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	4b57      	ldr	r3, [pc, #348]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x110>
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d069      	beq.n	8002726 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002652:	4b50      	ldr	r3, [pc, #320]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800265e:	4b4d      	ldr	r3, [pc, #308]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b08      	cmp	r3, #8
 8002668:	d11c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x190>
 800266a:	4b4a      	ldr	r3, [pc, #296]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_RCC_OscConfig+0x17a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e1e9      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268e:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	493d      	ldr	r1, [pc, #244]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	e040      	b.n	8002726 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d023      	beq.n	80026f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ac:	4b39      	ldr	r3, [pc, #228]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a38      	ldr	r2, [pc, #224]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fe fcf2 	bl	80010a0 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c0:	f7fe fcee 	bl	80010a0 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e1c7      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d2:	4b30      	ldr	r3, [pc, #192]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0f0      	beq.n	80026c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026de:	4b2d      	ldr	r3, [pc, #180]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4929      	ldr	r1, [pc, #164]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]
 80026f2:	e018      	b.n	8002726 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f4:	4b27      	ldr	r3, [pc, #156]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a26      	ldr	r2, [pc, #152]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 80026fa:	f023 0301 	bic.w	r3, r3, #1
 80026fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe fcce 	bl	80010a0 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002708:	f7fe fcca 	bl	80010a0 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1a3      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271a:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b00      	cmp	r3, #0
 8002730:	d038      	beq.n	80027a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d019      	beq.n	800276e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273a:	4b16      	ldr	r3, [pc, #88]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 800273c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800273e:	4a15      	ldr	r2, [pc, #84]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002746:	f7fe fcab 	bl	80010a0 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800274e:	f7fe fca7 	bl	80010a0 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e180      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x23a>
 800276c:	e01a      	b.n	80027a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002772:	4a08      	ldr	r2, [pc, #32]	; (8002794 <HAL_RCC_OscConfig+0x280>)
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277a:	f7fe fc91 	bl	80010a0 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	e00a      	b.n	8002798 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002782:	f7fe fc8d 	bl	80010a0 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d903      	bls.n	8002798 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e166      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>
 8002794:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002798:	4b92      	ldr	r3, [pc, #584]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 800279a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1ee      	bne.n	8002782 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80a4 	beq.w	80028fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b2:	4b8c      	ldr	r3, [pc, #560]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10d      	bne.n	80027da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80027be:	4b89      	ldr	r3, [pc, #548]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	4a88      	ldr	r2, [pc, #544]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 80027c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ca:	4b86      	ldr	r3, [pc, #536]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d6:	2301      	movs	r3, #1
 80027d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027da:	4b83      	ldr	r3, [pc, #524]	; (80029e8 <HAL_RCC_OscConfig+0x4d4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d118      	bne.n	8002818 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027e6:	4b80      	ldr	r3, [pc, #512]	; (80029e8 <HAL_RCC_OscConfig+0x4d4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a7f      	ldr	r2, [pc, #508]	; (80029e8 <HAL_RCC_OscConfig+0x4d4>)
 80027ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f2:	f7fe fc55 	bl	80010a0 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fa:	f7fe fc51 	bl	80010a0 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b64      	cmp	r3, #100	; 0x64
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e12a      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800280c:	4b76      	ldr	r3, [pc, #472]	; (80029e8 <HAL_RCC_OscConfig+0x4d4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x31a>
 8002820:	4b70      	ldr	r3, [pc, #448]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002824:	4a6f      	ldr	r2, [pc, #444]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6713      	str	r3, [r2, #112]	; 0x70
 800282c:	e02d      	b.n	800288a <HAL_RCC_OscConfig+0x376>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0x33c>
 8002836:	4b6b      	ldr	r3, [pc, #428]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a6a      	ldr	r2, [pc, #424]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
 8002842:	4b68      	ldr	r3, [pc, #416]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	4a67      	ldr	r2, [pc, #412]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 8002848:	f023 0304 	bic.w	r3, r3, #4
 800284c:	6713      	str	r3, [r2, #112]	; 0x70
 800284e:	e01c      	b.n	800288a <HAL_RCC_OscConfig+0x376>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	2b05      	cmp	r3, #5
 8002856:	d10c      	bne.n	8002872 <HAL_RCC_OscConfig+0x35e>
 8002858:	4b62      	ldr	r3, [pc, #392]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	4a61      	ldr	r2, [pc, #388]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 800285e:	f043 0304 	orr.w	r3, r3, #4
 8002862:	6713      	str	r3, [r2, #112]	; 0x70
 8002864:	4b5f      	ldr	r3, [pc, #380]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	4a5e      	ldr	r2, [pc, #376]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6713      	str	r3, [r2, #112]	; 0x70
 8002870:	e00b      	b.n	800288a <HAL_RCC_OscConfig+0x376>
 8002872:	4b5c      	ldr	r3, [pc, #368]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	4a5b      	ldr	r2, [pc, #364]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	6713      	str	r3, [r2, #112]	; 0x70
 800287e:	4b59      	ldr	r3, [pc, #356]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	4a58      	ldr	r2, [pc, #352]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 8002884:	f023 0304 	bic.w	r3, r3, #4
 8002888:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d015      	beq.n	80028be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002892:	f7fe fc05 	bl	80010a0 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7fe fc01 	bl	80010a0 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e0d8      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b0:	4b4c      	ldr	r3, [pc, #304]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0ee      	beq.n	800289a <HAL_RCC_OscConfig+0x386>
 80028bc:	e014      	b.n	80028e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028be:	f7fe fbef 	bl	80010a0 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c4:	e00a      	b.n	80028dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7fe fbeb 	bl	80010a0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e0c2      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028dc:	4b41      	ldr	r3, [pc, #260]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1ee      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d105      	bne.n	80028fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ee:	4b3d      	ldr	r3, [pc, #244]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4a3c      	ldr	r2, [pc, #240]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 80028f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80ae 	beq.w	8002a60 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002904:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d06d      	beq.n	80029ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d14b      	bne.n	80029b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002918:	4b32      	ldr	r3, [pc, #200]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a31      	ldr	r2, [pc, #196]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 800291e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7fe fbbc 	bl	80010a0 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe fbb8 	bl	80010a0 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e091      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293e:	4b29      	ldr	r3, [pc, #164]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	019b      	lsls	r3, r3, #6
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	085b      	lsrs	r3, r3, #1
 8002962:	3b01      	subs	r3, #1
 8002964:	041b      	lsls	r3, r3, #16
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	061b      	lsls	r3, r3, #24
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	071b      	lsls	r3, r3, #28
 8002976:	491b      	ldr	r1, [pc, #108]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a18      	ldr	r2, [pc, #96]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 8002982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fb8a 	bl	80010a0 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe fb86 	bl	80010a0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e05f      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0x47c>
 80029ae:	e057      	b.n	8002a60 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b0:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 80029b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe fb70 	bl	80010a0 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fb6c 	bl	80010a0 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e045      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d6:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <HAL_RCC_OscConfig+0x4d0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x4b0>
 80029e2:	e03d      	b.n	8002a60 <HAL_RCC_OscConfig+0x54c>
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029ec:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <HAL_RCC_OscConfig+0x558>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d030      	beq.n	8002a5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d129      	bne.n	8002a5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d122      	bne.n	8002a5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d119      	bne.n	8002a5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	085b      	lsrs	r3, r3, #1
 8002a34:	3b01      	subs	r3, #1
 8002a36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d10f      	bne.n	8002a5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d107      	bne.n	8002a5c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800

08002a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0d0      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a88:	4b6a      	ldr	r3, [pc, #424]	; (8002c34 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d910      	bls.n	8002ab8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a96:	4b67      	ldr	r3, [pc, #412]	; (8002c34 <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 020f 	bic.w	r2, r3, #15
 8002a9e:	4965      	ldr	r1, [pc, #404]	; (8002c34 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b63      	ldr	r3, [pc, #396]	; (8002c34 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0b8      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d020      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ad0:	4b59      	ldr	r3, [pc, #356]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	4a58      	ldr	r2, [pc, #352]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ada:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae8:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a52      	ldr	r2, [pc, #328]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002af2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af4:	4b50      	ldr	r3, [pc, #320]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	494d      	ldr	r1, [pc, #308]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d040      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d115      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e07f      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d107      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b32:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e073      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b42:	4b3d      	ldr	r3, [pc, #244]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e06b      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b52:	4b39      	ldr	r3, [pc, #228]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f023 0203 	bic.w	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	4936      	ldr	r1, [pc, #216]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b64:	f7fe fa9c 	bl	80010a0 <HAL_GetTick>
 8002b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6c:	f7fe fa98 	bl	80010a0 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e053      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 020c 	and.w	r2, r3, #12
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d1eb      	bne.n	8002b6c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b94:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <HAL_RCC_ClockConfig+0x1c4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d210      	bcs.n	8002bc4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b24      	ldr	r3, [pc, #144]	; (8002c34 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 020f 	bic.w	r2, r3, #15
 8002baa:	4922      	ldr	r1, [pc, #136]	; (8002c34 <HAL_RCC_ClockConfig+0x1c4>)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e032      	b.n	8002c2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4916      	ldr	r1, [pc, #88]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bee:	4b12      	ldr	r3, [pc, #72]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	490e      	ldr	r1, [pc, #56]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c02:	f000 f821 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 8002c06:	4602      	mov	r2, r0
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	490a      	ldr	r1, [pc, #40]	; (8002c3c <HAL_RCC_ClockConfig+0x1cc>)
 8002c14:	5ccb      	ldrb	r3, [r1, r3]
 8002c16:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1a:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <HAL_RCC_ClockConfig+0x1d0>)
 8002c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c1e:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <HAL_RCC_ClockConfig+0x1d4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe f9f8 	bl	8001018 <HAL_InitTick>

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023c00 	.word	0x40023c00
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	08004fac 	.word	0x08004fac
 8002c40:	20000000 	.word	0x20000000
 8002c44:	20000004 	.word	0x20000004

08002c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	607b      	str	r3, [r7, #4]
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c60:	4b67      	ldr	r3, [pc, #412]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d00d      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x40>
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	f200 80bd 	bhi.w	8002dec <HAL_RCC_GetSysClockFreq+0x1a4>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0x34>
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d003      	beq.n	8002c82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c7a:	e0b7      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c7c:	4b61      	ldr	r3, [pc, #388]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c7e:	60bb      	str	r3, [r7, #8]
      break;
 8002c80:	e0b7      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c82:	4b61      	ldr	r3, [pc, #388]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002c84:	60bb      	str	r3, [r7, #8]
      break;
 8002c86:	e0b4      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c88:	4b5d      	ldr	r3, [pc, #372]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c90:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c92:	4b5b      	ldr	r3, [pc, #364]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d04d      	beq.n	8002d3a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9e:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	099b      	lsrs	r3, r3, #6
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cae:	f04f 0100 	mov.w	r1, #0
 8002cb2:	ea02 0800 	and.w	r8, r2, r0
 8002cb6:	ea03 0901 	and.w	r9, r3, r1
 8002cba:	4640      	mov	r0, r8
 8002cbc:	4649      	mov	r1, r9
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	014b      	lsls	r3, r1, #5
 8002cc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ccc:	0142      	lsls	r2, r0, #5
 8002cce:	4610      	mov	r0, r2
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	ebb0 0008 	subs.w	r0, r0, r8
 8002cd6:	eb61 0109 	sbc.w	r1, r1, r9
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	018b      	lsls	r3, r1, #6
 8002ce4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ce8:	0182      	lsls	r2, r0, #6
 8002cea:	1a12      	subs	r2, r2, r0
 8002cec:	eb63 0301 	sbc.w	r3, r3, r1
 8002cf0:	f04f 0000 	mov.w	r0, #0
 8002cf4:	f04f 0100 	mov.w	r1, #0
 8002cf8:	00d9      	lsls	r1, r3, #3
 8002cfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cfe:	00d0      	lsls	r0, r2, #3
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	eb12 0208 	adds.w	r2, r2, r8
 8002d08:	eb43 0309 	adc.w	r3, r3, r9
 8002d0c:	f04f 0000 	mov.w	r0, #0
 8002d10:	f04f 0100 	mov.w	r1, #0
 8002d14:	0259      	lsls	r1, r3, #9
 8002d16:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d1a:	0250      	lsls	r0, r2, #9
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	f7fd fad8 	bl	80002e0 <__aeabi_uldivmod>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4613      	mov	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	e04a      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3a:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	099b      	lsrs	r3, r3, #6
 8002d40:	461a      	mov	r2, r3
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d4a:	f04f 0100 	mov.w	r1, #0
 8002d4e:	ea02 0400 	and.w	r4, r2, r0
 8002d52:	ea03 0501 	and.w	r5, r3, r1
 8002d56:	4620      	mov	r0, r4
 8002d58:	4629      	mov	r1, r5
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	014b      	lsls	r3, r1, #5
 8002d64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d68:	0142      	lsls	r2, r0, #5
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	1b00      	subs	r0, r0, r4
 8002d70:	eb61 0105 	sbc.w	r1, r1, r5
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	018b      	lsls	r3, r1, #6
 8002d7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d82:	0182      	lsls	r2, r0, #6
 8002d84:	1a12      	subs	r2, r2, r0
 8002d86:	eb63 0301 	sbc.w	r3, r3, r1
 8002d8a:	f04f 0000 	mov.w	r0, #0
 8002d8e:	f04f 0100 	mov.w	r1, #0
 8002d92:	00d9      	lsls	r1, r3, #3
 8002d94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d98:	00d0      	lsls	r0, r2, #3
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	1912      	adds	r2, r2, r4
 8002da0:	eb45 0303 	adc.w	r3, r5, r3
 8002da4:	f04f 0000 	mov.w	r0, #0
 8002da8:	f04f 0100 	mov.w	r1, #0
 8002dac:	0299      	lsls	r1, r3, #10
 8002dae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002db2:	0290      	lsls	r0, r2, #10
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	f7fd fa8c 	bl	80002e0 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	0c1b      	lsrs	r3, r3, #16
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	60bb      	str	r3, [r7, #8]
      break;
 8002dea:	e002      	b.n	8002df2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002dee:	60bb      	str	r3, [r7, #8]
      break;
 8002df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002df2:	68bb      	ldr	r3, [r7, #8]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dfe:	bf00      	nop
 8002e00:	40023800 	.word	0x40023800
 8002e04:	00f42400 	.word	0x00f42400
 8002e08:	007a1200 	.word	0x007a1200

08002e0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000000 	.word	0x20000000

08002e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e28:	f7ff fff0 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	0a9b      	lsrs	r3, r3, #10
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4903      	ldr	r1, [pc, #12]	; (8002e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40023800 	.word	0x40023800
 8002e48:	08004fbc 	.word	0x08004fbc

08002e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e50:	f7ff ffdc 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0b5b      	lsrs	r3, r3, #13
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4903      	ldr	r1, [pc, #12]	; (8002e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	08004fbc 	.word	0x08004fbc

08002e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d012      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e9c:	4b69      	ldr	r3, [pc, #420]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a68      	ldr	r2, [pc, #416]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ea6:	6093      	str	r3, [r2, #8]
 8002ea8:	4b66      	ldr	r3, [pc, #408]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb0:	4964      	ldr	r1, [pc, #400]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d017      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ece:	4b5d      	ldr	r3, [pc, #372]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002edc:	4959      	ldr	r1, [pc, #356]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d017      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f0a:	4b4e      	ldr	r3, [pc, #312]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f18:	494a      	ldr	r1, [pc, #296]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f28:	d101      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f36:	2301      	movs	r3, #1
 8002f38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f46:	2301      	movs	r3, #1
 8002f48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 808b 	beq.w	800306e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f58:	4b3a      	ldr	r3, [pc, #232]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	4a39      	ldr	r2, [pc, #228]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f62:	6413      	str	r3, [r2, #64]	; 0x40
 8002f64:	4b37      	ldr	r3, [pc, #220]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f70:	4b35      	ldr	r3, [pc, #212]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a34      	ldr	r2, [pc, #208]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7c:	f7fe f890 	bl	80010a0 <HAL_GetTick>
 8002f80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f84:	f7fe f88c 	bl	80010a0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e38f      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f96:	4b2c      	ldr	r3, [pc, #176]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fa2:	4b28      	ldr	r3, [pc, #160]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002faa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d035      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d02e      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fc0:	4b20      	ldr	r3, [pc, #128]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fca:	4b1e      	ldr	r3, [pc, #120]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fce:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	4a1a      	ldr	r2, [pc, #104]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002fe2:	4a18      	ldr	r2, [pc, #96]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fe8:	4b16      	ldr	r3, [pc, #88]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d114      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff4:	f7fe f854 	bl	80010a0 <HAL_GetTick>
 8002ff8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffa:	e00a      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7fe f850 	bl	80010a0 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	; 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e351      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003012:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0ee      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800302a:	d111      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800302c:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800303a:	400b      	ands	r3, r1
 800303c:	4901      	ldr	r1, [pc, #4]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
 8003042:	e00b      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003044:	40023800 	.word	0x40023800
 8003048:	40007000 	.word	0x40007000
 800304c:	0ffffcff 	.word	0x0ffffcff
 8003050:	4bb3      	ldr	r3, [pc, #716]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4ab2      	ldr	r2, [pc, #712]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003056:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800305a:	6093      	str	r3, [r2, #8]
 800305c:	4bb0      	ldr	r3, [pc, #704]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800305e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003068:	49ad      	ldr	r1, [pc, #692]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800306a:	4313      	orrs	r3, r2
 800306c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	d010      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800307a:	4ba9      	ldr	r3, [pc, #676]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800307c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003080:	4aa7      	ldr	r2, [pc, #668]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003086:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800308a:	4ba5      	ldr	r3, [pc, #660]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800308c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003094:	49a2      	ldr	r1, [pc, #648]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030a8:	4b9d      	ldr	r3, [pc, #628]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030b6:	499a      	ldr	r1, [pc, #616]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030ca:	4b95      	ldr	r3, [pc, #596]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030d8:	4991      	ldr	r1, [pc, #580]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030ec:	4b8c      	ldr	r3, [pc, #560]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030fa:	4989      	ldr	r1, [pc, #548]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800310e:	4b84      	ldr	r3, [pc, #528]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003114:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	4980      	ldr	r1, [pc, #512]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003130:	4b7b      	ldr	r3, [pc, #492]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	f023 0203 	bic.w	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313e:	4978      	ldr	r1, [pc, #480]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003152:	4b73      	ldr	r3, [pc, #460]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003158:	f023 020c 	bic.w	r2, r3, #12
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003160:	496f      	ldr	r1, [pc, #444]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003174:	4b6a      	ldr	r3, [pc, #424]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003182:	4967      	ldr	r1, [pc, #412]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003196:	4b62      	ldr	r3, [pc, #392]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a4:	495e      	ldr	r1, [pc, #376]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031b8:	4b59      	ldr	r3, [pc, #356]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c6:	4956      	ldr	r1, [pc, #344]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80031da:	4b51      	ldr	r3, [pc, #324]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	494d      	ldr	r1, [pc, #308]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031fc:	4b48      	ldr	r3, [pc, #288]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003202:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320a:	4945      	ldr	r1, [pc, #276]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800321e:	4b40      	ldr	r3, [pc, #256]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322c:	493c      	ldr	r1, [pc, #240]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003240:	4b37      	ldr	r3, [pc, #220]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800324e:	4934      	ldr	r1, [pc, #208]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d011      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003262:	4b2f      	ldr	r3, [pc, #188]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003268:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003270:	492b      	ldr	r1, [pc, #172]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800327c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003280:	d101      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003282:	2301      	movs	r3, #1
 8003284:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003292:	2301      	movs	r3, #1
 8003294:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032a2:	4b1f      	ldr	r3, [pc, #124]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b0:	491b      	ldr	r1, [pc, #108]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00b      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032c4:	4b16      	ldr	r3, [pc, #88]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d4:	4912      	ldr	r1, [pc, #72]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80032e8:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f8:	4909      	ldr	r1, [pc, #36]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00f      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800330e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003312:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331c:	e002      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800331e:	bf00      	nop
 8003320:	40023800 	.word	0x40023800
 8003324:	4986      	ldr	r1, [pc, #536]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00b      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003338:	4b81      	ldr	r3, [pc, #516]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800333a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800333e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003348:	497d      	ldr	r1, [pc, #500]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d006      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80d6 	beq.w	8003510 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003364:	4b76      	ldr	r3, [pc, #472]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a75      	ldr	r2, [pc, #468]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800336a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800336e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003370:	f7fd fe96 	bl	80010a0 <HAL_GetTick>
 8003374:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003378:	f7fd fe92 	bl	80010a0 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e195      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800338a:	4b6d      	ldr	r3, [pc, #436]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d021      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d11d      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033aa:	4b65      	ldr	r3, [pc, #404]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033b8:	4b61      	ldr	r3, [pc, #388]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033be:	0e1b      	lsrs	r3, r3, #24
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	019a      	lsls	r2, r3, #6
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	041b      	lsls	r3, r3, #16
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	071b      	lsls	r3, r3, #28
 80033de:	4958      	ldr	r1, [pc, #352]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003404:	2b00      	cmp	r3, #0
 8003406:	d02e      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003410:	d129      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003412:	4b4b      	ldr	r3, [pc, #300]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003418:	0c1b      	lsrs	r3, r3, #16
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003420:	4b47      	ldr	r3, [pc, #284]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003426:	0f1b      	lsrs	r3, r3, #28
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	019a      	lsls	r2, r3, #6
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	041b      	lsls	r3, r3, #16
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	061b      	lsls	r3, r3, #24
 8003440:	431a      	orrs	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	071b      	lsls	r3, r3, #28
 8003446:	493e      	ldr	r1, [pc, #248]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800344e:	4b3c      	ldr	r3, [pc, #240]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003454:	f023 021f 	bic.w	r2, r3, #31
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	3b01      	subs	r3, #1
 800345e:	4938      	ldr	r1, [pc, #224]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d01d      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003472:	4b33      	ldr	r3, [pc, #204]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003478:	0e1b      	lsrs	r3, r3, #24
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003480:	4b2f      	ldr	r3, [pc, #188]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003486:	0f1b      	lsrs	r3, r3, #28
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	019a      	lsls	r2, r3, #6
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	041b      	lsls	r3, r3, #16
 800349a:	431a      	orrs	r2, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	061b      	lsls	r3, r3, #24
 80034a0:	431a      	orrs	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	071b      	lsls	r3, r3, #28
 80034a6:	4926      	ldr	r1, [pc, #152]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d011      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	019a      	lsls	r2, r3, #6
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	061b      	lsls	r3, r3, #24
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	071b      	lsls	r3, r3, #28
 80034d6:	491a      	ldr	r1, [pc, #104]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034de:	4b18      	ldr	r3, [pc, #96]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a17      	ldr	r2, [pc, #92]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ea:	f7fd fdd9 	bl	80010a0 <HAL_GetTick>
 80034ee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034f2:	f7fd fdd5 	bl	80010a0 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b64      	cmp	r3, #100	; 0x64
 80034fe:	d901      	bls.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0d8      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003504:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	2b01      	cmp	r3, #1
 8003514:	f040 80ce 	bne.w	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a08      	ldr	r2, [pc, #32]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800351e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003524:	f7fd fdbc 	bl	80010a0 <HAL_GetTick>
 8003528:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800352a:	e00b      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800352c:	f7fd fdb8 	bl	80010a0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b64      	cmp	r3, #100	; 0x64
 8003538:	d904      	bls.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e0bb      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003544:	4b5e      	ldr	r3, [pc, #376]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800354c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003550:	d0ec      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800356e:	2b00      	cmp	r3, #0
 8003570:	d02e      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d12a      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800357a:	4b51      	ldr	r3, [pc, #324]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003588:	4b4d      	ldr	r3, [pc, #308]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	0f1b      	lsrs	r3, r3, #28
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	019a      	lsls	r2, r3, #6
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	041b      	lsls	r3, r3, #16
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	061b      	lsls	r3, r3, #24
 80035a8:	431a      	orrs	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	071b      	lsls	r3, r3, #28
 80035ae:	4944      	ldr	r1, [pc, #272]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035b6:	4b42      	ldr	r3, [pc, #264]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	3b01      	subs	r3, #1
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	493d      	ldr	r1, [pc, #244]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d022      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035e4:	d11d      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035e6:	4b36      	ldr	r3, [pc, #216]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	0e1b      	lsrs	r3, r3, #24
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035f4:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fa:	0f1b      	lsrs	r3, r3, #28
 80035fc:	f003 0307 	and.w	r3, r3, #7
 8003600:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	019a      	lsls	r2, r3, #6
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	041b      	lsls	r3, r3, #16
 800360e:	431a      	orrs	r2, r3
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	061b      	lsls	r3, r3, #24
 8003614:	431a      	orrs	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	071b      	lsls	r3, r3, #28
 800361a:	4929      	ldr	r1, [pc, #164]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b00      	cmp	r3, #0
 800362c:	d028      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	0e1b      	lsrs	r3, r3, #24
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800363c:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003642:	0c1b      	lsrs	r3, r3, #16
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	019a      	lsls	r2, r3, #6
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	041b      	lsls	r3, r3, #16
 8003654:	431a      	orrs	r2, r3
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	061b      	lsls	r3, r3, #24
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	071b      	lsls	r3, r3, #28
 8003662:	4917      	ldr	r1, [pc, #92]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800366a:	4b15      	ldr	r3, [pc, #84]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800366c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	4911      	ldr	r1, [pc, #68]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003680:	4b0f      	ldr	r3, [pc, #60]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a0e      	ldr	r2, [pc, #56]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368c:	f7fd fd08 	bl	80010a0 <HAL_GetTick>
 8003690:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003694:	f7fd fd04 	bl	80010a0 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e007      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036a6:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b2:	d1ef      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800

080036c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e040      	b.n	8003758 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd fb14 	bl	8000d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2224      	movs	r2, #36	; 0x24
 80036f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8c0 	bl	8003888 <UART_SetConfig>
 8003708:	4603      	mov	r3, r0
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e022      	b.n	8003758 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fb16 	bl	8003d4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800372e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800373e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 fb9d 	bl	8003e90 <UART_CheckIdleState>
 8003756:	4603      	mov	r3, r0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	; 0x28
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	4613      	mov	r3, r2
 800376e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003774:	2b20      	cmp	r3, #32
 8003776:	f040 8081 	bne.w	800387c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_UART_Transmit+0x26>
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e079      	b.n	800387e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_UART_Transmit+0x38>
 8003794:	2302      	movs	r3, #2
 8003796:	e072      	b.n	800387e <HAL_UART_Transmit+0x11e>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2221      	movs	r2, #33	; 0x21
 80037ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ae:	f7fd fc77 	bl	80010a0 <HAL_GetTick>
 80037b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	88fa      	ldrh	r2, [r7, #6]
 80037b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	88fa      	ldrh	r2, [r7, #6]
 80037c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037cc:	d108      	bne.n	80037e0 <HAL_UART_Transmit+0x80>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d104      	bne.n	80037e0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	61bb      	str	r3, [r7, #24]
 80037de:	e003      	b.n	80037e8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80037f0:	e02c      	b.n	800384c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2200      	movs	r2, #0
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fb90 	bl	8003f22 <UART_WaitOnFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e038      	b.n	800387e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10b      	bne.n	800382a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003820:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	3302      	adds	r3, #2
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	e007      	b.n	800383a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	3301      	adds	r3, #1
 8003838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1cc      	bne.n	80037f2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2200      	movs	r2, #0
 8003860:	2140      	movs	r1, #64	; 0x40
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 fb5d 	bl	8003f22 <UART_WaitOnFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e005      	b.n	800387e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	e000      	b.n	800387e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800387c:	2302      	movs	r3, #2
  }
}
 800387e:	4618      	mov	r0, r3
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4ba7      	ldr	r3, [pc, #668]	; (8003b50 <UART_SetConfig+0x2c8>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	6979      	ldr	r1, [r7, #20]
 80038bc:	430b      	orrs	r3, r1
 80038be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a95      	ldr	r2, [pc, #596]	; (8003b54 <UART_SetConfig+0x2cc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d120      	bne.n	8003946 <UART_SetConfig+0xbe>
 8003904:	4b94      	ldr	r3, [pc, #592]	; (8003b58 <UART_SetConfig+0x2d0>)
 8003906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	2b03      	cmp	r3, #3
 8003910:	d816      	bhi.n	8003940 <UART_SetConfig+0xb8>
 8003912:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <UART_SetConfig+0x90>)
 8003914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003918:	08003929 	.word	0x08003929
 800391c:	08003935 	.word	0x08003935
 8003920:	0800392f 	.word	0x0800392f
 8003924:	0800393b 	.word	0x0800393b
 8003928:	2301      	movs	r3, #1
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	e14f      	b.n	8003bce <UART_SetConfig+0x346>
 800392e:	2302      	movs	r3, #2
 8003930:	77fb      	strb	r3, [r7, #31]
 8003932:	e14c      	b.n	8003bce <UART_SetConfig+0x346>
 8003934:	2304      	movs	r3, #4
 8003936:	77fb      	strb	r3, [r7, #31]
 8003938:	e149      	b.n	8003bce <UART_SetConfig+0x346>
 800393a:	2308      	movs	r3, #8
 800393c:	77fb      	strb	r3, [r7, #31]
 800393e:	e146      	b.n	8003bce <UART_SetConfig+0x346>
 8003940:	2310      	movs	r3, #16
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e143      	b.n	8003bce <UART_SetConfig+0x346>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a84      	ldr	r2, [pc, #528]	; (8003b5c <UART_SetConfig+0x2d4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d132      	bne.n	80039b6 <UART_SetConfig+0x12e>
 8003950:	4b81      	ldr	r3, [pc, #516]	; (8003b58 <UART_SetConfig+0x2d0>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f003 030c 	and.w	r3, r3, #12
 800395a:	2b0c      	cmp	r3, #12
 800395c:	d828      	bhi.n	80039b0 <UART_SetConfig+0x128>
 800395e:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <UART_SetConfig+0xdc>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	08003999 	.word	0x08003999
 8003968:	080039b1 	.word	0x080039b1
 800396c:	080039b1 	.word	0x080039b1
 8003970:	080039b1 	.word	0x080039b1
 8003974:	080039a5 	.word	0x080039a5
 8003978:	080039b1 	.word	0x080039b1
 800397c:	080039b1 	.word	0x080039b1
 8003980:	080039b1 	.word	0x080039b1
 8003984:	0800399f 	.word	0x0800399f
 8003988:	080039b1 	.word	0x080039b1
 800398c:	080039b1 	.word	0x080039b1
 8003990:	080039b1 	.word	0x080039b1
 8003994:	080039ab 	.word	0x080039ab
 8003998:	2300      	movs	r3, #0
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e117      	b.n	8003bce <UART_SetConfig+0x346>
 800399e:	2302      	movs	r3, #2
 80039a0:	77fb      	strb	r3, [r7, #31]
 80039a2:	e114      	b.n	8003bce <UART_SetConfig+0x346>
 80039a4:	2304      	movs	r3, #4
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e111      	b.n	8003bce <UART_SetConfig+0x346>
 80039aa:	2308      	movs	r3, #8
 80039ac:	77fb      	strb	r3, [r7, #31]
 80039ae:	e10e      	b.n	8003bce <UART_SetConfig+0x346>
 80039b0:	2310      	movs	r3, #16
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e10b      	b.n	8003bce <UART_SetConfig+0x346>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a69      	ldr	r2, [pc, #420]	; (8003b60 <UART_SetConfig+0x2d8>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d120      	bne.n	8003a02 <UART_SetConfig+0x17a>
 80039c0:	4b65      	ldr	r3, [pc, #404]	; (8003b58 <UART_SetConfig+0x2d0>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039ca:	2b30      	cmp	r3, #48	; 0x30
 80039cc:	d013      	beq.n	80039f6 <UART_SetConfig+0x16e>
 80039ce:	2b30      	cmp	r3, #48	; 0x30
 80039d0:	d814      	bhi.n	80039fc <UART_SetConfig+0x174>
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d009      	beq.n	80039ea <UART_SetConfig+0x162>
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d810      	bhi.n	80039fc <UART_SetConfig+0x174>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <UART_SetConfig+0x15c>
 80039de:	2b10      	cmp	r3, #16
 80039e0:	d006      	beq.n	80039f0 <UART_SetConfig+0x168>
 80039e2:	e00b      	b.n	80039fc <UART_SetConfig+0x174>
 80039e4:	2300      	movs	r3, #0
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e0f1      	b.n	8003bce <UART_SetConfig+0x346>
 80039ea:	2302      	movs	r3, #2
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	e0ee      	b.n	8003bce <UART_SetConfig+0x346>
 80039f0:	2304      	movs	r3, #4
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e0eb      	b.n	8003bce <UART_SetConfig+0x346>
 80039f6:	2308      	movs	r3, #8
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e0e8      	b.n	8003bce <UART_SetConfig+0x346>
 80039fc:	2310      	movs	r3, #16
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e0e5      	b.n	8003bce <UART_SetConfig+0x346>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a57      	ldr	r2, [pc, #348]	; (8003b64 <UART_SetConfig+0x2dc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d120      	bne.n	8003a4e <UART_SetConfig+0x1c6>
 8003a0c:	4b52      	ldr	r3, [pc, #328]	; (8003b58 <UART_SetConfig+0x2d0>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a16:	2bc0      	cmp	r3, #192	; 0xc0
 8003a18:	d013      	beq.n	8003a42 <UART_SetConfig+0x1ba>
 8003a1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a1c:	d814      	bhi.n	8003a48 <UART_SetConfig+0x1c0>
 8003a1e:	2b80      	cmp	r3, #128	; 0x80
 8003a20:	d009      	beq.n	8003a36 <UART_SetConfig+0x1ae>
 8003a22:	2b80      	cmp	r3, #128	; 0x80
 8003a24:	d810      	bhi.n	8003a48 <UART_SetConfig+0x1c0>
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <UART_SetConfig+0x1a8>
 8003a2a:	2b40      	cmp	r3, #64	; 0x40
 8003a2c:	d006      	beq.n	8003a3c <UART_SetConfig+0x1b4>
 8003a2e:	e00b      	b.n	8003a48 <UART_SetConfig+0x1c0>
 8003a30:	2300      	movs	r3, #0
 8003a32:	77fb      	strb	r3, [r7, #31]
 8003a34:	e0cb      	b.n	8003bce <UART_SetConfig+0x346>
 8003a36:	2302      	movs	r3, #2
 8003a38:	77fb      	strb	r3, [r7, #31]
 8003a3a:	e0c8      	b.n	8003bce <UART_SetConfig+0x346>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	77fb      	strb	r3, [r7, #31]
 8003a40:	e0c5      	b.n	8003bce <UART_SetConfig+0x346>
 8003a42:	2308      	movs	r3, #8
 8003a44:	77fb      	strb	r3, [r7, #31]
 8003a46:	e0c2      	b.n	8003bce <UART_SetConfig+0x346>
 8003a48:	2310      	movs	r3, #16
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e0bf      	b.n	8003bce <UART_SetConfig+0x346>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a45      	ldr	r2, [pc, #276]	; (8003b68 <UART_SetConfig+0x2e0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d125      	bne.n	8003aa4 <UART_SetConfig+0x21c>
 8003a58:	4b3f      	ldr	r3, [pc, #252]	; (8003b58 <UART_SetConfig+0x2d0>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a66:	d017      	beq.n	8003a98 <UART_SetConfig+0x210>
 8003a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a6c:	d817      	bhi.n	8003a9e <UART_SetConfig+0x216>
 8003a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a72:	d00b      	beq.n	8003a8c <UART_SetConfig+0x204>
 8003a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a78:	d811      	bhi.n	8003a9e <UART_SetConfig+0x216>
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <UART_SetConfig+0x1fe>
 8003a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a82:	d006      	beq.n	8003a92 <UART_SetConfig+0x20a>
 8003a84:	e00b      	b.n	8003a9e <UART_SetConfig+0x216>
 8003a86:	2300      	movs	r3, #0
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e0a0      	b.n	8003bce <UART_SetConfig+0x346>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e09d      	b.n	8003bce <UART_SetConfig+0x346>
 8003a92:	2304      	movs	r3, #4
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e09a      	b.n	8003bce <UART_SetConfig+0x346>
 8003a98:	2308      	movs	r3, #8
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	e097      	b.n	8003bce <UART_SetConfig+0x346>
 8003a9e:	2310      	movs	r3, #16
 8003aa0:	77fb      	strb	r3, [r7, #31]
 8003aa2:	e094      	b.n	8003bce <UART_SetConfig+0x346>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a30      	ldr	r2, [pc, #192]	; (8003b6c <UART_SetConfig+0x2e4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d125      	bne.n	8003afa <UART_SetConfig+0x272>
 8003aae:	4b2a      	ldr	r3, [pc, #168]	; (8003b58 <UART_SetConfig+0x2d0>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ab8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003abc:	d017      	beq.n	8003aee <UART_SetConfig+0x266>
 8003abe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ac2:	d817      	bhi.n	8003af4 <UART_SetConfig+0x26c>
 8003ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac8:	d00b      	beq.n	8003ae2 <UART_SetConfig+0x25a>
 8003aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ace:	d811      	bhi.n	8003af4 <UART_SetConfig+0x26c>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <UART_SetConfig+0x254>
 8003ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad8:	d006      	beq.n	8003ae8 <UART_SetConfig+0x260>
 8003ada:	e00b      	b.n	8003af4 <UART_SetConfig+0x26c>
 8003adc:	2301      	movs	r3, #1
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e075      	b.n	8003bce <UART_SetConfig+0x346>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e072      	b.n	8003bce <UART_SetConfig+0x346>
 8003ae8:	2304      	movs	r3, #4
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e06f      	b.n	8003bce <UART_SetConfig+0x346>
 8003aee:	2308      	movs	r3, #8
 8003af0:	77fb      	strb	r3, [r7, #31]
 8003af2:	e06c      	b.n	8003bce <UART_SetConfig+0x346>
 8003af4:	2310      	movs	r3, #16
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e069      	b.n	8003bce <UART_SetConfig+0x346>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <UART_SetConfig+0x2e8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d137      	bne.n	8003b74 <UART_SetConfig+0x2ec>
 8003b04:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <UART_SetConfig+0x2d0>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003b0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b12:	d017      	beq.n	8003b44 <UART_SetConfig+0x2bc>
 8003b14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b18:	d817      	bhi.n	8003b4a <UART_SetConfig+0x2c2>
 8003b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1e:	d00b      	beq.n	8003b38 <UART_SetConfig+0x2b0>
 8003b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b24:	d811      	bhi.n	8003b4a <UART_SetConfig+0x2c2>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <UART_SetConfig+0x2aa>
 8003b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2e:	d006      	beq.n	8003b3e <UART_SetConfig+0x2b6>
 8003b30:	e00b      	b.n	8003b4a <UART_SetConfig+0x2c2>
 8003b32:	2300      	movs	r3, #0
 8003b34:	77fb      	strb	r3, [r7, #31]
 8003b36:	e04a      	b.n	8003bce <UART_SetConfig+0x346>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e047      	b.n	8003bce <UART_SetConfig+0x346>
 8003b3e:	2304      	movs	r3, #4
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e044      	b.n	8003bce <UART_SetConfig+0x346>
 8003b44:	2308      	movs	r3, #8
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e041      	b.n	8003bce <UART_SetConfig+0x346>
 8003b4a:	2310      	movs	r3, #16
 8003b4c:	77fb      	strb	r3, [r7, #31]
 8003b4e:	e03e      	b.n	8003bce <UART_SetConfig+0x346>
 8003b50:	efff69f3 	.word	0xefff69f3
 8003b54:	40011000 	.word	0x40011000
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40004400 	.word	0x40004400
 8003b60:	40004800 	.word	0x40004800
 8003b64:	40004c00 	.word	0x40004c00
 8003b68:	40005000 	.word	0x40005000
 8003b6c:	40011400 	.word	0x40011400
 8003b70:	40007800 	.word	0x40007800
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a71      	ldr	r2, [pc, #452]	; (8003d40 <UART_SetConfig+0x4b8>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d125      	bne.n	8003bca <UART_SetConfig+0x342>
 8003b7e:	4b71      	ldr	r3, [pc, #452]	; (8003d44 <UART_SetConfig+0x4bc>)
 8003b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b8c:	d017      	beq.n	8003bbe <UART_SetConfig+0x336>
 8003b8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b92:	d817      	bhi.n	8003bc4 <UART_SetConfig+0x33c>
 8003b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b98:	d00b      	beq.n	8003bb2 <UART_SetConfig+0x32a>
 8003b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b9e:	d811      	bhi.n	8003bc4 <UART_SetConfig+0x33c>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <UART_SetConfig+0x324>
 8003ba4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ba8:	d006      	beq.n	8003bb8 <UART_SetConfig+0x330>
 8003baa:	e00b      	b.n	8003bc4 <UART_SetConfig+0x33c>
 8003bac:	2300      	movs	r3, #0
 8003bae:	77fb      	strb	r3, [r7, #31]
 8003bb0:	e00d      	b.n	8003bce <UART_SetConfig+0x346>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	77fb      	strb	r3, [r7, #31]
 8003bb6:	e00a      	b.n	8003bce <UART_SetConfig+0x346>
 8003bb8:	2304      	movs	r3, #4
 8003bba:	77fb      	strb	r3, [r7, #31]
 8003bbc:	e007      	b.n	8003bce <UART_SetConfig+0x346>
 8003bbe:	2308      	movs	r3, #8
 8003bc0:	77fb      	strb	r3, [r7, #31]
 8003bc2:	e004      	b.n	8003bce <UART_SetConfig+0x346>
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	77fb      	strb	r3, [r7, #31]
 8003bc8:	e001      	b.n	8003bce <UART_SetConfig+0x346>
 8003bca:	2310      	movs	r3, #16
 8003bcc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd6:	d15a      	bne.n	8003c8e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8003bd8:	7ffb      	ldrb	r3, [r7, #31]
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d827      	bhi.n	8003c2e <UART_SetConfig+0x3a6>
 8003bde:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <UART_SetConfig+0x35c>)
 8003be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be4:	08003c09 	.word	0x08003c09
 8003be8:	08003c11 	.word	0x08003c11
 8003bec:	08003c19 	.word	0x08003c19
 8003bf0:	08003c2f 	.word	0x08003c2f
 8003bf4:	08003c1f 	.word	0x08003c1f
 8003bf8:	08003c2f 	.word	0x08003c2f
 8003bfc:	08003c2f 	.word	0x08003c2f
 8003c00:	08003c2f 	.word	0x08003c2f
 8003c04:	08003c27 	.word	0x08003c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c08:	f7ff f90c 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8003c0c:	61b8      	str	r0, [r7, #24]
        break;
 8003c0e:	e013      	b.n	8003c38 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c10:	f7ff f91c 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 8003c14:	61b8      	str	r0, [r7, #24]
        break;
 8003c16:	e00f      	b.n	8003c38 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c18:	4b4b      	ldr	r3, [pc, #300]	; (8003d48 <UART_SetConfig+0x4c0>)
 8003c1a:	61bb      	str	r3, [r7, #24]
        break;
 8003c1c:	e00c      	b.n	8003c38 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1e:	f7ff f813 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 8003c22:	61b8      	str	r0, [r7, #24]
        break;
 8003c24:	e008      	b.n	8003c38 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2a:	61bb      	str	r3, [r7, #24]
        break;
 8003c2c:	e004      	b.n	8003c38 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	77bb      	strb	r3, [r7, #30]
        break;
 8003c36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d074      	beq.n	8003d28 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	005a      	lsls	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	085b      	lsrs	r3, r3, #1
 8003c48:	441a      	add	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b0f      	cmp	r3, #15
 8003c58:	d916      	bls.n	8003c88 <UART_SetConfig+0x400>
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c60:	d212      	bcs.n	8003c88 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	f023 030f 	bic.w	r3, r3, #15
 8003c6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	085b      	lsrs	r3, r3, #1
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f003 0307 	and.w	r3, r3, #7
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	89fb      	ldrh	r3, [r7, #14]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	89fa      	ldrh	r2, [r7, #14]
 8003c84:	60da      	str	r2, [r3, #12]
 8003c86:	e04f      	b.n	8003d28 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	77bb      	strb	r3, [r7, #30]
 8003c8c:	e04c      	b.n	8003d28 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c8e:	7ffb      	ldrb	r3, [r7, #31]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d828      	bhi.n	8003ce6 <UART_SetConfig+0x45e>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <UART_SetConfig+0x414>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cc1 	.word	0x08003cc1
 8003ca0:	08003cc9 	.word	0x08003cc9
 8003ca4:	08003cd1 	.word	0x08003cd1
 8003ca8:	08003ce7 	.word	0x08003ce7
 8003cac:	08003cd7 	.word	0x08003cd7
 8003cb0:	08003ce7 	.word	0x08003ce7
 8003cb4:	08003ce7 	.word	0x08003ce7
 8003cb8:	08003ce7 	.word	0x08003ce7
 8003cbc:	08003cdf 	.word	0x08003cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc0:	f7ff f8b0 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8003cc4:	61b8      	str	r0, [r7, #24]
        break;
 8003cc6:	e013      	b.n	8003cf0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cc8:	f7ff f8c0 	bl	8002e4c <HAL_RCC_GetPCLK2Freq>
 8003ccc:	61b8      	str	r0, [r7, #24]
        break;
 8003cce:	e00f      	b.n	8003cf0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd0:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <UART_SetConfig+0x4c0>)
 8003cd2:	61bb      	str	r3, [r7, #24]
        break;
 8003cd4:	e00c      	b.n	8003cf0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cd6:	f7fe ffb7 	bl	8002c48 <HAL_RCC_GetSysClockFreq>
 8003cda:	61b8      	str	r0, [r7, #24]
        break;
 8003cdc:	e008      	b.n	8003cf0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce2:	61bb      	str	r3, [r7, #24]
        break;
 8003ce4:	e004      	b.n	8003cf0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	77bb      	strb	r3, [r7, #30]
        break;
 8003cee:	bf00      	nop
    }

    if (pclk != 0U)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d018      	beq.n	8003d28 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	085a      	lsrs	r2, r3, #1
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	441a      	add	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b0f      	cmp	r3, #15
 8003d0e:	d909      	bls.n	8003d24 <UART_SetConfig+0x49c>
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d16:	d205      	bcs.n	8003d24 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	e001      	b.n	8003d28 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d34:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3720      	adds	r7, #32
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40007c00 	.word	0x40007c00
 8003d44:	40023800 	.word	0x40023800
 8003d48:	00f42400 	.word	0x00f42400

08003d4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00a      	beq.n	8003dfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	f003 0320 	and.w	r3, r3, #32
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d01a      	beq.n	8003e62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e4a:	d10a      	bne.n	8003e62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	605a      	str	r2, [r3, #4]
  }
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ea0:	f7fd f8fe 	bl	80010a0 <HAL_GetTick>
 8003ea4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b08      	cmp	r3, #8
 8003eb2:	d10e      	bne.n	8003ed2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f82d 	bl	8003f22 <UART_WaitOnFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e023      	b.n	8003f1a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d10e      	bne.n	8003efe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f817 	bl	8003f22 <UART_WaitOnFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e00d      	b.n	8003f1a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b09c      	sub	sp, #112	; 0x70
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	603b      	str	r3, [r7, #0]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f32:	e0a5      	b.n	8004080 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3a:	f000 80a1 	beq.w	8004080 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3e:	f7fd f8af 	bl	80010a0 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d302      	bcc.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d13e      	bne.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f68:	667b      	str	r3, [r7, #100]	; 0x64
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e6      	bne.n	8003f54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fa6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e5      	bne.n	8003f86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e067      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d04f      	beq.n	8004080 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fee:	d147      	bne.n	8004080 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ff8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800400e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004018:	637b      	str	r3, [r7, #52]	; 0x34
 800401a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800401e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e6      	bne.n	8003ffa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3308      	adds	r3, #8
 8004032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	613b      	str	r3, [r7, #16]
   return(result);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	66bb      	str	r3, [r7, #104]	; 0x68
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3308      	adds	r3, #8
 800404a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800404c:	623a      	str	r2, [r7, #32]
 800404e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	69f9      	ldr	r1, [r7, #28]
 8004052:	6a3a      	ldr	r2, [r7, #32]
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	61bb      	str	r3, [r7, #24]
   return(result);
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e5      	bne.n	800402c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e010      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	4013      	ands	r3, r2
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	429a      	cmp	r2, r3
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	461a      	mov	r2, r3
 8004098:	79fb      	ldrb	r3, [r7, #7]
 800409a:	429a      	cmp	r2, r3
 800409c:	f43f af4a 	beq.w	8003f34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3770      	adds	r7, #112	; 0x70
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040ac:	b084      	sub	sp, #16
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b084      	sub	sp, #16
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	f107 001c 	add.w	r0, r7, #28
 80040ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d120      	bne.n	8004106 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	4b20      	ldr	r3, [pc, #128]	; (8004158 <USB_CoreInit+0xac>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80040e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d105      	bne.n	80040fa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fa92 	bl	8004624 <USB_CoreReset>
 8004100:	4603      	mov	r3, r0
 8004102:	73fb      	strb	r3, [r7, #15]
 8004104:	e010      	b.n	8004128 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa86 	bl	8004624 <USB_CoreReset>
 8004118:	4603      	mov	r3, r0
 800411a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	2b01      	cmp	r3, #1
 800412c:	d10b      	bne.n	8004146 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f043 0206 	orr.w	r2, r3, #6
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f043 0220 	orr.w	r2, r3, #32
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004146:	7bfb      	ldrb	r3, [r7, #15]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004152:	b004      	add	sp, #16
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	ffbdffbf 	.word	0xffbdffbf

0800415c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f023 0201 	bic.w	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d115      	bne.n	80041cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041ac:	2001      	movs	r0, #1
 80041ae:	f7fc ff83 	bl	80010b8 <HAL_Delay>
      ms++;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3301      	adds	r3, #1
 80041b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fa25 	bl	8004608 <USB_GetMode>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d01e      	beq.n	8004202 <USB_SetCurrentMode+0x84>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2b31      	cmp	r3, #49	; 0x31
 80041c8:	d9f0      	bls.n	80041ac <USB_SetCurrentMode+0x2e>
 80041ca:	e01a      	b.n	8004202 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d115      	bne.n	80041fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041de:	2001      	movs	r0, #1
 80041e0:	f7fc ff6a 	bl	80010b8 <HAL_Delay>
      ms++;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3301      	adds	r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fa0c 	bl	8004608 <USB_GetMode>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <USB_SetCurrentMode+0x84>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b31      	cmp	r3, #49	; 0x31
 80041fa:	d9f0      	bls.n	80041de <USB_SetCurrentMode+0x60>
 80041fc:	e001      	b.n	8004202 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e005      	b.n	800420e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b32      	cmp	r3, #50	; 0x32
 8004206:	d101      	bne.n	800420c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004218:	b084      	sub	sp, #16
 800421a:	b580      	push	{r7, lr}
 800421c:	b086      	sub	sp, #24
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004232:	2300      	movs	r3, #0
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	e009      	b.n	800424c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	3340      	adds	r3, #64	; 0x40
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	2200      	movs	r2, #0
 8004244:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	3301      	adds	r3, #1
 800424a:	613b      	str	r3, [r7, #16]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	2b0e      	cmp	r3, #14
 8004250:	d9f2      	bls.n	8004238 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004254:	2b00      	cmp	r3, #0
 8004256:	d11c      	bne.n	8004292 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004266:	f043 0302 	orr.w	r3, r3, #2
 800426a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	e005      	b.n	800429e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042a4:	461a      	mov	r2, r3
 80042a6:	2300      	movs	r3, #0
 80042a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b0:	4619      	mov	r1, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b8:	461a      	mov	r2, r3
 80042ba:	680b      	ldr	r3, [r1, #0]
 80042bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d10c      	bne.n	80042de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d104      	bne.n	80042d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042ca:	2100      	movs	r1, #0
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f961 	bl	8004594 <USB_SetDevSpeed>
 80042d2:	e008      	b.n	80042e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042d4:	2101      	movs	r1, #1
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f95c 	bl	8004594 <USB_SetDevSpeed>
 80042dc:	e003      	b.n	80042e6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042de:	2103      	movs	r1, #3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f957 	bl	8004594 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042e6:	2110      	movs	r1, #16
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f8f3 	bl	80044d4 <USB_FlushTxFifo>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f91d 	bl	8004538 <USB_FlushRxFifo>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430e:	461a      	mov	r2, r3
 8004310:	2300      	movs	r3, #0
 8004312:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431a:	461a      	mov	r2, r3
 800431c:	2300      	movs	r3, #0
 800431e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	461a      	mov	r2, r3
 8004328:	2300      	movs	r3, #0
 800432a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800432c:	2300      	movs	r3, #0
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	e043      	b.n	80043ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004348:	d118      	bne.n	800437c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10a      	bne.n	8004366 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435c:	461a      	mov	r2, r3
 800435e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	e013      	b.n	800438e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004372:	461a      	mov	r2, r3
 8004374:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e008      	b.n	800438e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004388:	461a      	mov	r2, r3
 800438a:	2300      	movs	r3, #0
 800438c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439a:	461a      	mov	r2, r3
 800439c:	2300      	movs	r3, #0
 800439e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	461a      	mov	r2, r3
 80043ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	3301      	adds	r3, #1
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d3b7      	bcc.n	8004332 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043c2:	2300      	movs	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	e043      	b.n	8004450 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043de:	d118      	bne.n	8004412 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f2:	461a      	mov	r2, r3
 80043f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e013      	b.n	8004424 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	461a      	mov	r2, r3
 800440a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	e008      	b.n	8004424 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441e:	461a      	mov	r2, r3
 8004420:	2300      	movs	r3, #0
 8004422:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004430:	461a      	mov	r2, r3
 8004432:	2300      	movs	r3, #0
 8004434:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004442:	461a      	mov	r2, r3
 8004444:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004448:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	3301      	adds	r3, #1
 800444e:	613b      	str	r3, [r7, #16]
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	429a      	cmp	r2, r3
 8004456:	d3b7      	bcc.n	80043c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004466:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800446a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004478:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	2b00      	cmp	r3, #0
 800447e:	d105      	bne.n	800448c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f043 0210 	orr.w	r2, r3, #16
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699a      	ldr	r2, [r3, #24]
 8004490:	4b0e      	ldr	r3, [pc, #56]	; (80044cc <USB_DevInit+0x2b4>)
 8004492:	4313      	orrs	r3, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f043 0208 	orr.w	r2, r3, #8
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d105      	bne.n	80044bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699a      	ldr	r2, [r3, #24]
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <USB_DevInit+0x2b8>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044c8:	b004      	add	sp, #16
 80044ca:	4770      	bx	lr
 80044cc:	803c3800 	.word	0x803c3800
 80044d0:	40000004 	.word	0x40000004

080044d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3301      	adds	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	4a12      	ldr	r2, [pc, #72]	; (8004534 <USB_FlushTxFifo+0x60>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e01a      	b.n	8004528 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	daf3      	bge.n	80044e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	019b      	lsls	r3, r3, #6
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	3301      	adds	r3, #1
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	4a08      	ldr	r2, [pc, #32]	; (8004534 <USB_FlushTxFifo+0x60>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e006      	b.n	8004528 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b20      	cmp	r3, #32
 8004524:	d0f1      	beq.n	800450a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	00030d40 	.word	0x00030d40

08004538 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3301      	adds	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	4a11      	ldr	r2, [pc, #68]	; (8004590 <USB_FlushRxFifo+0x58>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e017      	b.n	8004584 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	daf3      	bge.n	8004544 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2210      	movs	r2, #16
 8004564:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3301      	adds	r3, #1
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	4a08      	ldr	r2, [pc, #32]	; (8004590 <USB_FlushRxFifo+0x58>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e006      	b.n	8004584 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b10      	cmp	r3, #16
 8004580:	d0f1      	beq.n	8004566 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	00030d40 	.word	0x00030d40

08004594 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	68f9      	ldr	r1, [r7, #12]
 80045b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045b4:	4313      	orrs	r3, r2
 80045b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80045e0:	f023 0303 	bic.w	r3, r3, #3
 80045e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045f4:	f043 0302 	orr.w	r3, r3, #2
 80045f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0301 	and.w	r3, r3, #1
}
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3301      	adds	r3, #1
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	4a13      	ldr	r2, [pc, #76]	; (8004684 <USB_CoreReset+0x60>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d901      	bls.n	8004640 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e01a      	b.n	8004676 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	daf3      	bge.n	8004630 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f043 0201 	orr.w	r2, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3301      	adds	r3, #1
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	4a09      	ldr	r2, [pc, #36]	; (8004684 <USB_CoreReset+0x60>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d901      	bls.n	8004668 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e006      	b.n	8004676 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d0f1      	beq.n	8004658 <USB_CoreReset+0x34>

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	00030d40 	.word	0x00030d40

08004688 <__errno>:
 8004688:	4b01      	ldr	r3, [pc, #4]	; (8004690 <__errno+0x8>)
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	2000000c 	.word	0x2000000c

08004694 <__libc_init_array>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	4d0d      	ldr	r5, [pc, #52]	; (80046cc <__libc_init_array+0x38>)
 8004698:	4c0d      	ldr	r4, [pc, #52]	; (80046d0 <__libc_init_array+0x3c>)
 800469a:	1b64      	subs	r4, r4, r5
 800469c:	10a4      	asrs	r4, r4, #2
 800469e:	2600      	movs	r6, #0
 80046a0:	42a6      	cmp	r6, r4
 80046a2:	d109      	bne.n	80046b8 <__libc_init_array+0x24>
 80046a4:	4d0b      	ldr	r5, [pc, #44]	; (80046d4 <__libc_init_array+0x40>)
 80046a6:	4c0c      	ldr	r4, [pc, #48]	; (80046d8 <__libc_init_array+0x44>)
 80046a8:	f000 fc4e 	bl	8004f48 <_init>
 80046ac:	1b64      	subs	r4, r4, r5
 80046ae:	10a4      	asrs	r4, r4, #2
 80046b0:	2600      	movs	r6, #0
 80046b2:	42a6      	cmp	r6, r4
 80046b4:	d105      	bne.n	80046c2 <__libc_init_array+0x2e>
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046bc:	4798      	blx	r3
 80046be:	3601      	adds	r6, #1
 80046c0:	e7ee      	b.n	80046a0 <__libc_init_array+0xc>
 80046c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c6:	4798      	blx	r3
 80046c8:	3601      	adds	r6, #1
 80046ca:	e7f2      	b.n	80046b2 <__libc_init_array+0x1e>
 80046cc:	08005000 	.word	0x08005000
 80046d0:	08005000 	.word	0x08005000
 80046d4:	08005000 	.word	0x08005000
 80046d8:	08005004 	.word	0x08005004

080046dc <memset>:
 80046dc:	4402      	add	r2, r0
 80046de:	4603      	mov	r3, r0
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d100      	bne.n	80046e6 <memset+0xa>
 80046e4:	4770      	bx	lr
 80046e6:	f803 1b01 	strb.w	r1, [r3], #1
 80046ea:	e7f9      	b.n	80046e0 <memset+0x4>

080046ec <siprintf>:
 80046ec:	b40e      	push	{r1, r2, r3}
 80046ee:	b500      	push	{lr}
 80046f0:	b09c      	sub	sp, #112	; 0x70
 80046f2:	ab1d      	add	r3, sp, #116	; 0x74
 80046f4:	9002      	str	r0, [sp, #8]
 80046f6:	9006      	str	r0, [sp, #24]
 80046f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046fc:	4809      	ldr	r0, [pc, #36]	; (8004724 <siprintf+0x38>)
 80046fe:	9107      	str	r1, [sp, #28]
 8004700:	9104      	str	r1, [sp, #16]
 8004702:	4909      	ldr	r1, [pc, #36]	; (8004728 <siprintf+0x3c>)
 8004704:	f853 2b04 	ldr.w	r2, [r3], #4
 8004708:	9105      	str	r1, [sp, #20]
 800470a:	6800      	ldr	r0, [r0, #0]
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	a902      	add	r1, sp, #8
 8004710:	f000 f868 	bl	80047e4 <_svfiprintf_r>
 8004714:	9b02      	ldr	r3, [sp, #8]
 8004716:	2200      	movs	r2, #0
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	b01c      	add	sp, #112	; 0x70
 800471c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004720:	b003      	add	sp, #12
 8004722:	4770      	bx	lr
 8004724:	2000000c 	.word	0x2000000c
 8004728:	ffff0208 	.word	0xffff0208

0800472c <__ssputs_r>:
 800472c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004730:	688e      	ldr	r6, [r1, #8]
 8004732:	429e      	cmp	r6, r3
 8004734:	4682      	mov	sl, r0
 8004736:	460c      	mov	r4, r1
 8004738:	4690      	mov	r8, r2
 800473a:	461f      	mov	r7, r3
 800473c:	d838      	bhi.n	80047b0 <__ssputs_r+0x84>
 800473e:	898a      	ldrh	r2, [r1, #12]
 8004740:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004744:	d032      	beq.n	80047ac <__ssputs_r+0x80>
 8004746:	6825      	ldr	r5, [r4, #0]
 8004748:	6909      	ldr	r1, [r1, #16]
 800474a:	eba5 0901 	sub.w	r9, r5, r1
 800474e:	6965      	ldr	r5, [r4, #20]
 8004750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004754:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004758:	3301      	adds	r3, #1
 800475a:	444b      	add	r3, r9
 800475c:	106d      	asrs	r5, r5, #1
 800475e:	429d      	cmp	r5, r3
 8004760:	bf38      	it	cc
 8004762:	461d      	movcc	r5, r3
 8004764:	0553      	lsls	r3, r2, #21
 8004766:	d531      	bpl.n	80047cc <__ssputs_r+0xa0>
 8004768:	4629      	mov	r1, r5
 800476a:	f000 fb47 	bl	8004dfc <_malloc_r>
 800476e:	4606      	mov	r6, r0
 8004770:	b950      	cbnz	r0, 8004788 <__ssputs_r+0x5c>
 8004772:	230c      	movs	r3, #12
 8004774:	f8ca 3000 	str.w	r3, [sl]
 8004778:	89a3      	ldrh	r3, [r4, #12]
 800477a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800477e:	81a3      	strh	r3, [r4, #12]
 8004780:	f04f 30ff 	mov.w	r0, #4294967295
 8004784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004788:	6921      	ldr	r1, [r4, #16]
 800478a:	464a      	mov	r2, r9
 800478c:	f000 fabe 	bl	8004d0c <memcpy>
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800479a:	81a3      	strh	r3, [r4, #12]
 800479c:	6126      	str	r6, [r4, #16]
 800479e:	6165      	str	r5, [r4, #20]
 80047a0:	444e      	add	r6, r9
 80047a2:	eba5 0509 	sub.w	r5, r5, r9
 80047a6:	6026      	str	r6, [r4, #0]
 80047a8:	60a5      	str	r5, [r4, #8]
 80047aa:	463e      	mov	r6, r7
 80047ac:	42be      	cmp	r6, r7
 80047ae:	d900      	bls.n	80047b2 <__ssputs_r+0x86>
 80047b0:	463e      	mov	r6, r7
 80047b2:	4632      	mov	r2, r6
 80047b4:	6820      	ldr	r0, [r4, #0]
 80047b6:	4641      	mov	r1, r8
 80047b8:	f000 fab6 	bl	8004d28 <memmove>
 80047bc:	68a3      	ldr	r3, [r4, #8]
 80047be:	6822      	ldr	r2, [r4, #0]
 80047c0:	1b9b      	subs	r3, r3, r6
 80047c2:	4432      	add	r2, r6
 80047c4:	60a3      	str	r3, [r4, #8]
 80047c6:	6022      	str	r2, [r4, #0]
 80047c8:	2000      	movs	r0, #0
 80047ca:	e7db      	b.n	8004784 <__ssputs_r+0x58>
 80047cc:	462a      	mov	r2, r5
 80047ce:	f000 fb6f 	bl	8004eb0 <_realloc_r>
 80047d2:	4606      	mov	r6, r0
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d1e1      	bne.n	800479c <__ssputs_r+0x70>
 80047d8:	6921      	ldr	r1, [r4, #16]
 80047da:	4650      	mov	r0, sl
 80047dc:	f000 fabe 	bl	8004d5c <_free_r>
 80047e0:	e7c7      	b.n	8004772 <__ssputs_r+0x46>
	...

080047e4 <_svfiprintf_r>:
 80047e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e8:	4698      	mov	r8, r3
 80047ea:	898b      	ldrh	r3, [r1, #12]
 80047ec:	061b      	lsls	r3, r3, #24
 80047ee:	b09d      	sub	sp, #116	; 0x74
 80047f0:	4607      	mov	r7, r0
 80047f2:	460d      	mov	r5, r1
 80047f4:	4614      	mov	r4, r2
 80047f6:	d50e      	bpl.n	8004816 <_svfiprintf_r+0x32>
 80047f8:	690b      	ldr	r3, [r1, #16]
 80047fa:	b963      	cbnz	r3, 8004816 <_svfiprintf_r+0x32>
 80047fc:	2140      	movs	r1, #64	; 0x40
 80047fe:	f000 fafd 	bl	8004dfc <_malloc_r>
 8004802:	6028      	str	r0, [r5, #0]
 8004804:	6128      	str	r0, [r5, #16]
 8004806:	b920      	cbnz	r0, 8004812 <_svfiprintf_r+0x2e>
 8004808:	230c      	movs	r3, #12
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	f04f 30ff 	mov.w	r0, #4294967295
 8004810:	e0d1      	b.n	80049b6 <_svfiprintf_r+0x1d2>
 8004812:	2340      	movs	r3, #64	; 0x40
 8004814:	616b      	str	r3, [r5, #20]
 8004816:	2300      	movs	r3, #0
 8004818:	9309      	str	r3, [sp, #36]	; 0x24
 800481a:	2320      	movs	r3, #32
 800481c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004820:	f8cd 800c 	str.w	r8, [sp, #12]
 8004824:	2330      	movs	r3, #48	; 0x30
 8004826:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80049d0 <_svfiprintf_r+0x1ec>
 800482a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800482e:	f04f 0901 	mov.w	r9, #1
 8004832:	4623      	mov	r3, r4
 8004834:	469a      	mov	sl, r3
 8004836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800483a:	b10a      	cbz	r2, 8004840 <_svfiprintf_r+0x5c>
 800483c:	2a25      	cmp	r2, #37	; 0x25
 800483e:	d1f9      	bne.n	8004834 <_svfiprintf_r+0x50>
 8004840:	ebba 0b04 	subs.w	fp, sl, r4
 8004844:	d00b      	beq.n	800485e <_svfiprintf_r+0x7a>
 8004846:	465b      	mov	r3, fp
 8004848:	4622      	mov	r2, r4
 800484a:	4629      	mov	r1, r5
 800484c:	4638      	mov	r0, r7
 800484e:	f7ff ff6d 	bl	800472c <__ssputs_r>
 8004852:	3001      	adds	r0, #1
 8004854:	f000 80aa 	beq.w	80049ac <_svfiprintf_r+0x1c8>
 8004858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800485a:	445a      	add	r2, fp
 800485c:	9209      	str	r2, [sp, #36]	; 0x24
 800485e:	f89a 3000 	ldrb.w	r3, [sl]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 80a2 	beq.w	80049ac <_svfiprintf_r+0x1c8>
 8004868:	2300      	movs	r3, #0
 800486a:	f04f 32ff 	mov.w	r2, #4294967295
 800486e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004872:	f10a 0a01 	add.w	sl, sl, #1
 8004876:	9304      	str	r3, [sp, #16]
 8004878:	9307      	str	r3, [sp, #28]
 800487a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800487e:	931a      	str	r3, [sp, #104]	; 0x68
 8004880:	4654      	mov	r4, sl
 8004882:	2205      	movs	r2, #5
 8004884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004888:	4851      	ldr	r0, [pc, #324]	; (80049d0 <_svfiprintf_r+0x1ec>)
 800488a:	f7fb fcd9 	bl	8000240 <memchr>
 800488e:	9a04      	ldr	r2, [sp, #16]
 8004890:	b9d8      	cbnz	r0, 80048ca <_svfiprintf_r+0xe6>
 8004892:	06d0      	lsls	r0, r2, #27
 8004894:	bf44      	itt	mi
 8004896:	2320      	movmi	r3, #32
 8004898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800489c:	0711      	lsls	r1, r2, #28
 800489e:	bf44      	itt	mi
 80048a0:	232b      	movmi	r3, #43	; 0x2b
 80048a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048a6:	f89a 3000 	ldrb.w	r3, [sl]
 80048aa:	2b2a      	cmp	r3, #42	; 0x2a
 80048ac:	d015      	beq.n	80048da <_svfiprintf_r+0xf6>
 80048ae:	9a07      	ldr	r2, [sp, #28]
 80048b0:	4654      	mov	r4, sl
 80048b2:	2000      	movs	r0, #0
 80048b4:	f04f 0c0a 	mov.w	ip, #10
 80048b8:	4621      	mov	r1, r4
 80048ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048be:	3b30      	subs	r3, #48	; 0x30
 80048c0:	2b09      	cmp	r3, #9
 80048c2:	d94e      	bls.n	8004962 <_svfiprintf_r+0x17e>
 80048c4:	b1b0      	cbz	r0, 80048f4 <_svfiprintf_r+0x110>
 80048c6:	9207      	str	r2, [sp, #28]
 80048c8:	e014      	b.n	80048f4 <_svfiprintf_r+0x110>
 80048ca:	eba0 0308 	sub.w	r3, r0, r8
 80048ce:	fa09 f303 	lsl.w	r3, r9, r3
 80048d2:	4313      	orrs	r3, r2
 80048d4:	9304      	str	r3, [sp, #16]
 80048d6:	46a2      	mov	sl, r4
 80048d8:	e7d2      	b.n	8004880 <_svfiprintf_r+0x9c>
 80048da:	9b03      	ldr	r3, [sp, #12]
 80048dc:	1d19      	adds	r1, r3, #4
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	9103      	str	r1, [sp, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bfbb      	ittet	lt
 80048e6:	425b      	neglt	r3, r3
 80048e8:	f042 0202 	orrlt.w	r2, r2, #2
 80048ec:	9307      	strge	r3, [sp, #28]
 80048ee:	9307      	strlt	r3, [sp, #28]
 80048f0:	bfb8      	it	lt
 80048f2:	9204      	strlt	r2, [sp, #16]
 80048f4:	7823      	ldrb	r3, [r4, #0]
 80048f6:	2b2e      	cmp	r3, #46	; 0x2e
 80048f8:	d10c      	bne.n	8004914 <_svfiprintf_r+0x130>
 80048fa:	7863      	ldrb	r3, [r4, #1]
 80048fc:	2b2a      	cmp	r3, #42	; 0x2a
 80048fe:	d135      	bne.n	800496c <_svfiprintf_r+0x188>
 8004900:	9b03      	ldr	r3, [sp, #12]
 8004902:	1d1a      	adds	r2, r3, #4
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	9203      	str	r2, [sp, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	bfb8      	it	lt
 800490c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004910:	3402      	adds	r4, #2
 8004912:	9305      	str	r3, [sp, #20]
 8004914:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80049e0 <_svfiprintf_r+0x1fc>
 8004918:	7821      	ldrb	r1, [r4, #0]
 800491a:	2203      	movs	r2, #3
 800491c:	4650      	mov	r0, sl
 800491e:	f7fb fc8f 	bl	8000240 <memchr>
 8004922:	b140      	cbz	r0, 8004936 <_svfiprintf_r+0x152>
 8004924:	2340      	movs	r3, #64	; 0x40
 8004926:	eba0 000a 	sub.w	r0, r0, sl
 800492a:	fa03 f000 	lsl.w	r0, r3, r0
 800492e:	9b04      	ldr	r3, [sp, #16]
 8004930:	4303      	orrs	r3, r0
 8004932:	3401      	adds	r4, #1
 8004934:	9304      	str	r3, [sp, #16]
 8004936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800493a:	4826      	ldr	r0, [pc, #152]	; (80049d4 <_svfiprintf_r+0x1f0>)
 800493c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004940:	2206      	movs	r2, #6
 8004942:	f7fb fc7d 	bl	8000240 <memchr>
 8004946:	2800      	cmp	r0, #0
 8004948:	d038      	beq.n	80049bc <_svfiprintf_r+0x1d8>
 800494a:	4b23      	ldr	r3, [pc, #140]	; (80049d8 <_svfiprintf_r+0x1f4>)
 800494c:	bb1b      	cbnz	r3, 8004996 <_svfiprintf_r+0x1b2>
 800494e:	9b03      	ldr	r3, [sp, #12]
 8004950:	3307      	adds	r3, #7
 8004952:	f023 0307 	bic.w	r3, r3, #7
 8004956:	3308      	adds	r3, #8
 8004958:	9303      	str	r3, [sp, #12]
 800495a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800495c:	4433      	add	r3, r6
 800495e:	9309      	str	r3, [sp, #36]	; 0x24
 8004960:	e767      	b.n	8004832 <_svfiprintf_r+0x4e>
 8004962:	fb0c 3202 	mla	r2, ip, r2, r3
 8004966:	460c      	mov	r4, r1
 8004968:	2001      	movs	r0, #1
 800496a:	e7a5      	b.n	80048b8 <_svfiprintf_r+0xd4>
 800496c:	2300      	movs	r3, #0
 800496e:	3401      	adds	r4, #1
 8004970:	9305      	str	r3, [sp, #20]
 8004972:	4619      	mov	r1, r3
 8004974:	f04f 0c0a 	mov.w	ip, #10
 8004978:	4620      	mov	r0, r4
 800497a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800497e:	3a30      	subs	r2, #48	; 0x30
 8004980:	2a09      	cmp	r2, #9
 8004982:	d903      	bls.n	800498c <_svfiprintf_r+0x1a8>
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0c5      	beq.n	8004914 <_svfiprintf_r+0x130>
 8004988:	9105      	str	r1, [sp, #20]
 800498a:	e7c3      	b.n	8004914 <_svfiprintf_r+0x130>
 800498c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004990:	4604      	mov	r4, r0
 8004992:	2301      	movs	r3, #1
 8004994:	e7f0      	b.n	8004978 <_svfiprintf_r+0x194>
 8004996:	ab03      	add	r3, sp, #12
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	462a      	mov	r2, r5
 800499c:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <_svfiprintf_r+0x1f8>)
 800499e:	a904      	add	r1, sp, #16
 80049a0:	4638      	mov	r0, r7
 80049a2:	f3af 8000 	nop.w
 80049a6:	1c42      	adds	r2, r0, #1
 80049a8:	4606      	mov	r6, r0
 80049aa:	d1d6      	bne.n	800495a <_svfiprintf_r+0x176>
 80049ac:	89ab      	ldrh	r3, [r5, #12]
 80049ae:	065b      	lsls	r3, r3, #25
 80049b0:	f53f af2c 	bmi.w	800480c <_svfiprintf_r+0x28>
 80049b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049b6:	b01d      	add	sp, #116	; 0x74
 80049b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049bc:	ab03      	add	r3, sp, #12
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	462a      	mov	r2, r5
 80049c2:	4b06      	ldr	r3, [pc, #24]	; (80049dc <_svfiprintf_r+0x1f8>)
 80049c4:	a904      	add	r1, sp, #16
 80049c6:	4638      	mov	r0, r7
 80049c8:	f000 f87a 	bl	8004ac0 <_printf_i>
 80049cc:	e7eb      	b.n	80049a6 <_svfiprintf_r+0x1c2>
 80049ce:	bf00      	nop
 80049d0:	08004fc4 	.word	0x08004fc4
 80049d4:	08004fce 	.word	0x08004fce
 80049d8:	00000000 	.word	0x00000000
 80049dc:	0800472d 	.word	0x0800472d
 80049e0:	08004fca 	.word	0x08004fca

080049e4 <_printf_common>:
 80049e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049e8:	4616      	mov	r6, r2
 80049ea:	4699      	mov	r9, r3
 80049ec:	688a      	ldr	r2, [r1, #8]
 80049ee:	690b      	ldr	r3, [r1, #16]
 80049f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049f4:	4293      	cmp	r3, r2
 80049f6:	bfb8      	it	lt
 80049f8:	4613      	movlt	r3, r2
 80049fa:	6033      	str	r3, [r6, #0]
 80049fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a00:	4607      	mov	r7, r0
 8004a02:	460c      	mov	r4, r1
 8004a04:	b10a      	cbz	r2, 8004a0a <_printf_common+0x26>
 8004a06:	3301      	adds	r3, #1
 8004a08:	6033      	str	r3, [r6, #0]
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	0699      	lsls	r1, r3, #26
 8004a0e:	bf42      	ittt	mi
 8004a10:	6833      	ldrmi	r3, [r6, #0]
 8004a12:	3302      	addmi	r3, #2
 8004a14:	6033      	strmi	r3, [r6, #0]
 8004a16:	6825      	ldr	r5, [r4, #0]
 8004a18:	f015 0506 	ands.w	r5, r5, #6
 8004a1c:	d106      	bne.n	8004a2c <_printf_common+0x48>
 8004a1e:	f104 0a19 	add.w	sl, r4, #25
 8004a22:	68e3      	ldr	r3, [r4, #12]
 8004a24:	6832      	ldr	r2, [r6, #0]
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	42ab      	cmp	r3, r5
 8004a2a:	dc26      	bgt.n	8004a7a <_printf_common+0x96>
 8004a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a30:	1e13      	subs	r3, r2, #0
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	bf18      	it	ne
 8004a36:	2301      	movne	r3, #1
 8004a38:	0692      	lsls	r2, r2, #26
 8004a3a:	d42b      	bmi.n	8004a94 <_printf_common+0xb0>
 8004a3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a40:	4649      	mov	r1, r9
 8004a42:	4638      	mov	r0, r7
 8004a44:	47c0      	blx	r8
 8004a46:	3001      	adds	r0, #1
 8004a48:	d01e      	beq.n	8004a88 <_printf_common+0xa4>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	68e5      	ldr	r5, [r4, #12]
 8004a4e:	6832      	ldr	r2, [r6, #0]
 8004a50:	f003 0306 	and.w	r3, r3, #6
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	bf08      	it	eq
 8004a58:	1aad      	subeq	r5, r5, r2
 8004a5a:	68a3      	ldr	r3, [r4, #8]
 8004a5c:	6922      	ldr	r2, [r4, #16]
 8004a5e:	bf0c      	ite	eq
 8004a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a64:	2500      	movne	r5, #0
 8004a66:	4293      	cmp	r3, r2
 8004a68:	bfc4      	itt	gt
 8004a6a:	1a9b      	subgt	r3, r3, r2
 8004a6c:	18ed      	addgt	r5, r5, r3
 8004a6e:	2600      	movs	r6, #0
 8004a70:	341a      	adds	r4, #26
 8004a72:	42b5      	cmp	r5, r6
 8004a74:	d11a      	bne.n	8004aac <_printf_common+0xc8>
 8004a76:	2000      	movs	r0, #0
 8004a78:	e008      	b.n	8004a8c <_printf_common+0xa8>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	4652      	mov	r2, sl
 8004a7e:	4649      	mov	r1, r9
 8004a80:	4638      	mov	r0, r7
 8004a82:	47c0      	blx	r8
 8004a84:	3001      	adds	r0, #1
 8004a86:	d103      	bne.n	8004a90 <_printf_common+0xac>
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a90:	3501      	adds	r5, #1
 8004a92:	e7c6      	b.n	8004a22 <_printf_common+0x3e>
 8004a94:	18e1      	adds	r1, r4, r3
 8004a96:	1c5a      	adds	r2, r3, #1
 8004a98:	2030      	movs	r0, #48	; 0x30
 8004a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a9e:	4422      	add	r2, r4
 8004aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004aa8:	3302      	adds	r3, #2
 8004aaa:	e7c7      	b.n	8004a3c <_printf_common+0x58>
 8004aac:	2301      	movs	r3, #1
 8004aae:	4622      	mov	r2, r4
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	4638      	mov	r0, r7
 8004ab4:	47c0      	blx	r8
 8004ab6:	3001      	adds	r0, #1
 8004ab8:	d0e6      	beq.n	8004a88 <_printf_common+0xa4>
 8004aba:	3601      	adds	r6, #1
 8004abc:	e7d9      	b.n	8004a72 <_printf_common+0x8e>
	...

08004ac0 <_printf_i>:
 8004ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	4691      	mov	r9, r2
 8004ac8:	7e27      	ldrb	r7, [r4, #24]
 8004aca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004acc:	2f78      	cmp	r7, #120	; 0x78
 8004ace:	4680      	mov	r8, r0
 8004ad0:	469a      	mov	sl, r3
 8004ad2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ad6:	d807      	bhi.n	8004ae8 <_printf_i+0x28>
 8004ad8:	2f62      	cmp	r7, #98	; 0x62
 8004ada:	d80a      	bhi.n	8004af2 <_printf_i+0x32>
 8004adc:	2f00      	cmp	r7, #0
 8004ade:	f000 80d8 	beq.w	8004c92 <_printf_i+0x1d2>
 8004ae2:	2f58      	cmp	r7, #88	; 0x58
 8004ae4:	f000 80a3 	beq.w	8004c2e <_printf_i+0x16e>
 8004ae8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004af0:	e03a      	b.n	8004b68 <_printf_i+0xa8>
 8004af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004af6:	2b15      	cmp	r3, #21
 8004af8:	d8f6      	bhi.n	8004ae8 <_printf_i+0x28>
 8004afa:	a001      	add	r0, pc, #4	; (adr r0, 8004b00 <_printf_i+0x40>)
 8004afc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b00:	08004b59 	.word	0x08004b59
 8004b04:	08004b6d 	.word	0x08004b6d
 8004b08:	08004ae9 	.word	0x08004ae9
 8004b0c:	08004ae9 	.word	0x08004ae9
 8004b10:	08004ae9 	.word	0x08004ae9
 8004b14:	08004ae9 	.word	0x08004ae9
 8004b18:	08004b6d 	.word	0x08004b6d
 8004b1c:	08004ae9 	.word	0x08004ae9
 8004b20:	08004ae9 	.word	0x08004ae9
 8004b24:	08004ae9 	.word	0x08004ae9
 8004b28:	08004ae9 	.word	0x08004ae9
 8004b2c:	08004c79 	.word	0x08004c79
 8004b30:	08004b9d 	.word	0x08004b9d
 8004b34:	08004c5b 	.word	0x08004c5b
 8004b38:	08004ae9 	.word	0x08004ae9
 8004b3c:	08004ae9 	.word	0x08004ae9
 8004b40:	08004c9b 	.word	0x08004c9b
 8004b44:	08004ae9 	.word	0x08004ae9
 8004b48:	08004b9d 	.word	0x08004b9d
 8004b4c:	08004ae9 	.word	0x08004ae9
 8004b50:	08004ae9 	.word	0x08004ae9
 8004b54:	08004c63 	.word	0x08004c63
 8004b58:	680b      	ldr	r3, [r1, #0]
 8004b5a:	1d1a      	adds	r2, r3, #4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	600a      	str	r2, [r1, #0]
 8004b60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0a3      	b.n	8004cb4 <_printf_i+0x1f4>
 8004b6c:	6825      	ldr	r5, [r4, #0]
 8004b6e:	6808      	ldr	r0, [r1, #0]
 8004b70:	062e      	lsls	r6, r5, #24
 8004b72:	f100 0304 	add.w	r3, r0, #4
 8004b76:	d50a      	bpl.n	8004b8e <_printf_i+0xce>
 8004b78:	6805      	ldr	r5, [r0, #0]
 8004b7a:	600b      	str	r3, [r1, #0]
 8004b7c:	2d00      	cmp	r5, #0
 8004b7e:	da03      	bge.n	8004b88 <_printf_i+0xc8>
 8004b80:	232d      	movs	r3, #45	; 0x2d
 8004b82:	426d      	negs	r5, r5
 8004b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b88:	485e      	ldr	r0, [pc, #376]	; (8004d04 <_printf_i+0x244>)
 8004b8a:	230a      	movs	r3, #10
 8004b8c:	e019      	b.n	8004bc2 <_printf_i+0x102>
 8004b8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b92:	6805      	ldr	r5, [r0, #0]
 8004b94:	600b      	str	r3, [r1, #0]
 8004b96:	bf18      	it	ne
 8004b98:	b22d      	sxthne	r5, r5
 8004b9a:	e7ef      	b.n	8004b7c <_printf_i+0xbc>
 8004b9c:	680b      	ldr	r3, [r1, #0]
 8004b9e:	6825      	ldr	r5, [r4, #0]
 8004ba0:	1d18      	adds	r0, r3, #4
 8004ba2:	6008      	str	r0, [r1, #0]
 8004ba4:	0628      	lsls	r0, r5, #24
 8004ba6:	d501      	bpl.n	8004bac <_printf_i+0xec>
 8004ba8:	681d      	ldr	r5, [r3, #0]
 8004baa:	e002      	b.n	8004bb2 <_printf_i+0xf2>
 8004bac:	0669      	lsls	r1, r5, #25
 8004bae:	d5fb      	bpl.n	8004ba8 <_printf_i+0xe8>
 8004bb0:	881d      	ldrh	r5, [r3, #0]
 8004bb2:	4854      	ldr	r0, [pc, #336]	; (8004d04 <_printf_i+0x244>)
 8004bb4:	2f6f      	cmp	r7, #111	; 0x6f
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2308      	moveq	r3, #8
 8004bba:	230a      	movne	r3, #10
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bc2:	6866      	ldr	r6, [r4, #4]
 8004bc4:	60a6      	str	r6, [r4, #8]
 8004bc6:	2e00      	cmp	r6, #0
 8004bc8:	bfa2      	ittt	ge
 8004bca:	6821      	ldrge	r1, [r4, #0]
 8004bcc:	f021 0104 	bicge.w	r1, r1, #4
 8004bd0:	6021      	strge	r1, [r4, #0]
 8004bd2:	b90d      	cbnz	r5, 8004bd8 <_printf_i+0x118>
 8004bd4:	2e00      	cmp	r6, #0
 8004bd6:	d04d      	beq.n	8004c74 <_printf_i+0x1b4>
 8004bd8:	4616      	mov	r6, r2
 8004bda:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bde:	fb03 5711 	mls	r7, r3, r1, r5
 8004be2:	5dc7      	ldrb	r7, [r0, r7]
 8004be4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004be8:	462f      	mov	r7, r5
 8004bea:	42bb      	cmp	r3, r7
 8004bec:	460d      	mov	r5, r1
 8004bee:	d9f4      	bls.n	8004bda <_printf_i+0x11a>
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d10b      	bne.n	8004c0c <_printf_i+0x14c>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	07df      	lsls	r7, r3, #31
 8004bf8:	d508      	bpl.n	8004c0c <_printf_i+0x14c>
 8004bfa:	6923      	ldr	r3, [r4, #16]
 8004bfc:	6861      	ldr	r1, [r4, #4]
 8004bfe:	4299      	cmp	r1, r3
 8004c00:	bfde      	ittt	le
 8004c02:	2330      	movle	r3, #48	; 0x30
 8004c04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c0c:	1b92      	subs	r2, r2, r6
 8004c0e:	6122      	str	r2, [r4, #16]
 8004c10:	f8cd a000 	str.w	sl, [sp]
 8004c14:	464b      	mov	r3, r9
 8004c16:	aa03      	add	r2, sp, #12
 8004c18:	4621      	mov	r1, r4
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	f7ff fee2 	bl	80049e4 <_printf_common>
 8004c20:	3001      	adds	r0, #1
 8004c22:	d14c      	bne.n	8004cbe <_printf_i+0x1fe>
 8004c24:	f04f 30ff 	mov.w	r0, #4294967295
 8004c28:	b004      	add	sp, #16
 8004c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c2e:	4835      	ldr	r0, [pc, #212]	; (8004d04 <_printf_i+0x244>)
 8004c30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	680e      	ldr	r6, [r1, #0]
 8004c38:	061f      	lsls	r7, r3, #24
 8004c3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c3e:	600e      	str	r6, [r1, #0]
 8004c40:	d514      	bpl.n	8004c6c <_printf_i+0x1ac>
 8004c42:	07d9      	lsls	r1, r3, #31
 8004c44:	bf44      	itt	mi
 8004c46:	f043 0320 	orrmi.w	r3, r3, #32
 8004c4a:	6023      	strmi	r3, [r4, #0]
 8004c4c:	b91d      	cbnz	r5, 8004c56 <_printf_i+0x196>
 8004c4e:	6823      	ldr	r3, [r4, #0]
 8004c50:	f023 0320 	bic.w	r3, r3, #32
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	2310      	movs	r3, #16
 8004c58:	e7b0      	b.n	8004bbc <_printf_i+0xfc>
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	f043 0320 	orr.w	r3, r3, #32
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	2378      	movs	r3, #120	; 0x78
 8004c64:	4828      	ldr	r0, [pc, #160]	; (8004d08 <_printf_i+0x248>)
 8004c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c6a:	e7e3      	b.n	8004c34 <_printf_i+0x174>
 8004c6c:	065e      	lsls	r6, r3, #25
 8004c6e:	bf48      	it	mi
 8004c70:	b2ad      	uxthmi	r5, r5
 8004c72:	e7e6      	b.n	8004c42 <_printf_i+0x182>
 8004c74:	4616      	mov	r6, r2
 8004c76:	e7bb      	b.n	8004bf0 <_printf_i+0x130>
 8004c78:	680b      	ldr	r3, [r1, #0]
 8004c7a:	6826      	ldr	r6, [r4, #0]
 8004c7c:	6960      	ldr	r0, [r4, #20]
 8004c7e:	1d1d      	adds	r5, r3, #4
 8004c80:	600d      	str	r5, [r1, #0]
 8004c82:	0635      	lsls	r5, r6, #24
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	d501      	bpl.n	8004c8c <_printf_i+0x1cc>
 8004c88:	6018      	str	r0, [r3, #0]
 8004c8a:	e002      	b.n	8004c92 <_printf_i+0x1d2>
 8004c8c:	0671      	lsls	r1, r6, #25
 8004c8e:	d5fb      	bpl.n	8004c88 <_printf_i+0x1c8>
 8004c90:	8018      	strh	r0, [r3, #0]
 8004c92:	2300      	movs	r3, #0
 8004c94:	6123      	str	r3, [r4, #16]
 8004c96:	4616      	mov	r6, r2
 8004c98:	e7ba      	b.n	8004c10 <_printf_i+0x150>
 8004c9a:	680b      	ldr	r3, [r1, #0]
 8004c9c:	1d1a      	adds	r2, r3, #4
 8004c9e:	600a      	str	r2, [r1, #0]
 8004ca0:	681e      	ldr	r6, [r3, #0]
 8004ca2:	6862      	ldr	r2, [r4, #4]
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	f7fb faca 	bl	8000240 <memchr>
 8004cac:	b108      	cbz	r0, 8004cb2 <_printf_i+0x1f2>
 8004cae:	1b80      	subs	r0, r0, r6
 8004cb0:	6060      	str	r0, [r4, #4]
 8004cb2:	6863      	ldr	r3, [r4, #4]
 8004cb4:	6123      	str	r3, [r4, #16]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cbc:	e7a8      	b.n	8004c10 <_printf_i+0x150>
 8004cbe:	6923      	ldr	r3, [r4, #16]
 8004cc0:	4632      	mov	r2, r6
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	4640      	mov	r0, r8
 8004cc6:	47d0      	blx	sl
 8004cc8:	3001      	adds	r0, #1
 8004cca:	d0ab      	beq.n	8004c24 <_printf_i+0x164>
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	079b      	lsls	r3, r3, #30
 8004cd0:	d413      	bmi.n	8004cfa <_printf_i+0x23a>
 8004cd2:	68e0      	ldr	r0, [r4, #12]
 8004cd4:	9b03      	ldr	r3, [sp, #12]
 8004cd6:	4298      	cmp	r0, r3
 8004cd8:	bfb8      	it	lt
 8004cda:	4618      	movlt	r0, r3
 8004cdc:	e7a4      	b.n	8004c28 <_printf_i+0x168>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	4632      	mov	r2, r6
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	4640      	mov	r0, r8
 8004ce6:	47d0      	blx	sl
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d09b      	beq.n	8004c24 <_printf_i+0x164>
 8004cec:	3501      	adds	r5, #1
 8004cee:	68e3      	ldr	r3, [r4, #12]
 8004cf0:	9903      	ldr	r1, [sp, #12]
 8004cf2:	1a5b      	subs	r3, r3, r1
 8004cf4:	42ab      	cmp	r3, r5
 8004cf6:	dcf2      	bgt.n	8004cde <_printf_i+0x21e>
 8004cf8:	e7eb      	b.n	8004cd2 <_printf_i+0x212>
 8004cfa:	2500      	movs	r5, #0
 8004cfc:	f104 0619 	add.w	r6, r4, #25
 8004d00:	e7f5      	b.n	8004cee <_printf_i+0x22e>
 8004d02:	bf00      	nop
 8004d04:	08004fd5 	.word	0x08004fd5
 8004d08:	08004fe6 	.word	0x08004fe6

08004d0c <memcpy>:
 8004d0c:	440a      	add	r2, r1
 8004d0e:	4291      	cmp	r1, r2
 8004d10:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d14:	d100      	bne.n	8004d18 <memcpy+0xc>
 8004d16:	4770      	bx	lr
 8004d18:	b510      	push	{r4, lr}
 8004d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d22:	4291      	cmp	r1, r2
 8004d24:	d1f9      	bne.n	8004d1a <memcpy+0xe>
 8004d26:	bd10      	pop	{r4, pc}

08004d28 <memmove>:
 8004d28:	4288      	cmp	r0, r1
 8004d2a:	b510      	push	{r4, lr}
 8004d2c:	eb01 0402 	add.w	r4, r1, r2
 8004d30:	d902      	bls.n	8004d38 <memmove+0x10>
 8004d32:	4284      	cmp	r4, r0
 8004d34:	4623      	mov	r3, r4
 8004d36:	d807      	bhi.n	8004d48 <memmove+0x20>
 8004d38:	1e43      	subs	r3, r0, #1
 8004d3a:	42a1      	cmp	r1, r4
 8004d3c:	d008      	beq.n	8004d50 <memmove+0x28>
 8004d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d46:	e7f8      	b.n	8004d3a <memmove+0x12>
 8004d48:	4402      	add	r2, r0
 8004d4a:	4601      	mov	r1, r0
 8004d4c:	428a      	cmp	r2, r1
 8004d4e:	d100      	bne.n	8004d52 <memmove+0x2a>
 8004d50:	bd10      	pop	{r4, pc}
 8004d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d5a:	e7f7      	b.n	8004d4c <memmove+0x24>

08004d5c <_free_r>:
 8004d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d5e:	2900      	cmp	r1, #0
 8004d60:	d048      	beq.n	8004df4 <_free_r+0x98>
 8004d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d66:	9001      	str	r0, [sp, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8004d6e:	bfb8      	it	lt
 8004d70:	18e4      	addlt	r4, r4, r3
 8004d72:	f000 f8d3 	bl	8004f1c <__malloc_lock>
 8004d76:	4a20      	ldr	r2, [pc, #128]	; (8004df8 <_free_r+0x9c>)
 8004d78:	9801      	ldr	r0, [sp, #4]
 8004d7a:	6813      	ldr	r3, [r2, #0]
 8004d7c:	4615      	mov	r5, r2
 8004d7e:	b933      	cbnz	r3, 8004d8e <_free_r+0x32>
 8004d80:	6063      	str	r3, [r4, #4]
 8004d82:	6014      	str	r4, [r2, #0]
 8004d84:	b003      	add	sp, #12
 8004d86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d8a:	f000 b8cd 	b.w	8004f28 <__malloc_unlock>
 8004d8e:	42a3      	cmp	r3, r4
 8004d90:	d90b      	bls.n	8004daa <_free_r+0x4e>
 8004d92:	6821      	ldr	r1, [r4, #0]
 8004d94:	1862      	adds	r2, r4, r1
 8004d96:	4293      	cmp	r3, r2
 8004d98:	bf04      	itt	eq
 8004d9a:	681a      	ldreq	r2, [r3, #0]
 8004d9c:	685b      	ldreq	r3, [r3, #4]
 8004d9e:	6063      	str	r3, [r4, #4]
 8004da0:	bf04      	itt	eq
 8004da2:	1852      	addeq	r2, r2, r1
 8004da4:	6022      	streq	r2, [r4, #0]
 8004da6:	602c      	str	r4, [r5, #0]
 8004da8:	e7ec      	b.n	8004d84 <_free_r+0x28>
 8004daa:	461a      	mov	r2, r3
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	b10b      	cbz	r3, 8004db4 <_free_r+0x58>
 8004db0:	42a3      	cmp	r3, r4
 8004db2:	d9fa      	bls.n	8004daa <_free_r+0x4e>
 8004db4:	6811      	ldr	r1, [r2, #0]
 8004db6:	1855      	adds	r5, r2, r1
 8004db8:	42a5      	cmp	r5, r4
 8004dba:	d10b      	bne.n	8004dd4 <_free_r+0x78>
 8004dbc:	6824      	ldr	r4, [r4, #0]
 8004dbe:	4421      	add	r1, r4
 8004dc0:	1854      	adds	r4, r2, r1
 8004dc2:	42a3      	cmp	r3, r4
 8004dc4:	6011      	str	r1, [r2, #0]
 8004dc6:	d1dd      	bne.n	8004d84 <_free_r+0x28>
 8004dc8:	681c      	ldr	r4, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	6053      	str	r3, [r2, #4]
 8004dce:	4421      	add	r1, r4
 8004dd0:	6011      	str	r1, [r2, #0]
 8004dd2:	e7d7      	b.n	8004d84 <_free_r+0x28>
 8004dd4:	d902      	bls.n	8004ddc <_free_r+0x80>
 8004dd6:	230c      	movs	r3, #12
 8004dd8:	6003      	str	r3, [r0, #0]
 8004dda:	e7d3      	b.n	8004d84 <_free_r+0x28>
 8004ddc:	6825      	ldr	r5, [r4, #0]
 8004dde:	1961      	adds	r1, r4, r5
 8004de0:	428b      	cmp	r3, r1
 8004de2:	bf04      	itt	eq
 8004de4:	6819      	ldreq	r1, [r3, #0]
 8004de6:	685b      	ldreq	r3, [r3, #4]
 8004de8:	6063      	str	r3, [r4, #4]
 8004dea:	bf04      	itt	eq
 8004dec:	1949      	addeq	r1, r1, r5
 8004dee:	6021      	streq	r1, [r4, #0]
 8004df0:	6054      	str	r4, [r2, #4]
 8004df2:	e7c7      	b.n	8004d84 <_free_r+0x28>
 8004df4:	b003      	add	sp, #12
 8004df6:	bd30      	pop	{r4, r5, pc}
 8004df8:	20000090 	.word	0x20000090

08004dfc <_malloc_r>:
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	1ccd      	adds	r5, r1, #3
 8004e00:	f025 0503 	bic.w	r5, r5, #3
 8004e04:	3508      	adds	r5, #8
 8004e06:	2d0c      	cmp	r5, #12
 8004e08:	bf38      	it	cc
 8004e0a:	250c      	movcc	r5, #12
 8004e0c:	2d00      	cmp	r5, #0
 8004e0e:	4606      	mov	r6, r0
 8004e10:	db01      	blt.n	8004e16 <_malloc_r+0x1a>
 8004e12:	42a9      	cmp	r1, r5
 8004e14:	d903      	bls.n	8004e1e <_malloc_r+0x22>
 8004e16:	230c      	movs	r3, #12
 8004e18:	6033      	str	r3, [r6, #0]
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e1e:	f000 f87d 	bl	8004f1c <__malloc_lock>
 8004e22:	4921      	ldr	r1, [pc, #132]	; (8004ea8 <_malloc_r+0xac>)
 8004e24:	680a      	ldr	r2, [r1, #0]
 8004e26:	4614      	mov	r4, r2
 8004e28:	b99c      	cbnz	r4, 8004e52 <_malloc_r+0x56>
 8004e2a:	4f20      	ldr	r7, [pc, #128]	; (8004eac <_malloc_r+0xb0>)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	b923      	cbnz	r3, 8004e3a <_malloc_r+0x3e>
 8004e30:	4621      	mov	r1, r4
 8004e32:	4630      	mov	r0, r6
 8004e34:	f000 f862 	bl	8004efc <_sbrk_r>
 8004e38:	6038      	str	r0, [r7, #0]
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	f000 f85d 	bl	8004efc <_sbrk_r>
 8004e42:	1c43      	adds	r3, r0, #1
 8004e44:	d123      	bne.n	8004e8e <_malloc_r+0x92>
 8004e46:	230c      	movs	r3, #12
 8004e48:	6033      	str	r3, [r6, #0]
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f000 f86c 	bl	8004f28 <__malloc_unlock>
 8004e50:	e7e3      	b.n	8004e1a <_malloc_r+0x1e>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	1b5b      	subs	r3, r3, r5
 8004e56:	d417      	bmi.n	8004e88 <_malloc_r+0x8c>
 8004e58:	2b0b      	cmp	r3, #11
 8004e5a:	d903      	bls.n	8004e64 <_malloc_r+0x68>
 8004e5c:	6023      	str	r3, [r4, #0]
 8004e5e:	441c      	add	r4, r3
 8004e60:	6025      	str	r5, [r4, #0]
 8004e62:	e004      	b.n	8004e6e <_malloc_r+0x72>
 8004e64:	6863      	ldr	r3, [r4, #4]
 8004e66:	42a2      	cmp	r2, r4
 8004e68:	bf0c      	ite	eq
 8004e6a:	600b      	streq	r3, [r1, #0]
 8004e6c:	6053      	strne	r3, [r2, #4]
 8004e6e:	4630      	mov	r0, r6
 8004e70:	f000 f85a 	bl	8004f28 <__malloc_unlock>
 8004e74:	f104 000b 	add.w	r0, r4, #11
 8004e78:	1d23      	adds	r3, r4, #4
 8004e7a:	f020 0007 	bic.w	r0, r0, #7
 8004e7e:	1ac2      	subs	r2, r0, r3
 8004e80:	d0cc      	beq.n	8004e1c <_malloc_r+0x20>
 8004e82:	1a1b      	subs	r3, r3, r0
 8004e84:	50a3      	str	r3, [r4, r2]
 8004e86:	e7c9      	b.n	8004e1c <_malloc_r+0x20>
 8004e88:	4622      	mov	r2, r4
 8004e8a:	6864      	ldr	r4, [r4, #4]
 8004e8c:	e7cc      	b.n	8004e28 <_malloc_r+0x2c>
 8004e8e:	1cc4      	adds	r4, r0, #3
 8004e90:	f024 0403 	bic.w	r4, r4, #3
 8004e94:	42a0      	cmp	r0, r4
 8004e96:	d0e3      	beq.n	8004e60 <_malloc_r+0x64>
 8004e98:	1a21      	subs	r1, r4, r0
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f000 f82e 	bl	8004efc <_sbrk_r>
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d1dd      	bne.n	8004e60 <_malloc_r+0x64>
 8004ea4:	e7cf      	b.n	8004e46 <_malloc_r+0x4a>
 8004ea6:	bf00      	nop
 8004ea8:	20000090 	.word	0x20000090
 8004eac:	20000094 	.word	0x20000094

08004eb0 <_realloc_r>:
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb2:	4607      	mov	r7, r0
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	460e      	mov	r6, r1
 8004eb8:	b921      	cbnz	r1, 8004ec4 <_realloc_r+0x14>
 8004eba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	f7ff bf9c 	b.w	8004dfc <_malloc_r>
 8004ec4:	b922      	cbnz	r2, 8004ed0 <_realloc_r+0x20>
 8004ec6:	f7ff ff49 	bl	8004d5c <_free_r>
 8004eca:	4625      	mov	r5, r4
 8004ecc:	4628      	mov	r0, r5
 8004ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ed0:	f000 f830 	bl	8004f34 <_malloc_usable_size_r>
 8004ed4:	42a0      	cmp	r0, r4
 8004ed6:	d20f      	bcs.n	8004ef8 <_realloc_r+0x48>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4638      	mov	r0, r7
 8004edc:	f7ff ff8e 	bl	8004dfc <_malloc_r>
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d0f2      	beq.n	8004ecc <_realloc_r+0x1c>
 8004ee6:	4631      	mov	r1, r6
 8004ee8:	4622      	mov	r2, r4
 8004eea:	f7ff ff0f 	bl	8004d0c <memcpy>
 8004eee:	4631      	mov	r1, r6
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	f7ff ff33 	bl	8004d5c <_free_r>
 8004ef6:	e7e9      	b.n	8004ecc <_realloc_r+0x1c>
 8004ef8:	4635      	mov	r5, r6
 8004efa:	e7e7      	b.n	8004ecc <_realloc_r+0x1c>

08004efc <_sbrk_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4d06      	ldr	r5, [pc, #24]	; (8004f18 <_sbrk_r+0x1c>)
 8004f00:	2300      	movs	r3, #0
 8004f02:	4604      	mov	r4, r0
 8004f04:	4608      	mov	r0, r1
 8004f06:	602b      	str	r3, [r5, #0]
 8004f08:	f7fc f808 	bl	8000f1c <_sbrk>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_sbrk_r+0x1a>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_sbrk_r+0x1a>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	200005dc 	.word	0x200005dc

08004f1c <__malloc_lock>:
 8004f1c:	4801      	ldr	r0, [pc, #4]	; (8004f24 <__malloc_lock+0x8>)
 8004f1e:	f000 b811 	b.w	8004f44 <__retarget_lock_acquire_recursive>
 8004f22:	bf00      	nop
 8004f24:	200005e4 	.word	0x200005e4

08004f28 <__malloc_unlock>:
 8004f28:	4801      	ldr	r0, [pc, #4]	; (8004f30 <__malloc_unlock+0x8>)
 8004f2a:	f000 b80c 	b.w	8004f46 <__retarget_lock_release_recursive>
 8004f2e:	bf00      	nop
 8004f30:	200005e4 	.word	0x200005e4

08004f34 <_malloc_usable_size_r>:
 8004f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f38:	1f18      	subs	r0, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bfbc      	itt	lt
 8004f3e:	580b      	ldrlt	r3, [r1, r0]
 8004f40:	18c0      	addlt	r0, r0, r3
 8004f42:	4770      	bx	lr

08004f44 <__retarget_lock_acquire_recursive>:
 8004f44:	4770      	bx	lr

08004f46 <__retarget_lock_release_recursive>:
 8004f46:	4770      	bx	lr

08004f48 <_init>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	bf00      	nop
 8004f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4e:	bc08      	pop	{r3}
 8004f50:	469e      	mov	lr, r3
 8004f52:	4770      	bx	lr

08004f54 <_fini>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	bf00      	nop
 8004f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5a:	bc08      	pop	{r3}
 8004f5c:	469e      	mov	lr, r3
 8004f5e:	4770      	bx	lr
