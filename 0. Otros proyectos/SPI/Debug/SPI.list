
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006024  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006224  08006224  00016224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006324  08006324  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006324  08006324  00016324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800632c  0800632c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800632c  0800632c  0001632c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006330  08006330  00016330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000598  20000070  080063a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  080063a4  00020608  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e16  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d92  00000000  00000000  00037eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  0003ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c1a  00000000  00000000  0003d190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001764b  00000000  00000000  00065daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fed08  00000000  00000000  0007d3f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017c0fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005584  00000000  00000000  0017c150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800620c 	.word	0x0800620c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800620c 	.word	0x0800620c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b096      	sub	sp, #88	; 0x58
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fe26 	bl	800122e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f97f 	bl	80008e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fb07 	bl	8000bf8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ea:	f000 faa7 	bl	8000b3c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ee:	f000 fad5 	bl	8000b9c <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 80005f2:	f000 f9e9 	bl	80009c8 <MX_CRC_Init>
  MX_SPI1_Init();
 80005f6:	f000 fa09 	bl	8000a0c <MX_SPI1_Init>
  MX_TIM1_Init();
 80005fa:	f000 fa45 	bl	8000a88 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t status, manu;
  status = 0xD7;
 80005fe:	23d7      	movs	r3, #215	; 0xd7
 8000600:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  uint8_t msg;
  char buffer[50];
  uint16_t mover;

  uint32_t result1, result2;
  uint8_t CRCData[]={0x33, 0x33, 0x55, 0x55};
 8000604:	4ba7      	ldr	r3, [pc, #668]	; (80008a4 <main+0x2cc>)
 8000606:	607b      	str	r3, [r7, #4]
  result1 = HAL_CRC_Calculate(&hcrc, CRCData, 4);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2204      	movs	r2, #4
 800060c:	4619      	mov	r1, r3
 800060e:	48a6      	ldr	r0, [pc, #664]	; (80008a8 <main+0x2d0>)
 8000610:	f001 f848 	bl	80016a4 <HAL_CRC_Calculate>
 8000614:	6538      	str	r0, [r7, #80]	; 0x50
  result2 = HAL_CRC_Accumulate(&hcrc, CRCData, 4);
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2204      	movs	r2, #4
 800061a:	4619      	mov	r1, r3
 800061c:	48a2      	ldr	r0, [pc, #648]	; (80008a8 <main+0x2d0>)
 800061e:	f000 fffd 	bl	800161c <HAL_CRC_Accumulate>
 8000622:	64f8      	str	r0, [r7, #76]	; 0x4c

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	48a0      	ldr	r0, [pc, #640]	; (80008ac <main+0x2d4>)
 800062a:	f001 fb81 	bl	8001d30 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800062e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000632:	f000 fe59 	bl	80012e8 <HAL_Delay>
  manu = sprintf(buffer, "Hola SPI :\r\n");
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	499d      	ldr	r1, [pc, #628]	; (80008b0 <main+0x2d8>)
 800063c:	4618      	mov	r0, r3
 800063e:	f005 f9b7 	bl	80059b0 <siprintf>
 8000642:	4603      	mov	r3, r0
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  HAL_UART_Transmit(&huart3, (uint8_t *)buffer, manu, 100);
 800064a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800064e:	b29a      	uxth	r2, r3
 8000650:	f107 0108 	add.w	r1, r7, #8
 8000654:	2364      	movs	r3, #100	; 0x64
 8000656:	4897      	ldr	r0, [pc, #604]	; (80008b4 <main+0x2dc>)
 8000658:	f004 f9e4 	bl	8004a24 <HAL_UART_Transmit>


  for (uint8_t i=0; i<3; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000662:	e014      	b.n	800068e <main+0xb6>
  {
	  TData[i]=0xFF;
 8000664:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000668:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800066c:	4413      	add	r3, r2
 800066e:	22ff      	movs	r2, #255	; 0xff
 8000670:	f803 2c14 	strb.w	r2, [r3, #-20]
	  RData[i]=0xFF;
 8000674:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000678:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800067c:	4413      	add	r3, r2
 800067e:	22ff      	movs	r2, #255	; 0xff
 8000680:	f803 2c18 	strb.w	r2, [r3, #-24]
  for (uint8_t i=0; i<3; i++)
 8000684:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000688:	3301      	adds	r3, #1
 800068a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800068e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000692:	2b02      	cmp	r3, #2
 8000694:	d9e6      	bls.n	8000664 <main+0x8c>
  }


  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000696:	2180      	movs	r1, #128	; 0x80
 8000698:	4887      	ldr	r0, [pc, #540]	; (80008b8 <main+0x2e0>)
 800069a:	f001 fb62 	bl	8001d62 <HAL_GPIO_TogglePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	4882      	ldr	r0, [pc, #520]	; (80008ac <main+0x2d4>)
 80006a4:	f001 fb44 	bl	8001d30 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&status, 1, 100);
 80006a8:	f107 0149 	add.w	r1, r7, #73	; 0x49
 80006ac:	2364      	movs	r3, #100	; 0x64
 80006ae:	2201      	movs	r2, #1
 80006b0:	4882      	ldr	r0, [pc, #520]	; (80008bc <main+0x2e4>)
 80006b2:	f002 fe9c 	bl	80033ee <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, (uint8_t *)RData, 1, 100);
 80006b6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80006ba:	2364      	movs	r3, #100	; 0x64
 80006bc:	2201      	movs	r2, #1
 80006be:	487f      	ldr	r0, [pc, #508]	; (80008bc <main+0x2e4>)
 80006c0:	f003 f803 	bl	80036ca <HAL_SPI_Receive>
  HAL_SPI_Receive(&hspi1, (uint8_t *)TData, 1, 100);
 80006c4:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80006c8:	2364      	movs	r3, #100	; 0x64
 80006ca:	2201      	movs	r2, #1
 80006cc:	487b      	ldr	r0, [pc, #492]	; (80008bc <main+0x2e4>)
 80006ce:	f002 fffc 	bl	80036ca <HAL_SPI_Receive>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	4875      	ldr	r0, [pc, #468]	; (80008ac <main+0x2d4>)
 80006d8:	f001 fb2a 	bl	8001d30 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 80006dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e0:	f000 fe02 	bl	80012e8 <HAL_Delay>

  manu = sprintf(buffer, "Status: 0x%d\r\n",(unsigned int)RData[0]);
 80006e4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80006e8:	461a      	mov	r2, r3
 80006ea:	f107 0308 	add.w	r3, r7, #8
 80006ee:	4974      	ldr	r1, [pc, #464]	; (80008c0 <main+0x2e8>)
 80006f0:	4618      	mov	r0, r3
 80006f2:	f005 f95d 	bl	80059b0 <siprintf>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  HAL_UART_Transmit(&huart3, (uint8_t *)buffer, manu, 100);
 80006fe:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000702:	b29a      	uxth	r2, r3
 8000704:	f107 0108 	add.w	r1, r7, #8
 8000708:	2364      	movs	r3, #100	; 0x64
 800070a:	486a      	ldr	r0, [pc, #424]	; (80008b4 <main+0x2dc>)
 800070c:	f004 f98a 	bl	8004a24 <HAL_UART_Transmit>
  manu = sprintf(buffer, "Status: 0x%hu\r\n",(unsigned int)TData[0]);
 8000710:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000714:	461a      	mov	r2, r3
 8000716:	f107 0308 	add.w	r3, r7, #8
 800071a:	496a      	ldr	r1, [pc, #424]	; (80008c4 <main+0x2ec>)
 800071c:	4618      	mov	r0, r3
 800071e:	f005 f947 	bl	80059b0 <siprintf>
 8000722:	4603      	mov	r3, r0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  HAL_UART_Transmit(&huart3, (uint8_t *)buffer, manu, 100);
 800072a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800072e:	b29a      	uxth	r2, r3
 8000730:	f107 0108 	add.w	r1, r7, #8
 8000734:	2364      	movs	r3, #100	; 0x64
 8000736:	485f      	ldr	r0, [pc, #380]	; (80008b4 <main+0x2dc>)
 8000738:	f004 f974 	bl	8004a24 <HAL_UART_Transmit>
  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 800073c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000740:	485d      	ldr	r0, [pc, #372]	; (80008b8 <main+0x2e0>)
 8000742:	f001 fb0e 	bl	8001d62 <HAL_GPIO_TogglePin>
  HAL_StatusTypeDef res1, res2, res3;
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000746:	213c      	movs	r1, #60	; 0x3c
 8000748:	485f      	ldr	r0, [pc, #380]	; (80008c8 <main+0x2f0>)
 800074a:	f003 fdab 	bl	80042a4 <HAL_TIM_Encoder_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(250);
 800074e:	20fa      	movs	r0, #250	; 0xfa
 8000750:	f000 fdca 	bl	80012e8 <HAL_Delay>
	manu = 0x9F;
 8000754:	239f      	movs	r3, #159	; 0x9f
 8000756:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2180      	movs	r1, #128	; 0x80
 800075e:	4853      	ldr	r0, [pc, #332]	; (80008ac <main+0x2d4>)
 8000760:	f001 fae6 	bl	8001d30 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&manu, 1, 100);
 8000764:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000768:	2364      	movs	r3, #100	; 0x64
 800076a:	2201      	movs	r2, #1
 800076c:	4853      	ldr	r0, [pc, #332]	; (80008bc <main+0x2e4>)
 800076e:	f002 fe3e 	bl	80033ee <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)RData, 1, 100);
 8000772:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000776:	2364      	movs	r3, #100	; 0x64
 8000778:	2201      	movs	r2, #1
 800077a:	4850      	ldr	r0, [pc, #320]	; (80008bc <main+0x2e4>)
 800077c:	f002 ffa5 	bl	80036ca <HAL_SPI_Receive>
    HAL_SPI_Receive(&hspi1, (uint8_t *)TData, 1, 100);
 8000780:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000784:	2364      	movs	r3, #100	; 0x64
 8000786:	2201      	movs	r2, #1
 8000788:	484c      	ldr	r0, [pc, #304]	; (80008bc <main+0x2e4>)
 800078a:	f002 ff9e 	bl	80036ca <HAL_SPI_Receive>
    HAL_SPI_Receive(&hspi1, (uint8_t *)PData, 1, 100);
 800078e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000792:	2364      	movs	r3, #100	; 0x64
 8000794:	2201      	movs	r2, #1
 8000796:	4849      	ldr	r0, [pc, #292]	; (80008bc <main+0x2e4>)
 8000798:	f002 ff97 	bl	80036ca <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2180      	movs	r1, #128	; 0x80
 80007a0:	4842      	ldr	r0, [pc, #264]	; (80008ac <main+0x2d4>)
 80007a2:	f001 fac5 	bl	8001d30 <HAL_GPIO_WritePin>

    HAL_Delay(250);
 80007a6:	20fa      	movs	r0, #250	; 0xfa
 80007a8:	f000 fd9e 	bl	80012e8 <HAL_Delay>
    manu = sprintf(buffer, "Manufacturer 1  : 0x%d\t",RData[0]);
 80007ac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80007b0:	461a      	mov	r2, r3
 80007b2:	f107 0308 	add.w	r3, r7, #8
 80007b6:	4945      	ldr	r1, [pc, #276]	; (80008cc <main+0x2f4>)
 80007b8:	4618      	mov	r0, r3
 80007ba:	f005 f8f9 	bl	80059b0 <siprintf>
 80007be:	4603      	mov	r3, r0
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, manu, 100);
 80007c6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	f107 0108 	add.w	r1, r7, #8
 80007d0:	2364      	movs	r3, #100	; 0x64
 80007d2:	4838      	ldr	r0, [pc, #224]	; (80008b4 <main+0x2dc>)
 80007d4:	f004 f926 	bl	8004a24 <HAL_UART_Transmit>
    manu = sprintf(buffer, "Manufacturer 2  : 0x%hu\t",TData[0]);
 80007d8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80007dc:	461a      	mov	r2, r3
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	493b      	ldr	r1, [pc, #236]	; (80008d0 <main+0x2f8>)
 80007e4:	4618      	mov	r0, r3
 80007e6:	f005 f8e3 	bl	80059b0 <siprintf>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, manu, 100);
 80007f2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	f107 0108 	add.w	r1, r7, #8
 80007fc:	2364      	movs	r3, #100	; 0x64
 80007fe:	482d      	ldr	r0, [pc, #180]	; (80008b4 <main+0x2dc>)
 8000800:	f004 f910 	bl	8004a24 <HAL_UART_Transmit>
    manu = sprintf(buffer, "Manufacturer 3  : 0x%hu\t",PData[0]);
 8000804:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8000808:	461a      	mov	r2, r3
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	4931      	ldr	r1, [pc, #196]	; (80008d4 <main+0x2fc>)
 8000810:	4618      	mov	r0, r3
 8000812:	f005 f8cd 	bl	80059b0 <siprintf>
 8000816:	4603      	mov	r3, r0
 8000818:	b2db      	uxtb	r3, r3
 800081a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, manu, 100);
 800081e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000822:	b29a      	uxth	r2, r3
 8000824:	f107 0108 	add.w	r1, r7, #8
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	4822      	ldr	r0, [pc, #136]	; (80008b4 <main+0x2dc>)
 800082c:	f004 f8fa 	bl	8004a24 <HAL_UART_Transmit>

    manu = sprintf(buffer, "CRC CALC: 0x%x\t", result1);
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000836:	4928      	ldr	r1, [pc, #160]	; (80008d8 <main+0x300>)
 8000838:	4618      	mov	r0, r3
 800083a:	f005 f8b9 	bl	80059b0 <siprintf>
 800083e:	4603      	mov	r3, r0
 8000840:	b2db      	uxtb	r3, r3
 8000842:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, 20, 100);
 8000846:	f107 0108 	add.w	r1, r7, #8
 800084a:	2364      	movs	r3, #100	; 0x64
 800084c:	2214      	movs	r2, #20
 800084e:	4819      	ldr	r0, [pc, #100]	; (80008b4 <main+0x2dc>)
 8000850:	f004 f8e8 	bl	8004a24 <HAL_UART_Transmit>
    manu = sprintf(buffer, "CRC ACUM: 0x%x\t", result2);
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800085a:	4920      	ldr	r1, [pc, #128]	; (80008dc <main+0x304>)
 800085c:	4618      	mov	r0, r3
 800085e:	f005 f8a7 	bl	80059b0 <siprintf>
 8000862:	4603      	mov	r3, r0
 8000864:	b2db      	uxtb	r3, r3
 8000866:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, 22, 100);
 800086a:	f107 0108 	add.w	r1, r7, #8
 800086e:	2364      	movs	r3, #100	; 0x64
 8000870:	2216      	movs	r2, #22
 8000872:	4810      	ldr	r0, [pc, #64]	; (80008b4 <main+0x2dc>)
 8000874:	f004 f8d6 	bl	8004a24 <HAL_UART_Transmit>

    mover = __HAL_TIM_GET_COUNTER(&htim1);
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <main+0x2f0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    sprintf(buffer, "ENCODER : 0x%X\r\n", mover);
 8000882:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	4915      	ldr	r1, [pc, #84]	; (80008e0 <main+0x308>)
 800088c:	4618      	mov	r0, r3
 800088e:	f005 f88f 	bl	80059b0 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)buffer, 18, 100);
 8000892:	f107 0108 	add.w	r1, r7, #8
 8000896:	2364      	movs	r3, #100	; 0x64
 8000898:	2212      	movs	r2, #18
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <main+0x2dc>)
 800089c:	f004 f8c2 	bl	8004a24 <HAL_UART_Transmit>
	HAL_Delay(250);
 80008a0:	e755      	b.n	800074e <main+0x176>
 80008a2:	bf00      	nop
 80008a4:	55553333 	.word	0x55553333
 80008a8:	20000520 	.word	0x20000520
 80008ac:	40020c00 	.word	0x40020c00
 80008b0:	08006224 	.word	0x08006224
 80008b4:	20000098 	.word	0x20000098
 80008b8:	40020400 	.word	0x40020400
 80008bc:	20000590 	.word	0x20000590
 80008c0:	08006234 	.word	0x08006234
 80008c4:	08006244 	.word	0x08006244
 80008c8:	20000544 	.word	0x20000544
 80008cc:	08006254 	.word	0x08006254
 80008d0:	0800626c 	.word	0x0800626c
 80008d4:	08006288 	.word	0x08006288
 80008d8:	080062a4 	.word	0x080062a4
 80008dc:	080062b4 	.word	0x080062b4
 80008e0:	080062c4 	.word	0x080062c4

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	; 0x50
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2234      	movs	r2, #52	; 0x34
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f005 f854 	bl	80059a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000908:	f001 fb8e 	bl	8002028 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800090c:	4b2c      	ldr	r3, [pc, #176]	; (80009c0 <SystemClock_Config+0xdc>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	4a2b      	ldr	r2, [pc, #172]	; (80009c0 <SystemClock_Config+0xdc>)
 8000912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000916:	6413      	str	r3, [r2, #64]	; 0x40
 8000918:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <SystemClock_Config+0xdc>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000924:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <SystemClock_Config+0xe0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800092c:	4a25      	ldr	r2, [pc, #148]	; (80009c4 <SystemClock_Config+0xe0>)
 800092e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <SystemClock_Config+0xe0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000940:	2301      	movs	r3, #1
 8000942:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000944:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000948:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094a:	2302      	movs	r3, #2
 800094c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000952:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000954:	2304      	movs	r3, #4
 8000956:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000958:	2360      	movs	r3, #96	; 0x60
 800095a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095c:	2302      	movs	r3, #2
 800095e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000960:	2304      	movs	r3, #4
 8000962:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4618      	mov	r0, r3
 800096e:	f001 fbbb 	bl	80020e8 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000978:	f000 fa00 	bl	8000d7c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800097c:	f001 fb64 	bl	8002048 <HAL_PWREx_EnableOverDrive>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000986:	f000 f9f9 	bl	8000d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	230f      	movs	r3, #15
 800098c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098e:	2302      	movs	r3, #2
 8000990:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	2103      	movs	r1, #3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 fe4c 	bl	8002644 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80009b2:	f000 f9e3 	bl	8000d7c <Error_Handler>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3750      	adds	r7, #80	; 0x50
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <MX_CRC_Init+0x3c>)
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <MX_CRC_Init+0x40>)
 80009d0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_CRC_Init+0x3c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_CRC_Init+0x3c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_CRC_Init+0x3c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <MX_CRC_Init+0x3c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_CRC_Init+0x3c>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_CRC_Init+0x3c>)
 80009f2:	f000 fdaf 	bl	8001554 <HAL_CRC_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009fc:	f000 f9be 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000520 	.word	0x20000520
 8000a08:	40023000 	.word	0x40023000

08000a0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a12:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <MX_SPI1_Init+0x78>)
 8000a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a42:	2210      	movs	r2, #16
 8000a44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a66:	2208      	movs	r2, #8
 8000a68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_SPI1_Init+0x74>)
 8000a6c:	f002 fc14 	bl	8003298 <HAL_SPI_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a76:	f000 f981 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000590 	.word	0x20000590
 8000a84:	40013000 	.word	0x40013000

08000a88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	2224      	movs	r2, #36	; 0x24
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 ff82 	bl	80059a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa6:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <MX_TIM1_Init+0xac>)
 8000aa8:	4a23      	ldr	r2, [pc, #140]	; (8000b38 <MX_TIM1_Init+0xb0>)
 8000aaa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000aac:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_TIM1_Init+0xac>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_TIM1_Init+0xac>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_TIM1_Init+0xac>)
 8000aba:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000abe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_TIM1_Init+0xac>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_TIM1_Init+0xac>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_TIM1_Init+0xac>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ada:	2301      	movs	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000aea:	2301      	movs	r3, #1
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000af6:	f107 030c 	add.w	r3, r7, #12
 8000afa:	4619      	mov	r1, r3
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <MX_TIM1_Init+0xac>)
 8000afe:	f003 fb2b 	bl	8004158 <HAL_TIM_Encoder_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000b08:	f000 f938 	bl	8000d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_TIM1_Init+0xac>)
 8000b1e:	f003 fe87 	bl	8004830 <HAL_TIMEx_MasterConfigSynchronization>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b28:	f000 f928 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3730      	adds	r7, #48	; 0x30
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000544 	.word	0x20000544
 8000b38:	40010000 	.word	0x40010000

08000b3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <MX_USART3_UART_Init+0x5c>)
 8000b44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b62:	220c      	movs	r2, #12
 8000b64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_USART3_UART_Init+0x58>)
 8000b80:	f003 ff02 	bl	8004988 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b8a:	f000 f8f7 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000098 	.word	0x20000098
 8000b98:	40004800 	.word	0x40004800

08000b9c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ba2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ba6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000baa:	2206      	movs	r2, #6
 8000bac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be0:	f001 f8d9 	bl	8001d96 <HAL_PCD_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000bea:	f000 f8c7 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000011c 	.word	0x2000011c

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08c      	sub	sp, #48	; 0x30
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	4b56      	ldr	r3, [pc, #344]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a55      	ldr	r2, [pc, #340]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b53      	ldr	r3, [pc, #332]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	61bb      	str	r3, [r7, #24]
 8000c24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c26:	4b50      	ldr	r3, [pc, #320]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a4f      	ldr	r2, [pc, #316]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b4d      	ldr	r3, [pc, #308]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b4a      	ldr	r3, [pc, #296]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a49      	ldr	r2, [pc, #292]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b47      	ldr	r3, [pc, #284]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c56:	4b44      	ldr	r3, [pc, #272]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a43      	ldr	r2, [pc, #268]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b41      	ldr	r3, [pc, #260]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6e:	4b3e      	ldr	r3, [pc, #248]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a3d      	ldr	r2, [pc, #244]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c74:	f043 0310 	orr.w	r3, r3, #16
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	4b38      	ldr	r3, [pc, #224]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a37      	ldr	r2, [pc, #220]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b35      	ldr	r3, [pc, #212]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c9e:	4b32      	ldr	r3, [pc, #200]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a31      	ldr	r2, [pc, #196]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <MX_GPIO_Init+0x170>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cbc:	482b      	ldr	r0, [pc, #172]	; (8000d6c <MX_GPIO_Init+0x174>)
 8000cbe:	f001 f837 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2140      	movs	r1, #64	; 0x40
 8000cc6:	482a      	ldr	r0, [pc, #168]	; (8000d70 <MX_GPIO_Init+0x178>)
 8000cc8:	f001 f832 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2180      	movs	r1, #128	; 0x80
 8000cd0:	4828      	ldr	r0, [pc, #160]	; (8000d74 <MX_GPIO_Init+0x17c>)
 8000cd2:	f001 f82d 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cdc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	4822      	ldr	r0, [pc, #136]	; (8000d78 <MX_GPIO_Init+0x180>)
 8000cee:	f000 fe73 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cf2:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4818      	ldr	r0, [pc, #96]	; (8000d6c <MX_GPIO_Init+0x174>)
 8000d0c:	f000 fe64 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d10:	2340      	movs	r3, #64	; 0x40
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	4812      	ldr	r0, [pc, #72]	; (8000d70 <MX_GPIO_Init+0x178>)
 8000d28:	f000 fe56 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480c      	ldr	r0, [pc, #48]	; (8000d70 <MX_GPIO_Init+0x178>)
 8000d40:	f000 fe4a 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d54:	f107 031c 	add.w	r3, r7, #28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_GPIO_Init+0x17c>)
 8000d5c:	f000 fe3c 	bl	80019d8 <HAL_GPIO_Init>

}
 8000d60:	bf00      	nop
 8000d62:	3730      	adds	r7, #48	; 0x30
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020400 	.word	0x40020400
 8000d70:	40021800 	.word	0x40021800
 8000d74:	40020c00 	.word	0x40020c00
 8000d78:	40020800 	.word	0x40020800

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <Error_Handler+0x8>
	...

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_MspInit+0x44>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_MspInit+0x44>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_MspInit+0x44>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_MspInit+0x44>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <HAL_MspInit+0x44>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_MspInit+0x44>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800

08000dd0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_CRC_MspInit+0x38>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10b      	bne.n	8000dfa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_CRC_MspInit+0x3c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <HAL_CRC_MspInit+0x3c>)
 8000de8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <HAL_CRC_MspInit+0x3c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40023000 	.word	0x40023000
 8000e0c:	40023800 	.word	0x40023800

08000e10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <HAL_SPI_MspInit+0x7c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d127      	bne.n	8000e82 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_SPI_MspInit+0x80>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	4a16      	ldr	r2, [pc, #88]	; (8000e90 <HAL_SPI_MspInit+0x80>)
 8000e38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_SPI_MspInit+0x80>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_SPI_MspInit+0x80>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <HAL_SPI_MspInit+0x80>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_SPI_MspInit+0x80>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e62:	23e0      	movs	r3, #224	; 0xe0
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e72:	2305      	movs	r3, #5
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <HAL_SPI_MspInit+0x84>)
 8000e7e:	f000 fdab 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	; 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40013000 	.word	0x40013000
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020000 	.word	0x40020000

08000e98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d130      	bne.n	8000f1c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x90>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a1a      	ldr	r2, [pc, #104]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x90>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x90>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x90>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x90>)
 8000ed8:	f043 0310 	orr.w	r3, r3, #16
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_TIM_Encoder_MspInit+0x90>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0310 	and.w	r3, r3, #16
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000eea:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000efc:	2301      	movs	r3, #1
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	4809      	ldr	r0, [pc, #36]	; (8000f2c <HAL_TIM_Encoder_MspInit+0x94>)
 8000f08:	f000 fd66 	bl	80019d8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2019      	movs	r0, #25
 8000f12:	f000 fae8 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f16:	2019      	movs	r0, #25
 8000f18:	f000 fb01 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40010000 	.word	0x40010000
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0ae      	sub	sp, #184	; 0xb8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	2290      	movs	r2, #144	; 0x90
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 fd25 	bl	80059a0 <memset>
  if(huart->Instance==USART3)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <HAL_UART_MspInit+0xb4>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d13c      	bne.n	8000fda <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fd6a 	bl	8002a48 <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f7a:	f7ff feff 	bl	8000d7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <HAL_UART_MspInit+0xb8>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <HAL_UART_MspInit+0xb8>)
 8000f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_UART_MspInit+0xb8>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_UART_MspInit+0xb8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <HAL_UART_MspInit+0xb8>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_UART_MspInit+0xb8>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <HAL_UART_MspInit+0xbc>)
 8000fd6:	f000 fcff 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	37b8      	adds	r7, #184	; 0xb8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40004800 	.word	0x40004800
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020c00 	.word	0x40020c00

08000ff0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b0ae      	sub	sp, #184	; 0xb8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2290      	movs	r2, #144	; 0x90
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f004 fcc5 	bl	80059a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800101e:	d159      	bne.n	80010d4 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001020:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001024:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4618      	mov	r0, r3
 8001032:	f001 fd09 	bl	8002a48 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800103c:	f7ff fe9e 	bl	8000d7c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	4b26      	ldr	r3, [pc, #152]	; (80010dc <HAL_PCD_MspInit+0xec>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	4a25      	ldr	r2, [pc, #148]	; (80010dc <HAL_PCD_MspInit+0xec>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6313      	str	r3, [r2, #48]	; 0x30
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <HAL_PCD_MspInit+0xec>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001058:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800105c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001072:	230a      	movs	r3, #10
 8001074:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800107c:	4619      	mov	r1, r3
 800107e:	4818      	ldr	r0, [pc, #96]	; (80010e0 <HAL_PCD_MspInit+0xf0>)
 8001080:	f000 fcaa 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001088:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800109c:	4619      	mov	r1, r3
 800109e:	4810      	ldr	r0, [pc, #64]	; (80010e0 <HAL_PCD_MspInit+0xf0>)
 80010a0:	f000 fc9a 	bl	80019d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <HAL_PCD_MspInit+0xec>)
 80010a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a8:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <HAL_PCD_MspInit+0xec>)
 80010aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ae:	6353      	str	r3, [r2, #52]	; 0x34
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_PCD_MspInit+0xec>)
 80010b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4b07      	ldr	r3, [pc, #28]	; (80010dc <HAL_PCD_MspInit+0xec>)
 80010be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <HAL_PCD_MspInit+0xec>)
 80010c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c6:	6453      	str	r3, [r2, #68]	; 0x44
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <HAL_PCD_MspInit+0xec>)
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	37b8      	adds	r7, #184	; 0xb8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler+0x4>

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f000 f8ba 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800113e:	f003 f95f 	bl	8004400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000544 	.word	0x20000544

0800114c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <_sbrk+0x5c>)
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <_sbrk+0x60>)
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <_sbrk+0x64>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <_sbrk+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	429a      	cmp	r2, r3
 800117a:	d207      	bcs.n	800118c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800117c:	f004 fbe6 	bl	800594c <__errno>
 8001180:	4603      	mov	r3, r0
 8001182:	220c      	movs	r2, #12
 8001184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e009      	b.n	80011a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <_sbrk+0x64>)
 800119c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20080000 	.word	0x20080000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	2000008c 	.word	0x2000008c
 80011b4:	20000608 	.word	0x20000608

080011b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <SystemInit+0x20>)
 80011be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <SystemInit+0x20>)
 80011c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001214 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e0:	480d      	ldr	r0, [pc, #52]	; (8001218 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011e2:	490e      	ldr	r1, [pc, #56]	; (800121c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e4:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f8:	4c0b      	ldr	r4, [pc, #44]	; (8001228 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001206:	f7ff ffd7 	bl	80011b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800120a:	f004 fba5 	bl	8005958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120e:	f7ff f9e3 	bl	80005d8 <main>
  bx  lr    
 8001212:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001214:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001220:	08006334 	.word	0x08006334
  ldr r2, =_sbss
 8001224:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001228:	20000608 	.word	0x20000608

0800122c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC_IRQHandler>

0800122e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001232:	2003      	movs	r0, #3
 8001234:	f000 f94c 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001238:	2000      	movs	r0, #0
 800123a:	f000 f805 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800123e:	f7ff fda3 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x54>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x58>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f967 	bl	800153a <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 f92f 	bl	80014e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_InitTick+0x5c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000004 	.word	0x20000004

080012a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x20>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_IncTick+0x24>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000008 	.word	0x20000008
 80012cc:	200005f4 	.word	0x200005f4

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <HAL_GetTick+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	200005f4 	.word	0x200005f4

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff ffee 	bl	80012d0 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_Delay+0x44>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800130e:	bf00      	nop
 8001310:	f7ff ffde 	bl	80012d0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000008 	.word	0x20000008

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <__NVIC_SetPriorityGrouping+0x40>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 800135a:	4313      	orrs	r3, r2
 800135c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135e:	4a04      	ldr	r2, [pc, #16]	; (8001370 <__NVIC_SetPriorityGrouping+0x40>)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	60d3      	str	r3, [r2, #12]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00
 8001374:	05fa0000 	.word	0x05fa0000

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4907      	ldr	r1, [pc, #28]	; (80013cc <__NVIC_EnableIRQ+0x38>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	; (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001424:	b480      	push	{r7}
 8001426:	b089      	sub	sp, #36	; 0x24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0307 	and.w	r3, r3, #7
 8001436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f1c3 0307 	rsb	r3, r3, #7
 800143e:	2b04      	cmp	r3, #4
 8001440:	bf28      	it	cs
 8001442:	2304      	movcs	r3, #4
 8001444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3304      	adds	r3, #4
 800144a:	2b06      	cmp	r3, #6
 800144c:	d902      	bls.n	8001454 <NVIC_EncodePriority+0x30>
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3b03      	subs	r3, #3
 8001452:	e000      	b.n	8001456 <NVIC_EncodePriority+0x32>
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	401a      	ands	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	43d9      	mvns	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	4313      	orrs	r3, r2
         );
}
 800147e:	4618      	mov	r0, r3
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800149c:	d301      	bcc.n	80014a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149e:	2301      	movs	r3, #1
 80014a0:	e00f      	b.n	80014c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <SysTick_Config+0x40>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014aa:	210f      	movs	r1, #15
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f7ff ff8e 	bl	80013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <SysTick_Config+0x40>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SysTick_Config+0x40>)
 80014bc:	2207      	movs	r2, #7
 80014be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff29 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f8:	f7ff ff3e 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ff8e 	bl	8001424 <NVIC_EncodePriority>
 8001508:	4602      	mov	r2, r0
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff5d 	bl	80013d0 <__NVIC_SetPriority>
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff31 	bl	8001394 <__NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ffa2 	bl	800148c <SysTick_Config>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e054      	b.n	8001610 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7f5b      	ldrb	r3, [r3, #29]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d105      	bne.n	800157c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff fc2a 	bl	8000dd0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2202      	movs	r2, #2
 8001580:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	791b      	ldrb	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10c      	bne.n	80015a4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a22      	ldr	r2, [pc, #136]	; (8001618 <HAL_CRC_Init+0xc4>)
 8001590:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0218 	bic.w	r2, r2, #24
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	e00c      	b.n	80015be <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6899      	ldr	r1, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	461a      	mov	r2, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f98c 	bl	80018cc <HAL_CRCEx_Polynomial_Set>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e028      	b.n	8001610 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	795b      	ldrb	r3, [r3, #5]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d105      	bne.n	80015d2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f04f 32ff 	mov.w	r2, #4294967295
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	e004      	b.n	80015dc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6912      	ldr	r2, [r2, #16]
 80015da:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695a      	ldr	r2, [r3, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699a      	ldr	r2, [r3, #24]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	04c11db7 	.word	0x04c11db7

0800161c <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2202      	movs	r2, #2
 8001630:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d006      	beq.n	8001648 <HAL_CRC_Accumulate+0x2c>
 800163a:	2b03      	cmp	r3, #3
 800163c:	d829      	bhi.n	8001692 <HAL_CRC_Accumulate+0x76>
 800163e:	2b01      	cmp	r3, #1
 8001640:	d019      	beq.n	8001676 <HAL_CRC_Accumulate+0x5a>
 8001642:	2b02      	cmp	r3, #2
 8001644:	d01e      	beq.n	8001684 <HAL_CRC_Accumulate+0x68>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 8001646:	e024      	b.n	8001692 <HAL_CRC_Accumulate+0x76>
      for (index = 0U; index < BufferLength; index++)
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e00a      	b.n	8001664 <HAL_CRC_Accumulate+0x48>
        hcrc->Instance->DR = pBuffer[index];
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	441a      	add	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	d3f0      	bcc.n	800164e <HAL_CRC_Accumulate+0x32>
      temp = hcrc->Instance->DR;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	613b      	str	r3, [r7, #16]
      break;
 8001674:	e00e      	b.n	8001694 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f000 f85e 	bl	800173c <CRC_Handle_8>
 8001680:	6138      	str	r0, [r7, #16]
      break;
 8001682:	e007      	b.n	8001694 <HAL_CRC_Accumulate+0x78>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	68f8      	ldr	r0, [r7, #12]
 800168a:	f000 f8e5 	bl	8001858 <CRC_Handle_16>
 800168e:	6138      	str	r0, [r7, #16]
      break;
 8001690:	e000      	b.n	8001694 <HAL_CRC_Accumulate+0x78>
      break;
 8001692:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2201      	movs	r2, #1
 8001698:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800169a:	693b      	ldr	r3, [r7, #16]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2202      	movs	r2, #2
 80016b8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f042 0201 	orr.w	r2, r2, #1
 80016c8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d006      	beq.n	80016e0 <HAL_CRC_Calculate+0x3c>
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d829      	bhi.n	800172a <HAL_CRC_Calculate+0x86>
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d019      	beq.n	800170e <HAL_CRC_Calculate+0x6a>
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d01e      	beq.n	800171c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80016de:	e024      	b.n	800172a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e00a      	b.n	80016fc <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	441a      	add	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	d3f0      	bcc.n	80016e6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	613b      	str	r3, [r7, #16]
      break;
 800170c:	e00e      	b.n	800172c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f000 f812 	bl	800173c <CRC_Handle_8>
 8001718:	6138      	str	r0, [r7, #16]
      break;
 800171a:	e007      	b.n	800172c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	68b9      	ldr	r1, [r7, #8]
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 f899 	bl	8001858 <CRC_Handle_16>
 8001726:	6138      	str	r0, [r7, #16]
      break;
 8001728:	e000      	b.n	800172c <HAL_CRC_Calculate+0x88>
      break;
 800172a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001732:	693b      	ldr	r3, [r7, #16]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
 800174c:	e023      	b.n	8001796 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	3301      	adds	r3, #1
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	440b      	add	r3, r1
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001768:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	3302      	adds	r3, #2
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	440b      	add	r3, r1
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001778:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	3303      	adds	r3, #3
 8001780:	68b9      	ldr	r1, [r7, #8]
 8001782:	440b      	add	r3, r1
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800178c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800178e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	3301      	adds	r3, #1
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	429a      	cmp	r2, r3
 800179e:	d3d6      	bcc.n	800174e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d04d      	beq.n	8001846 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d107      	bne.n	80017c4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	4413      	add	r3, r2
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d116      	bne.n	80017fc <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	4413      	add	r3, r2
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b21a      	sxth	r2, r3
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	3301      	adds	r3, #1
 80017e2:	68b9      	ldr	r1, [r7, #8]
 80017e4:	440b      	add	r3, r1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	8b7a      	ldrh	r2, [r7, #26]
 80017fa:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b03      	cmp	r3, #3
 8001804:	d11f      	bne.n	8001846 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	4413      	add	r3, r2
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	b21a      	sxth	r2, r3
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	3301      	adds	r3, #1
 800181a:	68b9      	ldr	r1, [r7, #8]
 800181c:	440b      	add	r3, r1
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b21b      	sxth	r3, r3
 8001822:	4313      	orrs	r3, r2
 8001824:	b21b      	sxth	r3, r3
 8001826:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	8b7a      	ldrh	r2, [r7, #26]
 8001832:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	3302      	adds	r3, #2
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	4413      	add	r3, r2
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3724      	adds	r7, #36	; 0x24
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	e013      	b.n	8001892 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	4413      	add	r3, r2
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	440b      	add	r3, r1
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	4619      	mov	r1, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	3301      	adds	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	085b      	lsrs	r3, r3, #1
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	d3e6      	bcc.n	800186a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	4413      	add	r3, r2
 80018b4:	881a      	ldrh	r2, [r3, #0]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	371c      	adds	r7, #28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b087      	sub	sp, #28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80018dc:	231f      	movs	r3, #31
 80018de:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80018e0:	bf00      	nop
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1e5a      	subs	r2, r3, #1
 80018e6:	613a      	str	r2, [r7, #16]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d009      	beq.n	8001900 <HAL_CRCEx_Polynomial_Set+0x34>
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f003 031f 	and.w	r3, r3, #31
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	fa22 f303 	lsr.w	r3, r2, r3
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_CRCEx_Polynomial_Set+0x16>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b18      	cmp	r3, #24
 8001904:	d846      	bhi.n	8001994 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001906:	a201      	add	r2, pc, #4	; (adr r2, 800190c <HAL_CRCEx_Polynomial_Set+0x40>)
 8001908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190c:	0800199b 	.word	0x0800199b
 8001910:	08001995 	.word	0x08001995
 8001914:	08001995 	.word	0x08001995
 8001918:	08001995 	.word	0x08001995
 800191c:	08001995 	.word	0x08001995
 8001920:	08001995 	.word	0x08001995
 8001924:	08001995 	.word	0x08001995
 8001928:	08001995 	.word	0x08001995
 800192c:	08001989 	.word	0x08001989
 8001930:	08001995 	.word	0x08001995
 8001934:	08001995 	.word	0x08001995
 8001938:	08001995 	.word	0x08001995
 800193c:	08001995 	.word	0x08001995
 8001940:	08001995 	.word	0x08001995
 8001944:	08001995 	.word	0x08001995
 8001948:	08001995 	.word	0x08001995
 800194c:	0800197d 	.word	0x0800197d
 8001950:	08001995 	.word	0x08001995
 8001954:	08001995 	.word	0x08001995
 8001958:	08001995 	.word	0x08001995
 800195c:	08001995 	.word	0x08001995
 8001960:	08001995 	.word	0x08001995
 8001964:	08001995 	.word	0x08001995
 8001968:	08001995 	.word	0x08001995
 800196c:	08001971 	.word	0x08001971
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	2b06      	cmp	r3, #6
 8001974:	d913      	bls.n	800199e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800197a:	e010      	b.n	800199e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	2b07      	cmp	r3, #7
 8001980:	d90f      	bls.n	80019a2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001986:	e00c      	b.n	80019a2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	2b0f      	cmp	r3, #15
 800198c:	d90b      	bls.n	80019a6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001992:	e008      	b.n	80019a6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	75fb      	strb	r3, [r7, #23]
      break;
 8001998:	e006      	b.n	80019a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800199a:	bf00      	nop
 800199c:	e004      	b.n	80019a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800199e:	bf00      	nop
 80019a0:	e002      	b.n	80019a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019a2:	bf00      	nop
 80019a4:	e000      	b.n	80019a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80019a6:	bf00      	nop
  }
  if (status == HAL_OK)
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10d      	bne.n	80019ca <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f023 0118 	bic.w	r1, r3, #24
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	371c      	adds	r7, #28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e175      	b.n	8001ce4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f040 8164 	bne.w	8001cde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d005      	beq.n	8001a2e <HAL_GPIO_Init+0x56>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d130      	bne.n	8001a90 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a64:	2201      	movs	r2, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 0201 	and.w	r2, r3, #1
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d017      	beq.n	8001acc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d123      	bne.n	8001b20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	08da      	lsrs	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3208      	adds	r2, #8
 8001ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	220f      	movs	r2, #15
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	69b9      	ldr	r1, [r7, #24]
 8001b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0203 	and.w	r2, r3, #3
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80be 	beq.w	8001cde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	4b66      	ldr	r3, [pc, #408]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a65      	ldr	r2, [pc, #404]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b63      	ldr	r3, [pc, #396]	; (8001cfc <HAL_GPIO_Init+0x324>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b7a:	4a61      	ldr	r2, [pc, #388]	; (8001d00 <HAL_GPIO_Init+0x328>)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a58      	ldr	r2, [pc, #352]	; (8001d04 <HAL_GPIO_Init+0x32c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d037      	beq.n	8001c16 <HAL_GPIO_Init+0x23e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a57      	ldr	r2, [pc, #348]	; (8001d08 <HAL_GPIO_Init+0x330>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d031      	beq.n	8001c12 <HAL_GPIO_Init+0x23a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a56      	ldr	r2, [pc, #344]	; (8001d0c <HAL_GPIO_Init+0x334>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d02b      	beq.n	8001c0e <HAL_GPIO_Init+0x236>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a55      	ldr	r2, [pc, #340]	; (8001d10 <HAL_GPIO_Init+0x338>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d025      	beq.n	8001c0a <HAL_GPIO_Init+0x232>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a54      	ldr	r2, [pc, #336]	; (8001d14 <HAL_GPIO_Init+0x33c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d01f      	beq.n	8001c06 <HAL_GPIO_Init+0x22e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a53      	ldr	r2, [pc, #332]	; (8001d18 <HAL_GPIO_Init+0x340>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d019      	beq.n	8001c02 <HAL_GPIO_Init+0x22a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a52      	ldr	r2, [pc, #328]	; (8001d1c <HAL_GPIO_Init+0x344>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0x226>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a51      	ldr	r2, [pc, #324]	; (8001d20 <HAL_GPIO_Init+0x348>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00d      	beq.n	8001bfa <HAL_GPIO_Init+0x222>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a50      	ldr	r2, [pc, #320]	; (8001d24 <HAL_GPIO_Init+0x34c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x21e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4f      	ldr	r2, [pc, #316]	; (8001d28 <HAL_GPIO_Init+0x350>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_GPIO_Init+0x21a>
 8001bee:	2309      	movs	r3, #9
 8001bf0:	e012      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001bf2:	230a      	movs	r3, #10
 8001bf4:	e010      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	e00e      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	e00c      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001bfe:	2306      	movs	r3, #6
 8001c00:	e00a      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c02:	2305      	movs	r3, #5
 8001c04:	e008      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c06:	2304      	movs	r3, #4
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e004      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e002      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c16:	2300      	movs	r3, #0
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	f002 0203 	and.w	r2, r2, #3
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	4093      	lsls	r3, r2
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c28:	4935      	ldr	r1, [pc, #212]	; (8001d00 <HAL_GPIO_Init+0x328>)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	089b      	lsrs	r3, r3, #2
 8001c2e:	3302      	adds	r3, #2
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c36:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c5a:	4a34      	ldr	r2, [pc, #208]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c60:	4b32      	ldr	r3, [pc, #200]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c84:	4a29      	ldr	r2, [pc, #164]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c8a:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cae:	4a1f      	ldr	r2, [pc, #124]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <HAL_GPIO_Init+0x354>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	2b0f      	cmp	r3, #15
 8001ce8:	f67f ae86 	bls.w	80019f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3724      	adds	r7, #36	; 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40013800 	.word	0x40013800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	40020800 	.word	0x40020800
 8001d10:	40020c00 	.word	0x40020c00
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40021400 	.word	0x40021400
 8001d1c:	40021800 	.word	0x40021800
 8001d20:	40021c00 	.word	0x40021c00
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40022400 	.word	0x40022400
 8001d2c:	40013c00 	.word	0x40013c00

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d4c:	e003      	b.n	8001d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	619a      	str	r2, [r3, #24]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b085      	sub	sp, #20
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d74:	887a      	ldrh	r2, [r7, #2]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	041a      	lsls	r2, r3, #16
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	887b      	ldrh	r3, [r7, #2]
 8001d82:	400b      	ands	r3, r1
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	619a      	str	r2, [r3, #24]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d98:	b08f      	sub	sp, #60	; 0x3c
 8001d9a:	af0a      	add	r7, sp, #40	; 0x28
 8001d9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e116      	b.n	8001fd6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff f914 	bl	8000ff0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2203      	movs	r2, #3
 8001dcc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d102      	bne.n	8001de2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f003 fb1a 	bl	8005420 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	687e      	ldr	r6, [r7, #4]
 8001df4:	466d      	mov	r5, sp
 8001df6:	f106 0410 	add.w	r4, r6, #16
 8001dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e06:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e0a:	1d33      	adds	r3, r6, #4
 8001e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0e:	6838      	ldr	r0, [r7, #0]
 8001e10:	f003 faae 	bl	8005370 <USB_CoreInit>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0d7      	b.n	8001fd6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f003 fb08 	bl	8005442 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e04a      	b.n	8001ece <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	333d      	adds	r3, #61	; 0x3d
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	1a9b      	subs	r3, r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	333c      	adds	r3, #60	; 0x3c
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	b298      	uxth	r0, r3
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	3342      	adds	r3, #66	; 0x42
 8001e74:	4602      	mov	r2, r0
 8001e76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	333f      	adds	r3, #63	; 0x3f
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	3344      	adds	r3, #68	; 0x44
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	1a9b      	subs	r3, r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	3348      	adds	r3, #72	; 0x48
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	1a9b      	subs	r3, r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3350      	adds	r3, #80	; 0x50
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]
 8001ece:	7bfa      	ldrb	r2, [r7, #15]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d3af      	bcc.n	8001e38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73fb      	strb	r3, [r7, #15]
 8001edc:	e044      	b.n	8001f68 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	1a9b      	subs	r3, r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f0a:	7bfa      	ldrb	r2, [r7, #15]
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	1a9b      	subs	r3, r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	1a9b      	subs	r3, r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f36:	7bfa      	ldrb	r2, [r7, #15]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	3301      	adds	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d3b5      	bcc.n	8001ede <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	687e      	ldr	r6, [r7, #4]
 8001f7a:	466d      	mov	r5, sp
 8001f7c:	f106 0410 	add.w	r4, r6, #16
 8001f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f90:	1d33      	adds	r3, r6, #4
 8001f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f94:	6838      	ldr	r0, [r7, #0]
 8001f96:	f003 faa1 	bl	80054dc <USB_DevInit>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e014      	b.n	8001fd6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d102      	bne.n	8001fca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f80b 	bl	8001fe0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f003 fc5b 	bl	800588a <USB_DevDisconnect>

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001fe0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_PCDEx_ActivateLPM+0x44>)
 8002010:	4313      	orrs	r3, r2
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	10000003 	.word	0x10000003

08002028 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a04      	ldr	r2, [pc, #16]	; (8002044 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002036:	6013      	str	r3, [r2, #0]
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40007000 	.word	0x40007000

08002048 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a22      	ldr	r2, [pc, #136]	; (80020e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002076:	f7ff f92b 	bl	80012d0 <HAL_GetTick>
 800207a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800207c:	e009      	b.n	8002092 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800207e:	f7ff f927 	bl	80012d0 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800208c:	d901      	bls.n	8002092 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e022      	b.n	80020d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209e:	d1ee      	bne.n	800207e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ac:	f7ff f910 	bl	80012d0 <HAL_GetTick>
 80020b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020b2:	e009      	b.n	80020c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80020b4:	f7ff f90c 	bl	80012d0 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020c2:	d901      	bls.n	80020c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e007      	b.n	80020d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020d4:	d1ee      	bne.n	80020b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40007000 	.word	0x40007000

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80020f0:	2300      	movs	r3, #0
 80020f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e29b      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8087 	beq.w	800221a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800210c:	4b96      	ldr	r3, [pc, #600]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b04      	cmp	r3, #4
 8002116:	d00c      	beq.n	8002132 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002118:	4b93      	ldr	r3, [pc, #588]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b08      	cmp	r3, #8
 8002122:	d112      	bne.n	800214a <HAL_RCC_OscConfig+0x62>
 8002124:	4b90      	ldr	r3, [pc, #576]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002130:	d10b      	bne.n	800214a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002132:	4b8d      	ldr	r3, [pc, #564]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d06c      	beq.n	8002218 <HAL_RCC_OscConfig+0x130>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d168      	bne.n	8002218 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e275      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x7a>
 8002154:	4b84      	ldr	r3, [pc, #528]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a83      	ldr	r2, [pc, #524]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800215a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e02e      	b.n	80021c0 <HAL_RCC_OscConfig+0xd8>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x9c>
 800216a:	4b7f      	ldr	r3, [pc, #508]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7e      	ldr	r2, [pc, #504]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b7c      	ldr	r3, [pc, #496]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a7b      	ldr	r2, [pc, #492]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800217c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e01d      	b.n	80021c0 <HAL_RCC_OscConfig+0xd8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0xc0>
 800218e:	4b76      	ldr	r3, [pc, #472]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a75      	ldr	r2, [pc, #468]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b73      	ldr	r3, [pc, #460]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a72      	ldr	r2, [pc, #456]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0xd8>
 80021a8:	4b6f      	ldr	r3, [pc, #444]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a6e      	ldr	r2, [pc, #440]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80021ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b6c      	ldr	r3, [pc, #432]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a6b      	ldr	r2, [pc, #428]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80021ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7ff f882 	bl	80012d0 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7ff f87e 	bl	80012d0 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e229      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b61      	ldr	r3, [pc, #388]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0xe8>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7ff f86e 	bl	80012d0 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff f86a 	bl	80012d0 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e215      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	4b57      	ldr	r3, [pc, #348]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x110>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d069      	beq.n	80022fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002226:	4b50      	ldr	r3, [pc, #320]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002232:	4b4d      	ldr	r3, [pc, #308]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b08      	cmp	r3, #8
 800223c:	d11c      	bne.n	8002278 <HAL_RCC_OscConfig+0x190>
 800223e:	4b4a      	ldr	r3, [pc, #296]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d116      	bne.n	8002278 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	4b47      	ldr	r3, [pc, #284]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x17a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e1e9      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002262:	4b41      	ldr	r3, [pc, #260]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	493d      	ldr	r1, [pc, #244]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	e040      	b.n	80022fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d023      	beq.n	80022c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a38      	ldr	r2, [pc, #224]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7ff f820 	bl	80012d0 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7ff f81c 	bl	80012d0 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e1c7      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a6:	4b30      	ldr	r3, [pc, #192]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4929      	ldr	r1, [pc, #164]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
 80022c6:	e018      	b.n	80022fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a26      	ldr	r2, [pc, #152]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7fe fffc 	bl	80012d0 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022dc:	f7fe fff8 	bl	80012d0 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1a3      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d038      	beq.n	8002378 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d019      	beq.n	8002342 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002312:	4a15      	ldr	r2, [pc, #84]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7fe ffd9 	bl	80012d0 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002322:	f7fe ffd5 	bl	80012d0 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e180      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x23a>
 8002340:	e01a      	b.n	8002378 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002346:	4a08      	ldr	r2, [pc, #32]	; (8002368 <HAL_RCC_OscConfig+0x280>)
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe ffbf 	bl	80012d0 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002354:	e00a      	b.n	800236c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002356:	f7fe ffbb 	bl	80012d0 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d903      	bls.n	800236c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e166      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
 8002368:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	4b92      	ldr	r3, [pc, #584]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800236e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ee      	bne.n	8002356 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80a4 	beq.w	80024ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002386:	4b8c      	ldr	r3, [pc, #560]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10d      	bne.n	80023ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	4b89      	ldr	r3, [pc, #548]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a88      	ldr	r2, [pc, #544]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b86      	ldr	r3, [pc, #536]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023aa:	2301      	movs	r3, #1
 80023ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ae:	4b83      	ldr	r3, [pc, #524]	; (80025bc <HAL_RCC_OscConfig+0x4d4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d118      	bne.n	80023ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023ba:	4b80      	ldr	r3, [pc, #512]	; (80025bc <HAL_RCC_OscConfig+0x4d4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7f      	ldr	r2, [pc, #508]	; (80025bc <HAL_RCC_OscConfig+0x4d4>)
 80023c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c6:	f7fe ff83 	bl	80012d0 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ce:	f7fe ff7f 	bl	80012d0 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b64      	cmp	r3, #100	; 0x64
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e12a      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023e0:	4b76      	ldr	r3, [pc, #472]	; (80025bc <HAL_RCC_OscConfig+0x4d4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x31a>
 80023f4:	4b70      	ldr	r3, [pc, #448]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	4a6f      	ldr	r2, [pc, #444]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002400:	e02d      	b.n	800245e <HAL_RCC_OscConfig+0x376>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x33c>
 800240a:	4b6b      	ldr	r3, [pc, #428]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240e:	4a6a      	ldr	r2, [pc, #424]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	6713      	str	r3, [r2, #112]	; 0x70
 8002416:	4b68      	ldr	r3, [pc, #416]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241a:	4a67      	ldr	r2, [pc, #412]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	6713      	str	r3, [r2, #112]	; 0x70
 8002422:	e01c      	b.n	800245e <HAL_RCC_OscConfig+0x376>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b05      	cmp	r3, #5
 800242a:	d10c      	bne.n	8002446 <HAL_RCC_OscConfig+0x35e>
 800242c:	4b62      	ldr	r3, [pc, #392]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	4a61      	ldr	r2, [pc, #388]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	6713      	str	r3, [r2, #112]	; 0x70
 8002438:	4b5f      	ldr	r3, [pc, #380]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	4a5e      	ldr	r2, [pc, #376]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6713      	str	r3, [r2, #112]	; 0x70
 8002444:	e00b      	b.n	800245e <HAL_RCC_OscConfig+0x376>
 8002446:	4b5c      	ldr	r3, [pc, #368]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	4a5b      	ldr	r2, [pc, #364]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6713      	str	r3, [r2, #112]	; 0x70
 8002452:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002456:	4a58      	ldr	r2, [pc, #352]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d015      	beq.n	8002492 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7fe ff33 	bl	80012d0 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246c:	e00a      	b.n	8002484 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7fe ff2f 	bl	80012d0 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	; 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e0d8      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002484:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0ee      	beq.n	800246e <HAL_RCC_OscConfig+0x386>
 8002490:	e014      	b.n	80024bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7fe ff1d 	bl	80012d0 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe ff19 	bl	80012d0 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0c2      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b0:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1ee      	bne.n	800249a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024bc:	7dfb      	ldrb	r3, [r7, #23]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d105      	bne.n	80024ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c2:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a3c      	ldr	r2, [pc, #240]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80024c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80ae 	beq.w	8002634 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d8:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d06d      	beq.n	80025c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d14b      	bne.n	8002584 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ec:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a31      	ldr	r2, [pc, #196]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80024f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe feea 	bl	80012d0 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002500:	f7fe fee6 	bl	80012d0 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e091      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002512:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69da      	ldr	r2, [r3, #28]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	019b      	lsls	r3, r3, #6
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	085b      	lsrs	r3, r3, #1
 8002536:	3b01      	subs	r3, #1
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	071b      	lsls	r3, r3, #28
 800254a:	491b      	ldr	r1, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002550:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800255a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe feb8 	bl	80012d0 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe feb4 	bl	80012d0 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e05f      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d0f0      	beq.n	8002564 <HAL_RCC_OscConfig+0x47c>
 8002582:	e057      	b.n	8002634 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 800258a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800258e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe fe9e 	bl	80012d0 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002598:	f7fe fe9a 	bl	80012d0 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e045      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_RCC_OscConfig+0x4d0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x4b0>
 80025b6:	e03d      	b.n	8002634 <HAL_RCC_OscConfig+0x54c>
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025c0:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <HAL_RCC_OscConfig+0x558>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d030      	beq.n	8002630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d129      	bne.n	8002630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d122      	bne.n	8002630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025f0:	4013      	ands	r3, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d119      	bne.n	8002630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002606:	085b      	lsrs	r3, r3, #1
 8002608:	3b01      	subs	r3, #1
 800260a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d10f      	bne.n	8002630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d107      	bne.n	8002630 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800

08002644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0d0      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800265c:	4b6a      	ldr	r3, [pc, #424]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 030f 	and.w	r3, r3, #15
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d910      	bls.n	800268c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b67      	ldr	r3, [pc, #412]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 020f 	bic.w	r2, r3, #15
 8002672:	4965      	ldr	r1, [pc, #404]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	4313      	orrs	r3, r2
 8002678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b63      	ldr	r3, [pc, #396]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0b8      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80026aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026bc:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80026c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	494d      	ldr	r1, [pc, #308]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d040      	beq.n	8002768 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d115      	bne.n	8002726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e07f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002706:	4b41      	ldr	r3, [pc, #260]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d109      	bne.n	8002726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e073      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002716:	4b3d      	ldr	r3, [pc, #244]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e06b      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002726:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f023 0203 	bic.w	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4936      	ldr	r1, [pc, #216]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 8002734:	4313      	orrs	r3, r2
 8002736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002738:	f7fe fdca 	bl	80012d0 <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	e00a      	b.n	8002756 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002740:	f7fe fdc6 	bl	80012d0 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	; 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e053      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 020c 	and.w	r2, r3, #12
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	429a      	cmp	r2, r3
 8002766:	d1eb      	bne.n	8002740 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002768:	4b27      	ldr	r3, [pc, #156]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d210      	bcs.n	8002798 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f023 020f 	bic.w	r2, r3, #15
 800277e:	4922      	ldr	r1, [pc, #136]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e032      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4916      	ldr	r1, [pc, #88]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	490e      	ldr	r1, [pc, #56]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027d6:	f000 f821 	bl	800281c <HAL_RCC_GetSysClockFreq>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_ClockConfig+0x1c8>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	490a      	ldr	r1, [pc, #40]	; (8002810 <HAL_RCC_ClockConfig+0x1cc>)
 80027e8:	5ccb      	ldrb	r3, [r1, r3]
 80027ea:	fa22 f303 	lsr.w	r3, r2, r3
 80027ee:	4a09      	ldr	r2, [pc, #36]	; (8002814 <HAL_RCC_ClockConfig+0x1d0>)
 80027f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1d4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fd26 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00
 800280c:	40023800 	.word	0x40023800
 8002810:	080062d8 	.word	0x080062d8
 8002814:	20000000 	.word	0x20000000
 8002818:	20000004 	.word	0x20000004

0800281c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800281c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	2300      	movs	r3, #0
 800282e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002834:	4b67      	ldr	r3, [pc, #412]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b08      	cmp	r3, #8
 800283e:	d00d      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x40>
 8002840:	2b08      	cmp	r3, #8
 8002842:	f200 80bd 	bhi.w	80029c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d002      	beq.n	8002850 <HAL_RCC_GetSysClockFreq+0x34>
 800284a:	2b04      	cmp	r3, #4
 800284c:	d003      	beq.n	8002856 <HAL_RCC_GetSysClockFreq+0x3a>
 800284e:	e0b7      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b61      	ldr	r3, [pc, #388]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002852:	60bb      	str	r3, [r7, #8]
      break;
 8002854:	e0b7      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002856:	4b61      	ldr	r3, [pc, #388]	; (80029dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002858:	60bb      	str	r3, [r7, #8]
      break;
 800285a:	e0b4      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800285c:	4b5d      	ldr	r3, [pc, #372]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002864:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002866:	4b5b      	ldr	r3, [pc, #364]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d04d      	beq.n	800290e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002872:	4b58      	ldr	r3, [pc, #352]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	099b      	lsrs	r3, r3, #6
 8002878:	461a      	mov	r2, r3
 800287a:	f04f 0300 	mov.w	r3, #0
 800287e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002882:	f04f 0100 	mov.w	r1, #0
 8002886:	ea02 0800 	and.w	r8, r2, r0
 800288a:	ea03 0901 	and.w	r9, r3, r1
 800288e:	4640      	mov	r0, r8
 8002890:	4649      	mov	r1, r9
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	014b      	lsls	r3, r1, #5
 800289c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028a0:	0142      	lsls	r2, r0, #5
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	ebb0 0008 	subs.w	r0, r0, r8
 80028aa:	eb61 0109 	sbc.w	r1, r1, r9
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	018b      	lsls	r3, r1, #6
 80028b8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028bc:	0182      	lsls	r2, r0, #6
 80028be:	1a12      	subs	r2, r2, r0
 80028c0:	eb63 0301 	sbc.w	r3, r3, r1
 80028c4:	f04f 0000 	mov.w	r0, #0
 80028c8:	f04f 0100 	mov.w	r1, #0
 80028cc:	00d9      	lsls	r1, r3, #3
 80028ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028d2:	00d0      	lsls	r0, r2, #3
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	eb12 0208 	adds.w	r2, r2, r8
 80028dc:	eb43 0309 	adc.w	r3, r3, r9
 80028e0:	f04f 0000 	mov.w	r0, #0
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	0259      	lsls	r1, r3, #9
 80028ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80028ee:	0250      	lsls	r0, r2, #9
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	f7fd fcee 	bl	80002e0 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4613      	mov	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e04a      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290e:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	099b      	lsrs	r3, r3, #6
 8002914:	461a      	mov	r2, r3
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800291e:	f04f 0100 	mov.w	r1, #0
 8002922:	ea02 0400 	and.w	r4, r2, r0
 8002926:	ea03 0501 	and.w	r5, r3, r1
 800292a:	4620      	mov	r0, r4
 800292c:	4629      	mov	r1, r5
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	014b      	lsls	r3, r1, #5
 8002938:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800293c:	0142      	lsls	r2, r0, #5
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	1b00      	subs	r0, r0, r4
 8002944:	eb61 0105 	sbc.w	r1, r1, r5
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	018b      	lsls	r3, r1, #6
 8002952:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002956:	0182      	lsls	r2, r0, #6
 8002958:	1a12      	subs	r2, r2, r0
 800295a:	eb63 0301 	sbc.w	r3, r3, r1
 800295e:	f04f 0000 	mov.w	r0, #0
 8002962:	f04f 0100 	mov.w	r1, #0
 8002966:	00d9      	lsls	r1, r3, #3
 8002968:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800296c:	00d0      	lsls	r0, r2, #3
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	1912      	adds	r2, r2, r4
 8002974:	eb45 0303 	adc.w	r3, r5, r3
 8002978:	f04f 0000 	mov.w	r0, #0
 800297c:	f04f 0100 	mov.w	r1, #0
 8002980:	0299      	lsls	r1, r3, #10
 8002982:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002986:	0290      	lsls	r0, r2, #10
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4610      	mov	r0, r2
 800298e:	4619      	mov	r1, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	461a      	mov	r2, r3
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	f7fd fca2 	bl	80002e0 <__aeabi_uldivmod>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4613      	mov	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	0c1b      	lsrs	r3, r3, #16
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	3301      	adds	r3, #1
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029bc:	60bb      	str	r3, [r7, #8]
      break;
 80029be:	e002      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029c2:	60bb      	str	r3, [r7, #8]
      break;
 80029c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c6:	68bb      	ldr	r3, [r7, #8]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029d2:	bf00      	nop
 80029d4:	40023800 	.word	0x40023800
 80029d8:	00f42400 	.word	0x00f42400
 80029dc:	007a1200 	.word	0x007a1200

080029e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000000 	.word	0x20000000

080029f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029fc:	f7ff fff0 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 8002a00:	4602      	mov	r2, r0
 8002a02:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	0a9b      	lsrs	r3, r3, #10
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	4903      	ldr	r1, [pc, #12]	; (8002a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a0e:	5ccb      	ldrb	r3, [r1, r3]
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	080062e8 	.word	0x080062e8

08002a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a24:	f7ff ffdc 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	0b5b      	lsrs	r3, r3, #13
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4903      	ldr	r1, [pc, #12]	; (8002a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	080062e8 	.word	0x080062e8

08002a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d012      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a70:	4b69      	ldr	r3, [pc, #420]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	4a68      	ldr	r2, [pc, #416]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a76:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a7a:	6093      	str	r3, [r2, #8]
 8002a7c:	4b66      	ldr	r3, [pc, #408]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a84:	4964      	ldr	r1, [pc, #400]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a92:	2301      	movs	r3, #1
 8002a94:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d017      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002aa2:	4b5d      	ldr	r3, [pc, #372]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab0:	4959      	ldr	r1, [pc, #356]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d017      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ade:	4b4e      	ldr	r3, [pc, #312]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	494a      	ldr	r1, [pc, #296]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002afc:	d101      	bne.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002afe:	2301      	movs	r3, #1
 8002b00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 808b 	beq.w	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b2c:	4b3a      	ldr	r3, [pc, #232]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	4a39      	ldr	r2, [pc, #228]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b36:	6413      	str	r3, [r2, #64]	; 0x40
 8002b38:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b44:	4b35      	ldr	r3, [pc, #212]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a34      	ldr	r2, [pc, #208]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b50:	f7fe fbbe 	bl	80012d0 <HAL_GetTick>
 8002b54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b58:	f7fe fbba 	bl	80012d0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b64      	cmp	r3, #100	; 0x64
 8002b64:	d901      	bls.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e38f      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b6a:	4b2c      	ldr	r3, [pc, #176]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b76:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d035      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d02e      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b94:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002baa:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002bb6:	4a18      	ldr	r2, [pc, #96]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bbc:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d114      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fb82 	bl	80012d0 <HAL_GetTick>
 8002bcc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bce:	e00a      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fb7e 	bl	80012d0 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e351      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0ee      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bfe:	d111      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c0e:	400b      	ands	r3, r1
 8002c10:	4901      	ldr	r1, [pc, #4]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	40007000 	.word	0x40007000
 8002c20:	0ffffcff 	.word	0x0ffffcff
 8002c24:	4bb3      	ldr	r3, [pc, #716]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4ab2      	ldr	r2, [pc, #712]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c2e:	6093      	str	r3, [r2, #8]
 8002c30:	4bb0      	ldr	r3, [pc, #704]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c3c:	49ad      	ldr	r1, [pc, #692]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d010      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c4e:	4ba9      	ldr	r3, [pc, #676]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c54:	4aa7      	ldr	r2, [pc, #668]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c5e:	4ba5      	ldr	r3, [pc, #660]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	49a2      	ldr	r1, [pc, #648]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c7c:	4b9d      	ldr	r3, [pc, #628]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c8a:	499a      	ldr	r1, [pc, #616]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c9e:	4b95      	ldr	r3, [pc, #596]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cac:	4991      	ldr	r1, [pc, #580]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cc0:	4b8c      	ldr	r3, [pc, #560]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cce:	4989      	ldr	r1, [pc, #548]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ce2:	4b84      	ldr	r3, [pc, #528]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	4980      	ldr	r1, [pc, #512]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d04:	4b7b      	ldr	r3, [pc, #492]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0a:	f023 0203 	bic.w	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	4978      	ldr	r1, [pc, #480]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d26:	4b73      	ldr	r3, [pc, #460]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2c:	f023 020c 	bic.w	r2, r3, #12
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d34:	496f      	ldr	r1, [pc, #444]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d48:	4b6a      	ldr	r3, [pc, #424]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d56:	4967      	ldr	r1, [pc, #412]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00a      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d6a:	4b62      	ldr	r3, [pc, #392]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d70:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d78:	495e      	ldr	r1, [pc, #376]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00a      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d8c:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	4956      	ldr	r1, [pc, #344]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00a      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dae:	4b51      	ldr	r3, [pc, #324]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbc:	494d      	ldr	r1, [pc, #308]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00a      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002dd0:	4b48      	ldr	r3, [pc, #288]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dde:	4945      	ldr	r1, [pc, #276]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002df2:	4b40      	ldr	r3, [pc, #256]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e00:	493c      	ldr	r1, [pc, #240]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e14:	4b37      	ldr	r3, [pc, #220]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e22:	4934      	ldr	r1, [pc, #208]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d011      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e36:	4b2f      	ldr	r3, [pc, #188]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e44:	492b      	ldr	r1, [pc, #172]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e54:	d101      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002e56:	2301      	movs	r3, #1
 8002e58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e76:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e84:	491b      	ldr	r1, [pc, #108]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00b      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e98:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea8:	4912      	ldr	r1, [pc, #72]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00b      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ecc:	4909      	ldr	r1, [pc, #36]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00f      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ee6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef0:	e002      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	4986      	ldr	r1, [pc, #536]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00b      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f0c:	4b81      	ldr	r3, [pc, #516]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f1c:	497d      	ldr	r1, [pc, #500]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d006      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80d6 	beq.w	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f38:	4b76      	ldr	r3, [pc, #472]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a75      	ldr	r2, [pc, #468]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f44:	f7fe f9c4 	bl	80012d0 <HAL_GetTick>
 8002f48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f4c:	f7fe f9c0 	bl	80012d0 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	; 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e195      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f5e:	4b6d      	ldr	r3, [pc, #436]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d021      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d11d      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f7e:	4b65      	ldr	r3, [pc, #404]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f84:	0c1b      	lsrs	r3, r3, #16
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f8c:	4b61      	ldr	r3, [pc, #388]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f92:	0e1b      	lsrs	r3, r3, #24
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	019a      	lsls	r2, r3, #6
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	041b      	lsls	r3, r3, #16
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	071b      	lsls	r3, r3, #28
 8002fb2:	4958      	ldr	r1, [pc, #352]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d004      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fce:	d00a      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d02e      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe4:	d129      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fe6:	4b4b      	ldr	r3, [pc, #300]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fec:	0c1b      	lsrs	r3, r3, #16
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ff4:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ffa:	0f1b      	lsrs	r3, r3, #28
 8002ffc:	f003 0307 	and.w	r3, r3, #7
 8003000:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	019a      	lsls	r2, r3, #6
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	041b      	lsls	r3, r3, #16
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	061b      	lsls	r3, r3, #24
 8003014:	431a      	orrs	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	071b      	lsls	r3, r3, #28
 800301a:	493e      	ldr	r1, [pc, #248]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003022:	4b3c      	ldr	r3, [pc, #240]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003028:	f023 021f 	bic.w	r2, r3, #31
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	3b01      	subs	r3, #1
 8003032:	4938      	ldr	r1, [pc, #224]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01d      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003046:	4b33      	ldr	r3, [pc, #204]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800304c:	0e1b      	lsrs	r3, r3, #24
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003054:	4b2f      	ldr	r3, [pc, #188]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305a:	0f1b      	lsrs	r3, r3, #28
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	019a      	lsls	r2, r3, #6
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	041b      	lsls	r3, r3, #16
 800306e:	431a      	orrs	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	431a      	orrs	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	071b      	lsls	r3, r3, #28
 800307a:	4926      	ldr	r1, [pc, #152]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d011      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	019a      	lsls	r2, r3, #6
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	061b      	lsls	r3, r3, #24
 80030a2:	431a      	orrs	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	071b      	lsls	r3, r3, #28
 80030aa:	491a      	ldr	r1, [pc, #104]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030b2:	4b18      	ldr	r3, [pc, #96]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a17      	ldr	r2, [pc, #92]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030be:	f7fe f907 	bl	80012d0 <HAL_GetTick>
 80030c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030c6:	f7fe f903 	bl	80012d0 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b64      	cmp	r3, #100	; 0x64
 80030d2:	d901      	bls.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e0d8      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030d8:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	f040 80ce 	bne.w	8003288 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a08      	ldr	r2, [pc, #32]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f8:	f7fe f8ea 	bl	80012d0 <HAL_GetTick>
 80030fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030fe:	e00b      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003100:	f7fe f8e6 	bl	80012d0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d904      	bls.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0bb      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003118:	4b5e      	ldr	r3, [pc, #376]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003124:	d0ec      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003142:	2b00      	cmp	r3, #0
 8003144:	d02e      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d12a      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800314e:	4b51      	ldr	r3, [pc, #324]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800315c:	4b4d      	ldr	r3, [pc, #308]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	0f1b      	lsrs	r3, r3, #28
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	019a      	lsls	r2, r3, #6
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	041b      	lsls	r3, r3, #16
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	061b      	lsls	r3, r3, #24
 800317c:	431a      	orrs	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	071b      	lsls	r3, r3, #28
 8003182:	4944      	ldr	r1, [pc, #272]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800318a:	4b42      	ldr	r3, [pc, #264]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800318c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003190:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	3b01      	subs	r3, #1
 800319a:	021b      	lsls	r3, r3, #8
 800319c:	493d      	ldr	r1, [pc, #244]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d022      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b8:	d11d      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031ba:	4b36      	ldr	r3, [pc, #216]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c0:	0e1b      	lsrs	r3, r3, #24
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031c8:	4b32      	ldr	r3, [pc, #200]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	0f1b      	lsrs	r3, r3, #28
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	019a      	lsls	r2, r3, #6
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	041b      	lsls	r3, r3, #16
 80031e2:	431a      	orrs	r2, r3
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	061b      	lsls	r3, r3, #24
 80031e8:	431a      	orrs	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	071b      	lsls	r3, r3, #28
 80031ee:	4929      	ldr	r1, [pc, #164]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d028      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	0e1b      	lsrs	r3, r3, #24
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003210:	4b20      	ldr	r3, [pc, #128]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003216:	0c1b      	lsrs	r3, r3, #16
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	019a      	lsls	r2, r3, #6
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	041b      	lsls	r3, r3, #16
 8003228:	431a      	orrs	r2, r3
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	061b      	lsls	r3, r3, #24
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	071b      	lsls	r3, r3, #28
 8003236:	4917      	ldr	r1, [pc, #92]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800323e:	4b15      	ldr	r3, [pc, #84]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	4911      	ldr	r1, [pc, #68]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800325a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003260:	f7fe f836 	bl	80012d0 <HAL_GetTick>
 8003264:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003268:	f7fe f832 	bl	80012d0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	; 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e007      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003282:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003286:	d1ef      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3720      	adds	r7, #32
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800

08003298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e09d      	b.n	80033e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d108      	bne.n	80032c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ba:	d009      	beq.n	80032d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	61da      	str	r2, [r3, #28]
 80032c2:	e005      	b.n	80032d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d106      	bne.n	80032f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fd fd90 	bl	8000e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003306:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003310:	d902      	bls.n	8003318 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	e002      	b.n	800331e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800331c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003326:	d007      	beq.n	8003338 <HAL_SPI_Init+0xa0>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003330:	d002      	beq.n	8003338 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003370:	431a      	orrs	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337a:	ea42 0103 	orr.w	r1, r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	0c1b      	lsrs	r3, r3, #16
 8003394:	f003 0204 	and.w	r2, r3, #4
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033b4:	ea42 0103 	orr.w	r1, r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b088      	sub	sp, #32
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_SPI_Transmit+0x22>
 800340c:	2302      	movs	r3, #2
 800340e:	e158      	b.n	80036c2 <HAL_SPI_Transmit+0x2d4>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003418:	f7fd ff5a 	bl	80012d0 <HAL_GetTick>
 800341c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d002      	beq.n	8003434 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800342e:	2302      	movs	r3, #2
 8003430:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003432:	e13d      	b.n	80036b0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_SPI_Transmit+0x52>
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d102      	bne.n	8003446 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003444:	e134      	b.n	80036b0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2203      	movs	r2, #3
 800344a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	88fa      	ldrh	r2, [r7, #6]
 800345e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003490:	d10f      	bne.n	80034b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d007      	beq.n	80034d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034d8:	d94b      	bls.n	8003572 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_SPI_Transmit+0xfa>
 80034e2:	8afb      	ldrh	r3, [r7, #22]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d13e      	bne.n	8003566 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	881a      	ldrh	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	1c9a      	adds	r2, r3, #2
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29a      	uxth	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800350c:	e02b      	b.n	8003566 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b02      	cmp	r3, #2
 800351a:	d112      	bne.n	8003542 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	881a      	ldrh	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	1c9a      	adds	r2, r3, #2
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003540:	e011      	b.n	8003566 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003542:	f7fd fec5 	bl	80012d0 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d803      	bhi.n	800355a <HAL_SPI_Transmit+0x16c>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003558:	d102      	bne.n	8003560 <HAL_SPI_Transmit+0x172>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d102      	bne.n	8003566 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003564:	e0a4      	b.n	80036b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ce      	bne.n	800350e <HAL_SPI_Transmit+0x120>
 8003570:	e07c      	b.n	800366c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <HAL_SPI_Transmit+0x192>
 800357a:	8afb      	ldrh	r3, [r7, #22]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d170      	bne.n	8003662 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003584:	b29b      	uxth	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d912      	bls.n	80035b0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358e:	881a      	ldrh	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	1c9a      	adds	r2, r3, #2
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b02      	subs	r3, #2
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035ae:	e058      	b.n	8003662 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	330c      	adds	r3, #12
 80035ba:	7812      	ldrb	r2, [r2, #0]
 80035bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80035d6:	e044      	b.n	8003662 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d12b      	bne.n	800363e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d912      	bls.n	8003616 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	881a      	ldrh	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003600:	1c9a      	adds	r2, r3, #2
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b02      	subs	r3, #2
 800360e:	b29a      	uxth	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003614:	e025      	b.n	8003662 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	330c      	adds	r3, #12
 8003620:	7812      	ldrb	r2, [r2, #0]
 8003622:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800363c:	e011      	b.n	8003662 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800363e:	f7fd fe47 	bl	80012d0 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d803      	bhi.n	8003656 <HAL_SPI_Transmit+0x268>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d102      	bne.n	800365c <HAL_SPI_Transmit+0x26e>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d102      	bne.n	8003662 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003660:	e026      	b.n	80036b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003666:	b29b      	uxth	r3, r3
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1b5      	bne.n	80035d8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fd07 	bl	8004084 <SPI_EndRxTxTransaction>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	613b      	str	r3, [r7, #16]
 800369e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	77fb      	strb	r3, [r7, #31]
 80036ac:	e000      	b.n	80036b0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80036ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b088      	sub	sp, #32
 80036ce:	af02      	add	r7, sp, #8
 80036d0:	60f8      	str	r0, [r7, #12]
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	4613      	mov	r3, r2
 80036d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036e6:	d112      	bne.n	800370e <HAL_SPI_Receive+0x44>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10e      	bne.n	800370e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2204      	movs	r2, #4
 80036f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036f8:	88fa      	ldrh	r2, [r7, #6]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	4613      	mov	r3, r2
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	68b9      	ldr	r1, [r7, #8]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f910 	bl	800392a <HAL_SPI_TransmitReceive>
 800370a:	4603      	mov	r3, r0
 800370c:	e109      	b.n	8003922 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_SPI_Receive+0x52>
 8003718:	2302      	movs	r3, #2
 800371a:	e102      	b.n	8003922 <HAL_SPI_Receive+0x258>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003724:	f7fd fdd4 	bl	80012d0 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003730:	b2db      	uxtb	r3, r3
 8003732:	2b01      	cmp	r3, #1
 8003734:	d002      	beq.n	800373c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003736:	2302      	movs	r3, #2
 8003738:	75fb      	strb	r3, [r7, #23]
    goto error;
 800373a:	e0e9      	b.n	8003910 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_SPI_Receive+0x7e>
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d102      	bne.n	800374e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800374c:	e0e0      	b.n	8003910 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2204      	movs	r2, #4
 8003752:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	88fa      	ldrh	r2, [r7, #6]
 8003766:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	88fa      	ldrh	r2, [r7, #6]
 800376e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003798:	d908      	bls.n	80037ac <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	e007      	b.n	80037bc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037ba:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c4:	d10f      	bne.n	80037e6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	d007      	beq.n	8003804 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003802:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800380c:	d867      	bhi.n	80038de <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800380e:	e030      	b.n	8003872 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b01      	cmp	r3, #1
 800381c:	d117      	bne.n	800384e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f103 020c 	add.w	r2, r3, #12
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	7812      	ldrb	r2, [r2, #0]
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800384c:	e011      	b.n	8003872 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800384e:	f7fd fd3f 	bl	80012d0 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d803      	bhi.n	8003866 <HAL_SPI_Receive+0x19c>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d102      	bne.n	800386c <HAL_SPI_Receive+0x1a2>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d102      	bne.n	8003872 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003870:	e04e      	b.n	8003910 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1c8      	bne.n	8003810 <HAL_SPI_Receive+0x146>
 800387e:	e034      	b.n	80038ea <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b01      	cmp	r3, #1
 800388c:	d115      	bne.n	80038ba <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	b292      	uxth	r2, r2
 800389a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	1c9a      	adds	r2, r3, #2
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80038b8:	e011      	b.n	80038de <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ba:	f7fd fd09 	bl	80012d0 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d803      	bhi.n	80038d2 <HAL_SPI_Receive+0x208>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d0:	d102      	bne.n	80038d8 <HAL_SPI_Receive+0x20e>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d102      	bne.n	80038de <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80038dc:	e018      	b.n	8003910 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ca      	bne.n	8003880 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	6839      	ldr	r1, [r7, #0]
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fb4c 	bl	8003f8c <SPI_EndRxTransaction>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	75fb      	strb	r3, [r7, #23]
 800390c:	e000      	b.n	8003910 <HAL_SPI_Receive+0x246>
  }

error :
 800390e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003920:	7dfb      	ldrb	r3, [r7, #23]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b08a      	sub	sp, #40	; 0x28
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003938:	2301      	movs	r3, #1
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x26>
 800394c:	2302      	movs	r3, #2
 800394e:	e1fb      	b.n	8003d48 <HAL_SPI_TransmitReceive+0x41e>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003958:	f7fd fcba 	bl	80012d0 <HAL_GetTick>
 800395c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003964:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800396c:	887b      	ldrh	r3, [r7, #2]
 800396e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003974:	7efb      	ldrb	r3, [r7, #27]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d00e      	beq.n	8003998 <HAL_SPI_TransmitReceive+0x6e>
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003980:	d106      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d102      	bne.n	8003990 <HAL_SPI_TransmitReceive+0x66>
 800398a:	7efb      	ldrb	r3, [r7, #27]
 800398c:	2b04      	cmp	r3, #4
 800398e:	d003      	beq.n	8003998 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003990:	2302      	movs	r3, #2
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003996:	e1cd      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_SPI_TransmitReceive+0x80>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HAL_SPI_TransmitReceive+0x80>
 80039a4:	887b      	ldrh	r3, [r7, #2]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d103      	bne.n	80039b2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80039b0:	e1c0      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d003      	beq.n	80039c6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2205      	movs	r2, #5
 80039c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	887a      	ldrh	r2, [r7, #2]
 80039d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	887a      	ldrh	r2, [r7, #2]
 80039de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	887a      	ldrh	r2, [r7, #2]
 80039ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	887a      	ldrh	r2, [r7, #2]
 80039f2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a08:	d802      	bhi.n	8003a10 <HAL_SPI_TransmitReceive+0xe6>
 8003a0a:	8a3b      	ldrh	r3, [r7, #16]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d908      	bls.n	8003a22 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a1e:	605a      	str	r2, [r3, #4]
 8003a20:	e007      	b.n	8003a32 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a30:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b40      	cmp	r3, #64	; 0x40
 8003a3e:	d007      	beq.n	8003a50 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a58:	d97c      	bls.n	8003b54 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_SPI_TransmitReceive+0x13e>
 8003a62:	8a7b      	ldrh	r3, [r7, #18]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d169      	bne.n	8003b3c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	881a      	ldrh	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	1c9a      	adds	r2, r3, #2
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a8c:	e056      	b.n	8003b3c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_SPI_TransmitReceive+0x1aa>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d016      	beq.n	8003ad4 <HAL_SPI_TransmitReceive+0x1aa>
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d113      	bne.n	8003ad4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	881a      	ldrh	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	1c9a      	adds	r2, r3, #2
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d11c      	bne.n	8003b1c <HAL_SPI_TransmitReceive+0x1f2>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d016      	beq.n	8003b1c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	b292      	uxth	r2, r2
 8003afa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	1c9a      	adds	r2, r3, #2
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b1c:	f7fd fbd8 	bl	80012d0 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d807      	bhi.n	8003b3c <HAL_SPI_TransmitReceive+0x212>
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d003      	beq.n	8003b3c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003b3a:	e0fb      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1a3      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x164>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d19d      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x164>
 8003b52:	e0df      	b.n	8003d14 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_SPI_TransmitReceive+0x23a>
 8003b5c:	8a7b      	ldrh	r3, [r7, #18]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	f040 80cb 	bne.w	8003cfa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d912      	bls.n	8003b94 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	881a      	ldrh	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	1c9a      	adds	r2, r3, #2
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b02      	subs	r3, #2
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b92:	e0b2      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	7812      	ldrb	r2, [r2, #0]
 8003ba0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bba:	e09e      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d134      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x30a>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d02f      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x30a>
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d12c      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d912      	bls.n	8003c0a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	881a      	ldrh	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	1c9a      	adds	r2, r3, #2
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b02      	subs	r3, #2
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c08:	e012      	b.n	8003c30 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	7812      	ldrb	r2, [r2, #0]
 8003c16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d148      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x3aa>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d042      	beq.n	8003cd4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d923      	bls.n	8003ca2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	b292      	uxth	r2, r2
 8003c66:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	1c9a      	adds	r2, r3, #2
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b02      	subs	r3, #2
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d81f      	bhi.n	8003cd0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c9e:	605a      	str	r2, [r3, #4]
 8003ca0:	e016      	b.n	8003cd0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f103 020c 	add.w	r2, r3, #12
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	7812      	ldrb	r2, [r2, #0]
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cd4:	f7fd fafc 	bl	80012d0 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d803      	bhi.n	8003cec <HAL_SPI_TransmitReceive+0x3c2>
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cea:	d102      	bne.n	8003cf2 <HAL_SPI_TransmitReceive+0x3c8>
 8003cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d103      	bne.n	8003cfa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003cf8:	e01c      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f47f af5b 	bne.w	8003bbc <HAL_SPI_TransmitReceive+0x292>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f47f af54 	bne.w	8003bbc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f9b3 	bl	8004084 <SPI_EndRxTxTransaction>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d006      	beq.n	8003d32 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	661a      	str	r2, [r3, #96]	; 0x60
 8003d30:	e000      	b.n	8003d34 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003d32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3728      	adds	r7, #40	; 0x28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d60:	f7fd fab6 	bl	80012d0 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d70:	f7fd faae 	bl	80012d0 <HAL_GetTick>
 8003d74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d76:	4b39      	ldr	r3, [pc, #228]	; (8003e5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	015b      	lsls	r3, r3, #5
 8003d7c:	0d1b      	lsrs	r3, r3, #20
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	fb02 f303 	mul.w	r3, r2, r3
 8003d84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d86:	e054      	b.n	8003e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8e:	d050      	beq.n	8003e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d90:	f7fd fa9e 	bl	80012d0 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	69fa      	ldr	r2, [r7, #28]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d902      	bls.n	8003da6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d13d      	bne.n	8003e22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003db4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dbe:	d111      	bne.n	8003de4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc8:	d004      	beq.n	8003dd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd2:	d107      	bne.n	8003de4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dec:	d10f      	bne.n	8003e0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e017      	b.n	8003e52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	bf0c      	ite	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	2300      	movne	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d19b      	bne.n	8003d88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000000 	.word	0x20000000

08003e60 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	; 0x28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e72:	f7fd fa2d 	bl	80012d0 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	4413      	add	r3, r2
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003e82:	f7fd fa25 	bl	80012d0 <HAL_GetTick>
 8003e86:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e90:	4b3d      	ldr	r3, [pc, #244]	; (8003f88 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	00da      	lsls	r2, r3, #3
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	0d1b      	lsrs	r3, r3, #20
 8003ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ea8:	e060      	b.n	8003f6c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003eb0:	d107      	bne.n	8003ec2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d104      	bne.n	8003ec2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec8:	d050      	beq.n	8003f6c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003eca:	f7fd fa01 	bl	80012d0 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d902      	bls.n	8003ee0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d13d      	bne.n	8003f5c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003eee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef8:	d111      	bne.n	8003f1e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f02:	d004      	beq.n	8003f0e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0c:	d107      	bne.n	8003f1e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f26:	d10f      	bne.n	8003f48 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e010      	b.n	8003f7e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4013      	ands	r3, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d196      	bne.n	8003eaa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3728      	adds	r7, #40	; 0x28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000000 	.word	0x20000000

08003f8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fa0:	d111      	bne.n	8003fc6 <SPI_EndRxTransaction+0x3a>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003faa:	d004      	beq.n	8003fb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb4:	d107      	bne.n	8003fc6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fce:	d112      	bne.n	8003ff6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2180      	movs	r1, #128	; 0x80
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f7ff feb8 	bl	8003d50 <SPI_WaitFlagStateUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d021      	beq.n	800402a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fea:	f043 0220 	orr.w	r2, r3, #32
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e03d      	b.n	8004072 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ff6:	4b21      	ldr	r3, [pc, #132]	; (800407c <SPI_EndRxTransaction+0xf0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a21      	ldr	r2, [pc, #132]	; (8004080 <SPI_EndRxTransaction+0xf4>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	0d5b      	lsrs	r3, r3, #21
 8004002:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	3b01      	subs	r3, #1
 8004016:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004022:	2b80      	cmp	r3, #128	; 0x80
 8004024:	d0f2      	beq.n	800400c <SPI_EndRxTransaction+0x80>
 8004026:	e000      	b.n	800402a <SPI_EndRxTransaction+0x9e>
        break;
 8004028:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004032:	d11d      	bne.n	8004070 <SPI_EndRxTransaction+0xe4>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800403c:	d004      	beq.n	8004048 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004046:	d113      	bne.n	8004070 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2200      	movs	r2, #0
 8004050:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f7ff ff03 	bl	8003e60 <SPI_WaitFifoStateUntilTimeout>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004064:	f043 0220 	orr.w	r2, r3, #32
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e000      	b.n	8004072 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000000 	.word	0x20000000
 8004080:	165e9f81 	.word	0x165e9f81

08004084 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2200      	movs	r2, #0
 8004098:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff fedf 	bl	8003e60 <SPI_WaitFifoStateUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ac:	f043 0220 	orr.w	r2, r3, #32
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e046      	b.n	8004146 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040b8:	4b25      	ldr	r3, [pc, #148]	; (8004150 <SPI_EndRxTxTransaction+0xcc>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a25      	ldr	r2, [pc, #148]	; (8004154 <SPI_EndRxTxTransaction+0xd0>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	0d5b      	lsrs	r3, r3, #21
 80040c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040c8:	fb02 f303 	mul.w	r3, r2, r3
 80040cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040d6:	d112      	bne.n	80040fe <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2200      	movs	r2, #0
 80040e0:	2180      	movs	r1, #128	; 0x80
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7ff fe34 	bl	8003d50 <SPI_WaitFlagStateUntilTimeout>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d016      	beq.n	800411c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f2:	f043 0220 	orr.w	r2, r3, #32
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e023      	b.n	8004146 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	3b01      	subs	r3, #1
 8004108:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004114:	2b80      	cmp	r3, #128	; 0x80
 8004116:	d0f2      	beq.n	80040fe <SPI_EndRxTxTransaction+0x7a>
 8004118:	e000      	b.n	800411c <SPI_EndRxTxTransaction+0x98>
        break;
 800411a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2200      	movs	r2, #0
 8004124:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f7ff fe99 	bl	8003e60 <SPI_WaitFifoStateUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004138:	f043 0220 	orr.w	r2, r3, #32
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e000      	b.n	8004146 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000000 	.word	0x20000000
 8004154:	165e9f81 	.word	0x165e9f81

08004158 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e08f      	b.n	800428c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d106      	bne.n	8004186 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7fc fe89 	bl	8000e98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2202      	movs	r2, #2
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6899      	ldr	r1, [r3, #8]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b3e      	ldr	r3, [pc, #248]	; (8004294 <HAL_TIM_Encoder_Init+0x13c>)
 800419a:	400b      	ands	r3, r1
 800419c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3304      	adds	r3, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f000 fa7b 	bl	80046a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4b31      	ldr	r3, [pc, #196]	; (8004298 <HAL_TIM_Encoder_Init+0x140>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	4313      	orrs	r3, r2
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4b2b      	ldr	r3, [pc, #172]	; (800429c <HAL_TIM_Encoder_Init+0x144>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <HAL_TIM_Encoder_Init+0x148>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	4313      	orrs	r3, r2
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	011a      	lsls	r2, r3, #4
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	031b      	lsls	r3, r3, #12
 8004218:	4313      	orrs	r3, r2
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004226:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800422e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	4313      	orrs	r3, r2
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	fffebff8 	.word	0xfffebff8
 8004298:	fffffcfc 	.word	0xfffffcfc
 800429c:	fffff3f3 	.word	0xfffff3f3
 80042a0:	ffff0f0f 	.word	0xffff0f0f

080042a4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042cc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d110      	bne.n	80042f6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d102      	bne.n	80042e0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042da:	7b7b      	ldrb	r3, [r7, #13]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d001      	beq.n	80042e4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e089      	b.n	80043f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042f4:	e031      	b.n	800435a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d110      	bne.n	800431e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80042fc:	7bbb      	ldrb	r3, [r7, #14]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d102      	bne.n	8004308 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004302:	7b3b      	ldrb	r3, [r7, #12]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d001      	beq.n	800430c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e075      	b.n	80043f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800431c:	e01d      	b.n	800435a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d108      	bne.n	8004336 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004324:	7bbb      	ldrb	r3, [r7, #14]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d105      	bne.n	8004336 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800432a:	7b7b      	ldrb	r3, [r7, #13]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d102      	bne.n	8004336 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004330:	7b3b      	ldrb	r3, [r7, #12]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d001      	beq.n	800433a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e05e      	b.n	80043f8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2202      	movs	r2, #2
 8004356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b04      	cmp	r3, #4
 8004364:	d010      	beq.n	8004388 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004366:	e01f      	b.n	80043a8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2201      	movs	r2, #1
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fa37 	bl	80047e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f042 0202 	orr.w	r2, r2, #2
 8004384:	60da      	str	r2, [r3, #12]
      break;
 8004386:	e02e      	b.n	80043e6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2201      	movs	r2, #1
 800438e:	2104      	movs	r1, #4
 8004390:	4618      	mov	r0, r3
 8004392:	f000 fa27 	bl	80047e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f042 0204 	orr.w	r2, r2, #4
 80043a4:	60da      	str	r2, [r3, #12]
      break;
 80043a6:	e01e      	b.n	80043e6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2201      	movs	r2, #1
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fa17 	bl	80047e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2201      	movs	r2, #1
 80043bc:	2104      	movs	r1, #4
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fa10 	bl	80047e4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0202 	orr.w	r2, r2, #2
 80043d2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0204 	orr.w	r2, r2, #4
 80043e2:	60da      	str	r2, [r3, #12]
      break;
 80043e4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b02      	cmp	r3, #2
 8004414:	d122      	bne.n	800445c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b02      	cmp	r3, #2
 8004422:	d11b      	bne.n	800445c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0202 	mvn.w	r2, #2
 800442c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f90f 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 8004448:	e005      	b.n	8004456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f901 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f912 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b04      	cmp	r3, #4
 8004468:	d122      	bne.n	80044b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b04      	cmp	r3, #4
 8004476:	d11b      	bne.n	80044b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0204 	mvn.w	r2, #4
 8004480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f8e5 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f8d7 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f8e8 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d122      	bne.n	8004504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d11b      	bne.n	8004504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f06f 0208 	mvn.w	r2, #8
 80044d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2204      	movs	r2, #4
 80044da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f8bb 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 80044f0:	e005      	b.n	80044fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f8ad 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f8be 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b10      	cmp	r3, #16
 8004510:	d122      	bne.n	8004558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0310 	and.w	r3, r3, #16
 800451c:	2b10      	cmp	r3, #16
 800451e:	d11b      	bne.n	8004558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0210 	mvn.w	r2, #16
 8004528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2208      	movs	r2, #8
 800452e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f891 	bl	8004666 <HAL_TIM_IC_CaptureCallback>
 8004544:	e005      	b.n	8004552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f883 	bl	8004652 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f894 	bl	800467a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10e      	bne.n	8004584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	d107      	bne.n	8004584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0201 	mvn.w	r2, #1
 800457c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f85d 	bl	800463e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458e:	2b80      	cmp	r3, #128	; 0x80
 8004590:	d10e      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459c:	2b80      	cmp	r3, #128	; 0x80
 800459e:	d107      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f9d8 	bl	8004960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045be:	d10e      	bne.n	80045de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ca:	2b80      	cmp	r3, #128	; 0x80
 80045cc:	d107      	bne.n	80045de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f9cb 	bl	8004974 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e8:	2b40      	cmp	r3, #64	; 0x40
 80045ea:	d10e      	bne.n	800460a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b40      	cmp	r3, #64	; 0x40
 80045f8:	d107      	bne.n	800460a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f842 	bl	800468e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b20      	cmp	r3, #32
 8004616:	d10e      	bne.n	8004636 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b20      	cmp	r3, #32
 8004624:	d107      	bne.n	8004636 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f06f 0220 	mvn.w	r2, #32
 800462e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f98b 	bl	800494c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a40      	ldr	r2, [pc, #256]	; (80047b8 <TIM_Base_SetConfig+0x114>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d013      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c2:	d00f      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a3d      	ldr	r2, [pc, #244]	; (80047bc <TIM_Base_SetConfig+0x118>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00b      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a3c      	ldr	r2, [pc, #240]	; (80047c0 <TIM_Base_SetConfig+0x11c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d007      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a3b      	ldr	r2, [pc, #236]	; (80047c4 <TIM_Base_SetConfig+0x120>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <TIM_Base_SetConfig+0x40>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a3a      	ldr	r2, [pc, #232]	; (80047c8 <TIM_Base_SetConfig+0x124>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d108      	bne.n	80046f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a2f      	ldr	r2, [pc, #188]	; (80047b8 <TIM_Base_SetConfig+0x114>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d02b      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004704:	d027      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a2c      	ldr	r2, [pc, #176]	; (80047bc <TIM_Base_SetConfig+0x118>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d023      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a2b      	ldr	r2, [pc, #172]	; (80047c0 <TIM_Base_SetConfig+0x11c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d01f      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a2a      	ldr	r2, [pc, #168]	; (80047c4 <TIM_Base_SetConfig+0x120>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01b      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a29      	ldr	r2, [pc, #164]	; (80047c8 <TIM_Base_SetConfig+0x124>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d017      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a28      	ldr	r2, [pc, #160]	; (80047cc <TIM_Base_SetConfig+0x128>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a27      	ldr	r2, [pc, #156]	; (80047d0 <TIM_Base_SetConfig+0x12c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00f      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a26      	ldr	r2, [pc, #152]	; (80047d4 <TIM_Base_SetConfig+0x130>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00b      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a25      	ldr	r2, [pc, #148]	; (80047d8 <TIM_Base_SetConfig+0x134>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d007      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a24      	ldr	r2, [pc, #144]	; (80047dc <TIM_Base_SetConfig+0x138>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d003      	beq.n	8004756 <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a23      	ldr	r2, [pc, #140]	; (80047e0 <TIM_Base_SetConfig+0x13c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d108      	bne.n	8004768 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	4313      	orrs	r3, r2
 8004766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a0a      	ldr	r2, [pc, #40]	; (80047b8 <TIM_Base_SetConfig+0x114>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d003      	beq.n	800479c <TIM_Base_SetConfig+0xf8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a0c      	ldr	r2, [pc, #48]	; (80047c8 <TIM_Base_SetConfig+0x124>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d103      	bne.n	80047a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	615a      	str	r2, [r3, #20]
}
 80047aa:	bf00      	nop
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40010000 	.word	0x40010000
 80047bc:	40000400 	.word	0x40000400
 80047c0:	40000800 	.word	0x40000800
 80047c4:	40000c00 	.word	0x40000c00
 80047c8:	40010400 	.word	0x40010400
 80047cc:	40014000 	.word	0x40014000
 80047d0:	40014400 	.word	0x40014400
 80047d4:	40014800 	.word	0x40014800
 80047d8:	40001800 	.word	0x40001800
 80047dc:	40001c00 	.word	0x40001c00
 80047e0:	40002000 	.word	0x40002000

080047e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f003 031f 	and.w	r3, r3, #31
 80047f6:	2201      	movs	r2, #1
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a1a      	ldr	r2, [r3, #32]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	43db      	mvns	r3, r3
 8004806:	401a      	ands	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a1a      	ldr	r2, [r3, #32]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	431a      	orrs	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	621a      	str	r2, [r3, #32]
}
 8004822:	bf00      	nop
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004844:	2302      	movs	r3, #2
 8004846:	e06d      	b.n	8004924 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a30      	ldr	r2, [pc, #192]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a2f      	ldr	r2, [pc, #188]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d108      	bne.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004882:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004894:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a20      	ldr	r2, [pc, #128]	; (8004930 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d022      	beq.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ba:	d01d      	beq.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d018      	beq.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a1c      	ldr	r2, [pc, #112]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d013      	beq.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1a      	ldr	r2, [pc, #104]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00e      	beq.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a15      	ldr	r2, [pc, #84]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d009      	beq.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a16      	ldr	r2, [pc, #88]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a15      	ldr	r2, [pc, #84]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d10c      	bne.n	8004912 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	4313      	orrs	r3, r2
 8004908:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	40010000 	.word	0x40010000
 8004934:	40010400 	.word	0x40010400
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800
 8004940:	40000c00 	.word	0x40000c00
 8004944:	40014000 	.word	0x40014000
 8004948:	40001800 	.word	0x40001800

0800494c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e040      	b.n	8004a1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fc fac0 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2224      	movs	r2, #36	; 0x24
 80049b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0201 	bic.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f8c0 	bl	8004b4c <UART_SetConfig>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e022      	b.n	8004a1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fb16 	bl	8005010 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fb9d 	bl	8005154 <UART_CheckIdleState>
 8004a1a:	4603      	mov	r3, r0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	; 0x28
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	f040 8081 	bne.w	8004b40 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_UART_Transmit+0x26>
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e079      	b.n	8004b42 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_UART_Transmit+0x38>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e072      	b.n	8004b42 <HAL_UART_Transmit+0x11e>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2221      	movs	r2, #33	; 0x21
 8004a70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a72:	f7fc fc2d 	bl	80012d0 <HAL_GetTick>
 8004a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	88fa      	ldrh	r2, [r7, #6]
 8004a7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	88fa      	ldrh	r2, [r7, #6]
 8004a84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a90:	d108      	bne.n	8004aa4 <HAL_UART_Transmit+0x80>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d104      	bne.n	8004aa4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	e003      	b.n	8004aac <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ab4:	e02c      	b.n	8004b10 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2200      	movs	r2, #0
 8004abe:	2180      	movs	r1, #128	; 0x80
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 fb90 	bl	80051e6 <UART_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e038      	b.n	8004b42 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ae4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	3302      	adds	r3, #2
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	e007      	b.n	8004afe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	781a      	ldrb	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	3301      	adds	r3, #1
 8004afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1cc      	bne.n	8004ab6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2200      	movs	r2, #0
 8004b24:	2140      	movs	r1, #64	; 0x40
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 fb5d 	bl	80051e6 <UART_WaitOnFlagUntilTimeout>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e005      	b.n	8004b42 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e000      	b.n	8004b42 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004b40:	2302      	movs	r3, #2
  }
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3720      	adds	r7, #32
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b088      	sub	sp, #32
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4ba7      	ldr	r3, [pc, #668]	; (8004e14 <UART_SetConfig+0x2c8>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	6979      	ldr	r1, [r7, #20]
 8004b80:	430b      	orrs	r3, r1
 8004b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a95      	ldr	r2, [pc, #596]	; (8004e18 <UART_SetConfig+0x2cc>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d120      	bne.n	8004c0a <UART_SetConfig+0xbe>
 8004bc8:	4b94      	ldr	r3, [pc, #592]	; (8004e1c <UART_SetConfig+0x2d0>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d816      	bhi.n	8004c04 <UART_SetConfig+0xb8>
 8004bd6:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <UART_SetConfig+0x90>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004bed 	.word	0x08004bed
 8004be0:	08004bf9 	.word	0x08004bf9
 8004be4:	08004bf3 	.word	0x08004bf3
 8004be8:	08004bff 	.word	0x08004bff
 8004bec:	2301      	movs	r3, #1
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e14f      	b.n	8004e92 <UART_SetConfig+0x346>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e14c      	b.n	8004e92 <UART_SetConfig+0x346>
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e149      	b.n	8004e92 <UART_SetConfig+0x346>
 8004bfe:	2308      	movs	r3, #8
 8004c00:	77fb      	strb	r3, [r7, #31]
 8004c02:	e146      	b.n	8004e92 <UART_SetConfig+0x346>
 8004c04:	2310      	movs	r3, #16
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e143      	b.n	8004e92 <UART_SetConfig+0x346>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a84      	ldr	r2, [pc, #528]	; (8004e20 <UART_SetConfig+0x2d4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d132      	bne.n	8004c7a <UART_SetConfig+0x12e>
 8004c14:	4b81      	ldr	r3, [pc, #516]	; (8004e1c <UART_SetConfig+0x2d0>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	2b0c      	cmp	r3, #12
 8004c20:	d828      	bhi.n	8004c74 <UART_SetConfig+0x128>
 8004c22:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <UART_SetConfig+0xdc>)
 8004c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c28:	08004c5d 	.word	0x08004c5d
 8004c2c:	08004c75 	.word	0x08004c75
 8004c30:	08004c75 	.word	0x08004c75
 8004c34:	08004c75 	.word	0x08004c75
 8004c38:	08004c69 	.word	0x08004c69
 8004c3c:	08004c75 	.word	0x08004c75
 8004c40:	08004c75 	.word	0x08004c75
 8004c44:	08004c75 	.word	0x08004c75
 8004c48:	08004c63 	.word	0x08004c63
 8004c4c:	08004c75 	.word	0x08004c75
 8004c50:	08004c75 	.word	0x08004c75
 8004c54:	08004c75 	.word	0x08004c75
 8004c58:	08004c6f 	.word	0x08004c6f
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e117      	b.n	8004e92 <UART_SetConfig+0x346>
 8004c62:	2302      	movs	r3, #2
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e114      	b.n	8004e92 <UART_SetConfig+0x346>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e111      	b.n	8004e92 <UART_SetConfig+0x346>
 8004c6e:	2308      	movs	r3, #8
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e10e      	b.n	8004e92 <UART_SetConfig+0x346>
 8004c74:	2310      	movs	r3, #16
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e10b      	b.n	8004e92 <UART_SetConfig+0x346>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a69      	ldr	r2, [pc, #420]	; (8004e24 <UART_SetConfig+0x2d8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d120      	bne.n	8004cc6 <UART_SetConfig+0x17a>
 8004c84:	4b65      	ldr	r3, [pc, #404]	; (8004e1c <UART_SetConfig+0x2d0>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c8e:	2b30      	cmp	r3, #48	; 0x30
 8004c90:	d013      	beq.n	8004cba <UART_SetConfig+0x16e>
 8004c92:	2b30      	cmp	r3, #48	; 0x30
 8004c94:	d814      	bhi.n	8004cc0 <UART_SetConfig+0x174>
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d009      	beq.n	8004cae <UART_SetConfig+0x162>
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d810      	bhi.n	8004cc0 <UART_SetConfig+0x174>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <UART_SetConfig+0x15c>
 8004ca2:	2b10      	cmp	r3, #16
 8004ca4:	d006      	beq.n	8004cb4 <UART_SetConfig+0x168>
 8004ca6:	e00b      	b.n	8004cc0 <UART_SetConfig+0x174>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	77fb      	strb	r3, [r7, #31]
 8004cac:	e0f1      	b.n	8004e92 <UART_SetConfig+0x346>
 8004cae:	2302      	movs	r3, #2
 8004cb0:	77fb      	strb	r3, [r7, #31]
 8004cb2:	e0ee      	b.n	8004e92 <UART_SetConfig+0x346>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	77fb      	strb	r3, [r7, #31]
 8004cb8:	e0eb      	b.n	8004e92 <UART_SetConfig+0x346>
 8004cba:	2308      	movs	r3, #8
 8004cbc:	77fb      	strb	r3, [r7, #31]
 8004cbe:	e0e8      	b.n	8004e92 <UART_SetConfig+0x346>
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	77fb      	strb	r3, [r7, #31]
 8004cc4:	e0e5      	b.n	8004e92 <UART_SetConfig+0x346>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a57      	ldr	r2, [pc, #348]	; (8004e28 <UART_SetConfig+0x2dc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d120      	bne.n	8004d12 <UART_SetConfig+0x1c6>
 8004cd0:	4b52      	ldr	r3, [pc, #328]	; (8004e1c <UART_SetConfig+0x2d0>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cda:	2bc0      	cmp	r3, #192	; 0xc0
 8004cdc:	d013      	beq.n	8004d06 <UART_SetConfig+0x1ba>
 8004cde:	2bc0      	cmp	r3, #192	; 0xc0
 8004ce0:	d814      	bhi.n	8004d0c <UART_SetConfig+0x1c0>
 8004ce2:	2b80      	cmp	r3, #128	; 0x80
 8004ce4:	d009      	beq.n	8004cfa <UART_SetConfig+0x1ae>
 8004ce6:	2b80      	cmp	r3, #128	; 0x80
 8004ce8:	d810      	bhi.n	8004d0c <UART_SetConfig+0x1c0>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <UART_SetConfig+0x1a8>
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d006      	beq.n	8004d00 <UART_SetConfig+0x1b4>
 8004cf2:	e00b      	b.n	8004d0c <UART_SetConfig+0x1c0>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	77fb      	strb	r3, [r7, #31]
 8004cf8:	e0cb      	b.n	8004e92 <UART_SetConfig+0x346>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	77fb      	strb	r3, [r7, #31]
 8004cfe:	e0c8      	b.n	8004e92 <UART_SetConfig+0x346>
 8004d00:	2304      	movs	r3, #4
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e0c5      	b.n	8004e92 <UART_SetConfig+0x346>
 8004d06:	2308      	movs	r3, #8
 8004d08:	77fb      	strb	r3, [r7, #31]
 8004d0a:	e0c2      	b.n	8004e92 <UART_SetConfig+0x346>
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	77fb      	strb	r3, [r7, #31]
 8004d10:	e0bf      	b.n	8004e92 <UART_SetConfig+0x346>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a45      	ldr	r2, [pc, #276]	; (8004e2c <UART_SetConfig+0x2e0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d125      	bne.n	8004d68 <UART_SetConfig+0x21c>
 8004d1c:	4b3f      	ldr	r3, [pc, #252]	; (8004e1c <UART_SetConfig+0x2d0>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d2a:	d017      	beq.n	8004d5c <UART_SetConfig+0x210>
 8004d2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d30:	d817      	bhi.n	8004d62 <UART_SetConfig+0x216>
 8004d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d36:	d00b      	beq.n	8004d50 <UART_SetConfig+0x204>
 8004d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d3c:	d811      	bhi.n	8004d62 <UART_SetConfig+0x216>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <UART_SetConfig+0x1fe>
 8004d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d46:	d006      	beq.n	8004d56 <UART_SetConfig+0x20a>
 8004d48:	e00b      	b.n	8004d62 <UART_SetConfig+0x216>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	77fb      	strb	r3, [r7, #31]
 8004d4e:	e0a0      	b.n	8004e92 <UART_SetConfig+0x346>
 8004d50:	2302      	movs	r3, #2
 8004d52:	77fb      	strb	r3, [r7, #31]
 8004d54:	e09d      	b.n	8004e92 <UART_SetConfig+0x346>
 8004d56:	2304      	movs	r3, #4
 8004d58:	77fb      	strb	r3, [r7, #31]
 8004d5a:	e09a      	b.n	8004e92 <UART_SetConfig+0x346>
 8004d5c:	2308      	movs	r3, #8
 8004d5e:	77fb      	strb	r3, [r7, #31]
 8004d60:	e097      	b.n	8004e92 <UART_SetConfig+0x346>
 8004d62:	2310      	movs	r3, #16
 8004d64:	77fb      	strb	r3, [r7, #31]
 8004d66:	e094      	b.n	8004e92 <UART_SetConfig+0x346>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a30      	ldr	r2, [pc, #192]	; (8004e30 <UART_SetConfig+0x2e4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d125      	bne.n	8004dbe <UART_SetConfig+0x272>
 8004d72:	4b2a      	ldr	r3, [pc, #168]	; (8004e1c <UART_SetConfig+0x2d0>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d80:	d017      	beq.n	8004db2 <UART_SetConfig+0x266>
 8004d82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d86:	d817      	bhi.n	8004db8 <UART_SetConfig+0x26c>
 8004d88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8c:	d00b      	beq.n	8004da6 <UART_SetConfig+0x25a>
 8004d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d92:	d811      	bhi.n	8004db8 <UART_SetConfig+0x26c>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d003      	beq.n	8004da0 <UART_SetConfig+0x254>
 8004d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9c:	d006      	beq.n	8004dac <UART_SetConfig+0x260>
 8004d9e:	e00b      	b.n	8004db8 <UART_SetConfig+0x26c>
 8004da0:	2301      	movs	r3, #1
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e075      	b.n	8004e92 <UART_SetConfig+0x346>
 8004da6:	2302      	movs	r3, #2
 8004da8:	77fb      	strb	r3, [r7, #31]
 8004daa:	e072      	b.n	8004e92 <UART_SetConfig+0x346>
 8004dac:	2304      	movs	r3, #4
 8004dae:	77fb      	strb	r3, [r7, #31]
 8004db0:	e06f      	b.n	8004e92 <UART_SetConfig+0x346>
 8004db2:	2308      	movs	r3, #8
 8004db4:	77fb      	strb	r3, [r7, #31]
 8004db6:	e06c      	b.n	8004e92 <UART_SetConfig+0x346>
 8004db8:	2310      	movs	r3, #16
 8004dba:	77fb      	strb	r3, [r7, #31]
 8004dbc:	e069      	b.n	8004e92 <UART_SetConfig+0x346>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <UART_SetConfig+0x2e8>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d137      	bne.n	8004e38 <UART_SetConfig+0x2ec>
 8004dc8:	4b14      	ldr	r3, [pc, #80]	; (8004e1c <UART_SetConfig+0x2d0>)
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dce:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004dd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dd6:	d017      	beq.n	8004e08 <UART_SetConfig+0x2bc>
 8004dd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ddc:	d817      	bhi.n	8004e0e <UART_SetConfig+0x2c2>
 8004dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de2:	d00b      	beq.n	8004dfc <UART_SetConfig+0x2b0>
 8004de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de8:	d811      	bhi.n	8004e0e <UART_SetConfig+0x2c2>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <UART_SetConfig+0x2aa>
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df2:	d006      	beq.n	8004e02 <UART_SetConfig+0x2b6>
 8004df4:	e00b      	b.n	8004e0e <UART_SetConfig+0x2c2>
 8004df6:	2300      	movs	r3, #0
 8004df8:	77fb      	strb	r3, [r7, #31]
 8004dfa:	e04a      	b.n	8004e92 <UART_SetConfig+0x346>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e047      	b.n	8004e92 <UART_SetConfig+0x346>
 8004e02:	2304      	movs	r3, #4
 8004e04:	77fb      	strb	r3, [r7, #31]
 8004e06:	e044      	b.n	8004e92 <UART_SetConfig+0x346>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	77fb      	strb	r3, [r7, #31]
 8004e0c:	e041      	b.n	8004e92 <UART_SetConfig+0x346>
 8004e0e:	2310      	movs	r3, #16
 8004e10:	77fb      	strb	r3, [r7, #31]
 8004e12:	e03e      	b.n	8004e92 <UART_SetConfig+0x346>
 8004e14:	efff69f3 	.word	0xefff69f3
 8004e18:	40011000 	.word	0x40011000
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	40004400 	.word	0x40004400
 8004e24:	40004800 	.word	0x40004800
 8004e28:	40004c00 	.word	0x40004c00
 8004e2c:	40005000 	.word	0x40005000
 8004e30:	40011400 	.word	0x40011400
 8004e34:	40007800 	.word	0x40007800
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a71      	ldr	r2, [pc, #452]	; (8005004 <UART_SetConfig+0x4b8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d125      	bne.n	8004e8e <UART_SetConfig+0x342>
 8004e42:	4b71      	ldr	r3, [pc, #452]	; (8005008 <UART_SetConfig+0x4bc>)
 8004e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e50:	d017      	beq.n	8004e82 <UART_SetConfig+0x336>
 8004e52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004e56:	d817      	bhi.n	8004e88 <UART_SetConfig+0x33c>
 8004e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e5c:	d00b      	beq.n	8004e76 <UART_SetConfig+0x32a>
 8004e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e62:	d811      	bhi.n	8004e88 <UART_SetConfig+0x33c>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <UART_SetConfig+0x324>
 8004e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e6c:	d006      	beq.n	8004e7c <UART_SetConfig+0x330>
 8004e6e:	e00b      	b.n	8004e88 <UART_SetConfig+0x33c>
 8004e70:	2300      	movs	r3, #0
 8004e72:	77fb      	strb	r3, [r7, #31]
 8004e74:	e00d      	b.n	8004e92 <UART_SetConfig+0x346>
 8004e76:	2302      	movs	r3, #2
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	e00a      	b.n	8004e92 <UART_SetConfig+0x346>
 8004e7c:	2304      	movs	r3, #4
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e007      	b.n	8004e92 <UART_SetConfig+0x346>
 8004e82:	2308      	movs	r3, #8
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e004      	b.n	8004e92 <UART_SetConfig+0x346>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e001      	b.n	8004e92 <UART_SetConfig+0x346>
 8004e8e:	2310      	movs	r3, #16
 8004e90:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9a:	d15a      	bne.n	8004f52 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004e9c:	7ffb      	ldrb	r3, [r7, #31]
 8004e9e:	2b08      	cmp	r3, #8
 8004ea0:	d827      	bhi.n	8004ef2 <UART_SetConfig+0x3a6>
 8004ea2:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <UART_SetConfig+0x35c>)
 8004ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea8:	08004ecd 	.word	0x08004ecd
 8004eac:	08004ed5 	.word	0x08004ed5
 8004eb0:	08004edd 	.word	0x08004edd
 8004eb4:	08004ef3 	.word	0x08004ef3
 8004eb8:	08004ee3 	.word	0x08004ee3
 8004ebc:	08004ef3 	.word	0x08004ef3
 8004ec0:	08004ef3 	.word	0x08004ef3
 8004ec4:	08004ef3 	.word	0x08004ef3
 8004ec8:	08004eeb 	.word	0x08004eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ecc:	f7fd fd94 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 8004ed0:	61b8      	str	r0, [r7, #24]
        break;
 8004ed2:	e013      	b.n	8004efc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ed4:	f7fd fda4 	bl	8002a20 <HAL_RCC_GetPCLK2Freq>
 8004ed8:	61b8      	str	r0, [r7, #24]
        break;
 8004eda:	e00f      	b.n	8004efc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004edc:	4b4b      	ldr	r3, [pc, #300]	; (800500c <UART_SetConfig+0x4c0>)
 8004ede:	61bb      	str	r3, [r7, #24]
        break;
 8004ee0:	e00c      	b.n	8004efc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ee2:	f7fd fc9b 	bl	800281c <HAL_RCC_GetSysClockFreq>
 8004ee6:	61b8      	str	r0, [r7, #24]
        break;
 8004ee8:	e008      	b.n	8004efc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eee:	61bb      	str	r3, [r7, #24]
        break;
 8004ef0:	e004      	b.n	8004efc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	77bb      	strb	r3, [r7, #30]
        break;
 8004efa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d074      	beq.n	8004fec <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	005a      	lsls	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	441a      	add	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f16:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b0f      	cmp	r3, #15
 8004f1c:	d916      	bls.n	8004f4c <UART_SetConfig+0x400>
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f24:	d212      	bcs.n	8004f4c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f023 030f 	bic.w	r3, r3, #15
 8004f2e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	89fb      	ldrh	r3, [r7, #14]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	89fa      	ldrh	r2, [r7, #14]
 8004f48:	60da      	str	r2, [r3, #12]
 8004f4a:	e04f      	b.n	8004fec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	77bb      	strb	r3, [r7, #30]
 8004f50:	e04c      	b.n	8004fec <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f52:	7ffb      	ldrb	r3, [r7, #31]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d828      	bhi.n	8004faa <UART_SetConfig+0x45e>
 8004f58:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <UART_SetConfig+0x414>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004f95 	.word	0x08004f95
 8004f6c:	08004fab 	.word	0x08004fab
 8004f70:	08004f9b 	.word	0x08004f9b
 8004f74:	08004fab 	.word	0x08004fab
 8004f78:	08004fab 	.word	0x08004fab
 8004f7c:	08004fab 	.word	0x08004fab
 8004f80:	08004fa3 	.word	0x08004fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f84:	f7fd fd38 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 8004f88:	61b8      	str	r0, [r7, #24]
        break;
 8004f8a:	e013      	b.n	8004fb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f8c:	f7fd fd48 	bl	8002a20 <HAL_RCC_GetPCLK2Freq>
 8004f90:	61b8      	str	r0, [r7, #24]
        break;
 8004f92:	e00f      	b.n	8004fb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f94:	4b1d      	ldr	r3, [pc, #116]	; (800500c <UART_SetConfig+0x4c0>)
 8004f96:	61bb      	str	r3, [r7, #24]
        break;
 8004f98:	e00c      	b.n	8004fb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f9a:	f7fd fc3f 	bl	800281c <HAL_RCC_GetSysClockFreq>
 8004f9e:	61b8      	str	r0, [r7, #24]
        break;
 8004fa0:	e008      	b.n	8004fb4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fa6:	61bb      	str	r3, [r7, #24]
        break;
 8004fa8:	e004      	b.n	8004fb4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	77bb      	strb	r3, [r7, #30]
        break;
 8004fb2:	bf00      	nop
    }

    if (pclk != 0U)
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d018      	beq.n	8004fec <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	085a      	lsrs	r2, r3, #1
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	441a      	add	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b0f      	cmp	r3, #15
 8004fd2:	d909      	bls.n	8004fe8 <UART_SetConfig+0x49c>
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fda:	d205      	bcs.n	8004fe8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	60da      	str	r2, [r3, #12]
 8004fe6:	e001      	b.n	8004fec <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ff8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40007c00 	.word	0x40007c00
 8005008:	40023800 	.word	0x40023800
 800500c:	00f42400 	.word	0x00f42400

08005010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01a      	beq.n	8005126 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800510e:	d10a      	bne.n	8005126 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]
  }
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af02      	add	r7, sp, #8
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005164:	f7fc f8b4 	bl	80012d0 <HAL_GetTick>
 8005168:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b08      	cmp	r3, #8
 8005176:	d10e      	bne.n	8005196 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f82d 	bl	80051e6 <UART_WaitOnFlagUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e023      	b.n	80051de <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d10e      	bne.n	80051c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f817 	bl	80051e6 <UART_WaitOnFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e00d      	b.n	80051de <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b09c      	sub	sp, #112	; 0x70
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	603b      	str	r3, [r7, #0]
 80051f2:	4613      	mov	r3, r2
 80051f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f6:	e0a5      	b.n	8005344 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	f000 80a1 	beq.w	8005344 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005202:	f7fc f865 	bl	80012d0 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800520e:	429a      	cmp	r2, r3
 8005210:	d302      	bcc.n	8005218 <UART_WaitOnFlagUntilTimeout+0x32>
 8005212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005214:	2b00      	cmp	r3, #0
 8005216:	d13e      	bne.n	8005296 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005228:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800522c:	667b      	str	r3, [r7, #100]	; 0x64
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005236:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005238:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800523c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e6      	bne.n	8005218 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3308      	adds	r3, #8
 8005250:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	663b      	str	r3, [r7, #96]	; 0x60
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3308      	adds	r3, #8
 8005268:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800526a:	64ba      	str	r2, [r7, #72]	; 0x48
 800526c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e5      	bne.n	800524a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e067      	b.n	8005366 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d04f      	beq.n	8005344 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b2:	d147      	bne.n	8005344 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052bc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052dc:	637b      	str	r3, [r7, #52]	; 0x34
 80052de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e6      	bne.n	80052be <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3308      	adds	r3, #8
 80052f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f023 0301 	bic.w	r3, r3, #1
 8005306:	66bb      	str	r3, [r7, #104]	; 0x68
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3308      	adds	r3, #8
 800530e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005310:	623a      	str	r2, [r7, #32]
 8005312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	69f9      	ldr	r1, [r7, #28]
 8005316:	6a3a      	ldr	r2, [r7, #32]
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	61bb      	str	r3, [r7, #24]
   return(result);
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e5      	bne.n	80052f0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e010      	b.n	8005366 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69da      	ldr	r2, [r3, #28]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4013      	ands	r3, r2
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	429a      	cmp	r2, r3
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	429a      	cmp	r2, r3
 8005360:	f43f af4a 	beq.w	80051f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3770      	adds	r7, #112	; 0x70
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005370:	b084      	sub	sp, #16
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	f107 001c 	add.w	r0, r7, #28
 800537e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	2b01      	cmp	r3, #1
 8005386:	d120      	bne.n	80053ca <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	4b20      	ldr	r3, [pc, #128]	; (800541c <USB_CoreInit+0xac>)
 800539a:	4013      	ands	r3, r2
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d105      	bne.n	80053be <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fa92 	bl	80058e8 <USB_CoreReset>
 80053c4:	4603      	mov	r3, r0
 80053c6:	73fb      	strb	r3, [r7, #15]
 80053c8:	e010      	b.n	80053ec <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa86 	bl	80058e8 <USB_CoreReset>
 80053dc:	4603      	mov	r3, r0
 80053de:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d10b      	bne.n	800540a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f043 0206 	orr.w	r2, r3, #6
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f043 0220 	orr.w	r2, r3, #32
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800540a:	7bfb      	ldrb	r3, [r7, #15]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005416:	b004      	add	sp, #16
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	ffbdffbf 	.word	0xffbdffbf

08005420 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f023 0201 	bic.w	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	460b      	mov	r3, r1
 800544c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d115      	bne.n	8005490 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005470:	2001      	movs	r0, #1
 8005472:	f7fb ff39 	bl	80012e8 <HAL_Delay>
      ms++;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	3301      	adds	r3, #1
 800547a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 fa25 	bl	80058cc <USB_GetMode>
 8005482:	4603      	mov	r3, r0
 8005484:	2b01      	cmp	r3, #1
 8005486:	d01e      	beq.n	80054c6 <USB_SetCurrentMode+0x84>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b31      	cmp	r3, #49	; 0x31
 800548c:	d9f0      	bls.n	8005470 <USB_SetCurrentMode+0x2e>
 800548e:	e01a      	b.n	80054c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d115      	bne.n	80054c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80054a2:	2001      	movs	r0, #1
 80054a4:	f7fb ff20 	bl	80012e8 <HAL_Delay>
      ms++;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3301      	adds	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa0c 	bl	80058cc <USB_GetMode>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d005      	beq.n	80054c6 <USB_SetCurrentMode+0x84>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b31      	cmp	r3, #49	; 0x31
 80054be:	d9f0      	bls.n	80054a2 <USB_SetCurrentMode+0x60>
 80054c0:	e001      	b.n	80054c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e005      	b.n	80054d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b32      	cmp	r3, #50	; 0x32
 80054ca:	d101      	bne.n	80054d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e000      	b.n	80054d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054dc:	b084      	sub	sp, #16
 80054de:	b580      	push	{r7, lr}
 80054e0:	b086      	sub	sp, #24
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
 80054e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054f6:	2300      	movs	r3, #0
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	e009      	b.n	8005510 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	3340      	adds	r3, #64	; 0x40
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	2200      	movs	r2, #0
 8005508:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	3301      	adds	r3, #1
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	2b0e      	cmp	r3, #14
 8005514:	d9f2      	bls.n	80054fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d11c      	bne.n	8005556 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800552a:	f043 0302 	orr.w	r3, r3, #2
 800552e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	e005      	b.n	8005562 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005568:	461a      	mov	r2, r3
 800556a:	2300      	movs	r3, #0
 800556c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005574:	4619      	mov	r1, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557c:	461a      	mov	r2, r3
 800557e:	680b      	ldr	r3, [r1, #0]
 8005580:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005584:	2b01      	cmp	r3, #1
 8005586:	d10c      	bne.n	80055a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d104      	bne.n	8005598 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800558e:	2100      	movs	r1, #0
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f961 	bl	8005858 <USB_SetDevSpeed>
 8005596:	e008      	b.n	80055aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005598:	2101      	movs	r1, #1
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f95c 	bl	8005858 <USB_SetDevSpeed>
 80055a0:	e003      	b.n	80055aa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055a2:	2103      	movs	r1, #3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f957 	bl	8005858 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055aa:	2110      	movs	r1, #16
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f8f3 	bl	8005798 <USB_FlushTxFifo>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f91d 	bl	80057fc <USB_FlushRxFifo>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d2:	461a      	mov	r2, r3
 80055d4:	2300      	movs	r3, #0
 80055d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055de:	461a      	mov	r2, r3
 80055e0:	2300      	movs	r3, #0
 80055e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ea:	461a      	mov	r2, r3
 80055ec:	2300      	movs	r3, #0
 80055ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055f0:	2300      	movs	r3, #0
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	e043      	b.n	800567e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800560c:	d118      	bne.n	8005640 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005620:	461a      	mov	r2, r3
 8005622:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	e013      	b.n	8005652 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005636:	461a      	mov	r2, r3
 8005638:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	e008      	b.n	8005652 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564c:	461a      	mov	r2, r3
 800564e:	2300      	movs	r3, #0
 8005650:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4413      	add	r3, r2
 800565a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565e:	461a      	mov	r2, r3
 8005660:	2300      	movs	r3, #0
 8005662:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	461a      	mov	r2, r3
 8005672:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005676:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	3301      	adds	r3, #1
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	429a      	cmp	r2, r3
 8005684:	d3b7      	bcc.n	80055f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005686:	2300      	movs	r3, #0
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	e043      	b.n	8005714 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800569e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056a2:	d118      	bne.n	80056d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b6:	461a      	mov	r2, r3
 80056b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	e013      	b.n	80056e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056cc:	461a      	mov	r2, r3
 80056ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	e008      	b.n	80056e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e2:	461a      	mov	r2, r3
 80056e4:	2300      	movs	r3, #0
 80056e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f4:	461a      	mov	r2, r3
 80056f6:	2300      	movs	r3, #0
 80056f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005706:	461a      	mov	r2, r3
 8005708:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800570c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	3301      	adds	r3, #1
 8005712:	613b      	str	r3, [r7, #16]
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	429a      	cmp	r2, r3
 800571a:	d3b7      	bcc.n	800568c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800572a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800572e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800573c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	2b00      	cmp	r3, #0
 8005742:	d105      	bne.n	8005750 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699b      	ldr	r3, [r3, #24]
 8005748:	f043 0210 	orr.w	r2, r3, #16
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699a      	ldr	r2, [r3, #24]
 8005754:	4b0e      	ldr	r3, [pc, #56]	; (8005790 <USB_DevInit+0x2b4>)
 8005756:	4313      	orrs	r3, r2
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800575c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575e:	2b00      	cmp	r3, #0
 8005760:	d005      	beq.n	800576e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f043 0208 	orr.w	r2, r3, #8
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800576e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005770:	2b01      	cmp	r3, #1
 8005772:	d105      	bne.n	8005780 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699a      	ldr	r2, [r3, #24]
 8005778:	4b06      	ldr	r3, [pc, #24]	; (8005794 <USB_DevInit+0x2b8>)
 800577a:	4313      	orrs	r3, r2
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005780:	7dfb      	ldrb	r3, [r7, #23]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3718      	adds	r7, #24
 8005786:	46bd      	mov	sp, r7
 8005788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800578c:	b004      	add	sp, #16
 800578e:	4770      	bx	lr
 8005790:	803c3800 	.word	0x803c3800
 8005794:	40000004 	.word	0x40000004

08005798 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3301      	adds	r3, #1
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	4a12      	ldr	r2, [pc, #72]	; (80057f8 <USB_FlushTxFifo+0x60>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d901      	bls.n	80057b6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e01a      	b.n	80057ec <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	daf3      	bge.n	80057a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	019b      	lsls	r3, r3, #6
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3301      	adds	r3, #1
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <USB_FlushTxFifo+0x60>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d901      	bls.n	80057de <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e006      	b.n	80057ec <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d0f1      	beq.n	80057ce <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	00030d40 	.word	0x00030d40

080057fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3301      	adds	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	4a11      	ldr	r2, [pc, #68]	; (8005854 <USB_FlushRxFifo+0x58>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d901      	bls.n	8005818 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e017      	b.n	8005848 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	daf3      	bge.n	8005808 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2210      	movs	r2, #16
 8005828:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3301      	adds	r3, #1
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	4a08      	ldr	r2, [pc, #32]	; (8005854 <USB_FlushRxFifo+0x58>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d901      	bls.n	800583a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e006      	b.n	8005848 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0310 	and.w	r3, r3, #16
 8005842:	2b10      	cmp	r3, #16
 8005844:	d0f1      	beq.n	800582a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	00030d40 	.word	0x00030d40

08005858 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	68f9      	ldr	r1, [r7, #12]
 8005874:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005878:	4313      	orrs	r3, r2
 800587a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800588a:	b480      	push	{r7}
 800588c:	b085      	sub	sp, #20
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058a4:	f023 0303 	bic.w	r3, r3, #3
 80058a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b8:	f043 0302 	orr.w	r3, r3, #2
 80058bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	f003 0301 	and.w	r3, r3, #1
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	4a13      	ldr	r2, [pc, #76]	; (8005948 <USB_CoreReset+0x60>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d901      	bls.n	8005904 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e01a      	b.n	800593a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	daf3      	bge.n	80058f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f043 0201 	orr.w	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3301      	adds	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	4a09      	ldr	r2, [pc, #36]	; (8005948 <USB_CoreReset+0x60>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d901      	bls.n	800592c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e006      	b.n	800593a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b01      	cmp	r3, #1
 8005936:	d0f1      	beq.n	800591c <USB_CoreReset+0x34>

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	00030d40 	.word	0x00030d40

0800594c <__errno>:
 800594c:	4b01      	ldr	r3, [pc, #4]	; (8005954 <__errno+0x8>)
 800594e:	6818      	ldr	r0, [r3, #0]
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	2000000c 	.word	0x2000000c

08005958 <__libc_init_array>:
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	4d0d      	ldr	r5, [pc, #52]	; (8005990 <__libc_init_array+0x38>)
 800595c:	4c0d      	ldr	r4, [pc, #52]	; (8005994 <__libc_init_array+0x3c>)
 800595e:	1b64      	subs	r4, r4, r5
 8005960:	10a4      	asrs	r4, r4, #2
 8005962:	2600      	movs	r6, #0
 8005964:	42a6      	cmp	r6, r4
 8005966:	d109      	bne.n	800597c <__libc_init_array+0x24>
 8005968:	4d0b      	ldr	r5, [pc, #44]	; (8005998 <__libc_init_array+0x40>)
 800596a:	4c0c      	ldr	r4, [pc, #48]	; (800599c <__libc_init_array+0x44>)
 800596c:	f000 fc4e 	bl	800620c <_init>
 8005970:	1b64      	subs	r4, r4, r5
 8005972:	10a4      	asrs	r4, r4, #2
 8005974:	2600      	movs	r6, #0
 8005976:	42a6      	cmp	r6, r4
 8005978:	d105      	bne.n	8005986 <__libc_init_array+0x2e>
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005980:	4798      	blx	r3
 8005982:	3601      	adds	r6, #1
 8005984:	e7ee      	b.n	8005964 <__libc_init_array+0xc>
 8005986:	f855 3b04 	ldr.w	r3, [r5], #4
 800598a:	4798      	blx	r3
 800598c:	3601      	adds	r6, #1
 800598e:	e7f2      	b.n	8005976 <__libc_init_array+0x1e>
 8005990:	0800632c 	.word	0x0800632c
 8005994:	0800632c 	.word	0x0800632c
 8005998:	0800632c 	.word	0x0800632c
 800599c:	08006330 	.word	0x08006330

080059a0 <memset>:
 80059a0:	4402      	add	r2, r0
 80059a2:	4603      	mov	r3, r0
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d100      	bne.n	80059aa <memset+0xa>
 80059a8:	4770      	bx	lr
 80059aa:	f803 1b01 	strb.w	r1, [r3], #1
 80059ae:	e7f9      	b.n	80059a4 <memset+0x4>

080059b0 <siprintf>:
 80059b0:	b40e      	push	{r1, r2, r3}
 80059b2:	b500      	push	{lr}
 80059b4:	b09c      	sub	sp, #112	; 0x70
 80059b6:	ab1d      	add	r3, sp, #116	; 0x74
 80059b8:	9002      	str	r0, [sp, #8]
 80059ba:	9006      	str	r0, [sp, #24]
 80059bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80059c0:	4809      	ldr	r0, [pc, #36]	; (80059e8 <siprintf+0x38>)
 80059c2:	9107      	str	r1, [sp, #28]
 80059c4:	9104      	str	r1, [sp, #16]
 80059c6:	4909      	ldr	r1, [pc, #36]	; (80059ec <siprintf+0x3c>)
 80059c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80059cc:	9105      	str	r1, [sp, #20]
 80059ce:	6800      	ldr	r0, [r0, #0]
 80059d0:	9301      	str	r3, [sp, #4]
 80059d2:	a902      	add	r1, sp, #8
 80059d4:	f000 f868 	bl	8005aa8 <_svfiprintf_r>
 80059d8:	9b02      	ldr	r3, [sp, #8]
 80059da:	2200      	movs	r2, #0
 80059dc:	701a      	strb	r2, [r3, #0]
 80059de:	b01c      	add	sp, #112	; 0x70
 80059e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80059e4:	b003      	add	sp, #12
 80059e6:	4770      	bx	lr
 80059e8:	2000000c 	.word	0x2000000c
 80059ec:	ffff0208 	.word	0xffff0208

080059f0 <__ssputs_r>:
 80059f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f4:	688e      	ldr	r6, [r1, #8]
 80059f6:	429e      	cmp	r6, r3
 80059f8:	4682      	mov	sl, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	4690      	mov	r8, r2
 80059fe:	461f      	mov	r7, r3
 8005a00:	d838      	bhi.n	8005a74 <__ssputs_r+0x84>
 8005a02:	898a      	ldrh	r2, [r1, #12]
 8005a04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a08:	d032      	beq.n	8005a70 <__ssputs_r+0x80>
 8005a0a:	6825      	ldr	r5, [r4, #0]
 8005a0c:	6909      	ldr	r1, [r1, #16]
 8005a0e:	eba5 0901 	sub.w	r9, r5, r1
 8005a12:	6965      	ldr	r5, [r4, #20]
 8005a14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	444b      	add	r3, r9
 8005a20:	106d      	asrs	r5, r5, #1
 8005a22:	429d      	cmp	r5, r3
 8005a24:	bf38      	it	cc
 8005a26:	461d      	movcc	r5, r3
 8005a28:	0553      	lsls	r3, r2, #21
 8005a2a:	d531      	bpl.n	8005a90 <__ssputs_r+0xa0>
 8005a2c:	4629      	mov	r1, r5
 8005a2e:	f000 fb47 	bl	80060c0 <_malloc_r>
 8005a32:	4606      	mov	r6, r0
 8005a34:	b950      	cbnz	r0, 8005a4c <__ssputs_r+0x5c>
 8005a36:	230c      	movs	r3, #12
 8005a38:	f8ca 3000 	str.w	r3, [sl]
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a42:	81a3      	strh	r3, [r4, #12]
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a4c:	6921      	ldr	r1, [r4, #16]
 8005a4e:	464a      	mov	r2, r9
 8005a50:	f000 fabe 	bl	8005fd0 <memcpy>
 8005a54:	89a3      	ldrh	r3, [r4, #12]
 8005a56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5e:	81a3      	strh	r3, [r4, #12]
 8005a60:	6126      	str	r6, [r4, #16]
 8005a62:	6165      	str	r5, [r4, #20]
 8005a64:	444e      	add	r6, r9
 8005a66:	eba5 0509 	sub.w	r5, r5, r9
 8005a6a:	6026      	str	r6, [r4, #0]
 8005a6c:	60a5      	str	r5, [r4, #8]
 8005a6e:	463e      	mov	r6, r7
 8005a70:	42be      	cmp	r6, r7
 8005a72:	d900      	bls.n	8005a76 <__ssputs_r+0x86>
 8005a74:	463e      	mov	r6, r7
 8005a76:	4632      	mov	r2, r6
 8005a78:	6820      	ldr	r0, [r4, #0]
 8005a7a:	4641      	mov	r1, r8
 8005a7c:	f000 fab6 	bl	8005fec <memmove>
 8005a80:	68a3      	ldr	r3, [r4, #8]
 8005a82:	6822      	ldr	r2, [r4, #0]
 8005a84:	1b9b      	subs	r3, r3, r6
 8005a86:	4432      	add	r2, r6
 8005a88:	60a3      	str	r3, [r4, #8]
 8005a8a:	6022      	str	r2, [r4, #0]
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	e7db      	b.n	8005a48 <__ssputs_r+0x58>
 8005a90:	462a      	mov	r2, r5
 8005a92:	f000 fb6f 	bl	8006174 <_realloc_r>
 8005a96:	4606      	mov	r6, r0
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d1e1      	bne.n	8005a60 <__ssputs_r+0x70>
 8005a9c:	6921      	ldr	r1, [r4, #16]
 8005a9e:	4650      	mov	r0, sl
 8005aa0:	f000 fabe 	bl	8006020 <_free_r>
 8005aa4:	e7c7      	b.n	8005a36 <__ssputs_r+0x46>
	...

08005aa8 <_svfiprintf_r>:
 8005aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	4698      	mov	r8, r3
 8005aae:	898b      	ldrh	r3, [r1, #12]
 8005ab0:	061b      	lsls	r3, r3, #24
 8005ab2:	b09d      	sub	sp, #116	; 0x74
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	460d      	mov	r5, r1
 8005ab8:	4614      	mov	r4, r2
 8005aba:	d50e      	bpl.n	8005ada <_svfiprintf_r+0x32>
 8005abc:	690b      	ldr	r3, [r1, #16]
 8005abe:	b963      	cbnz	r3, 8005ada <_svfiprintf_r+0x32>
 8005ac0:	2140      	movs	r1, #64	; 0x40
 8005ac2:	f000 fafd 	bl	80060c0 <_malloc_r>
 8005ac6:	6028      	str	r0, [r5, #0]
 8005ac8:	6128      	str	r0, [r5, #16]
 8005aca:	b920      	cbnz	r0, 8005ad6 <_svfiprintf_r+0x2e>
 8005acc:	230c      	movs	r3, #12
 8005ace:	603b      	str	r3, [r7, #0]
 8005ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad4:	e0d1      	b.n	8005c7a <_svfiprintf_r+0x1d2>
 8005ad6:	2340      	movs	r3, #64	; 0x40
 8005ad8:	616b      	str	r3, [r5, #20]
 8005ada:	2300      	movs	r3, #0
 8005adc:	9309      	str	r3, [sp, #36]	; 0x24
 8005ade:	2320      	movs	r3, #32
 8005ae0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ae4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ae8:	2330      	movs	r3, #48	; 0x30
 8005aea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005c94 <_svfiprintf_r+0x1ec>
 8005aee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005af2:	f04f 0901 	mov.w	r9, #1
 8005af6:	4623      	mov	r3, r4
 8005af8:	469a      	mov	sl, r3
 8005afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005afe:	b10a      	cbz	r2, 8005b04 <_svfiprintf_r+0x5c>
 8005b00:	2a25      	cmp	r2, #37	; 0x25
 8005b02:	d1f9      	bne.n	8005af8 <_svfiprintf_r+0x50>
 8005b04:	ebba 0b04 	subs.w	fp, sl, r4
 8005b08:	d00b      	beq.n	8005b22 <_svfiprintf_r+0x7a>
 8005b0a:	465b      	mov	r3, fp
 8005b0c:	4622      	mov	r2, r4
 8005b0e:	4629      	mov	r1, r5
 8005b10:	4638      	mov	r0, r7
 8005b12:	f7ff ff6d 	bl	80059f0 <__ssputs_r>
 8005b16:	3001      	adds	r0, #1
 8005b18:	f000 80aa 	beq.w	8005c70 <_svfiprintf_r+0x1c8>
 8005b1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b1e:	445a      	add	r2, fp
 8005b20:	9209      	str	r2, [sp, #36]	; 0x24
 8005b22:	f89a 3000 	ldrb.w	r3, [sl]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 80a2 	beq.w	8005c70 <_svfiprintf_r+0x1c8>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b36:	f10a 0a01 	add.w	sl, sl, #1
 8005b3a:	9304      	str	r3, [sp, #16]
 8005b3c:	9307      	str	r3, [sp, #28]
 8005b3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b42:	931a      	str	r3, [sp, #104]	; 0x68
 8005b44:	4654      	mov	r4, sl
 8005b46:	2205      	movs	r2, #5
 8005b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b4c:	4851      	ldr	r0, [pc, #324]	; (8005c94 <_svfiprintf_r+0x1ec>)
 8005b4e:	f7fa fb77 	bl	8000240 <memchr>
 8005b52:	9a04      	ldr	r2, [sp, #16]
 8005b54:	b9d8      	cbnz	r0, 8005b8e <_svfiprintf_r+0xe6>
 8005b56:	06d0      	lsls	r0, r2, #27
 8005b58:	bf44      	itt	mi
 8005b5a:	2320      	movmi	r3, #32
 8005b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b60:	0711      	lsls	r1, r2, #28
 8005b62:	bf44      	itt	mi
 8005b64:	232b      	movmi	r3, #43	; 0x2b
 8005b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8005b70:	d015      	beq.n	8005b9e <_svfiprintf_r+0xf6>
 8005b72:	9a07      	ldr	r2, [sp, #28]
 8005b74:	4654      	mov	r4, sl
 8005b76:	2000      	movs	r0, #0
 8005b78:	f04f 0c0a 	mov.w	ip, #10
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b82:	3b30      	subs	r3, #48	; 0x30
 8005b84:	2b09      	cmp	r3, #9
 8005b86:	d94e      	bls.n	8005c26 <_svfiprintf_r+0x17e>
 8005b88:	b1b0      	cbz	r0, 8005bb8 <_svfiprintf_r+0x110>
 8005b8a:	9207      	str	r2, [sp, #28]
 8005b8c:	e014      	b.n	8005bb8 <_svfiprintf_r+0x110>
 8005b8e:	eba0 0308 	sub.w	r3, r0, r8
 8005b92:	fa09 f303 	lsl.w	r3, r9, r3
 8005b96:	4313      	orrs	r3, r2
 8005b98:	9304      	str	r3, [sp, #16]
 8005b9a:	46a2      	mov	sl, r4
 8005b9c:	e7d2      	b.n	8005b44 <_svfiprintf_r+0x9c>
 8005b9e:	9b03      	ldr	r3, [sp, #12]
 8005ba0:	1d19      	adds	r1, r3, #4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	9103      	str	r1, [sp, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	bfbb      	ittet	lt
 8005baa:	425b      	neglt	r3, r3
 8005bac:	f042 0202 	orrlt.w	r2, r2, #2
 8005bb0:	9307      	strge	r3, [sp, #28]
 8005bb2:	9307      	strlt	r3, [sp, #28]
 8005bb4:	bfb8      	it	lt
 8005bb6:	9204      	strlt	r2, [sp, #16]
 8005bb8:	7823      	ldrb	r3, [r4, #0]
 8005bba:	2b2e      	cmp	r3, #46	; 0x2e
 8005bbc:	d10c      	bne.n	8005bd8 <_svfiprintf_r+0x130>
 8005bbe:	7863      	ldrb	r3, [r4, #1]
 8005bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8005bc2:	d135      	bne.n	8005c30 <_svfiprintf_r+0x188>
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	1d1a      	adds	r2, r3, #4
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	9203      	str	r2, [sp, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	bfb8      	it	lt
 8005bd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005bd4:	3402      	adds	r4, #2
 8005bd6:	9305      	str	r3, [sp, #20]
 8005bd8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ca4 <_svfiprintf_r+0x1fc>
 8005bdc:	7821      	ldrb	r1, [r4, #0]
 8005bde:	2203      	movs	r2, #3
 8005be0:	4650      	mov	r0, sl
 8005be2:	f7fa fb2d 	bl	8000240 <memchr>
 8005be6:	b140      	cbz	r0, 8005bfa <_svfiprintf_r+0x152>
 8005be8:	2340      	movs	r3, #64	; 0x40
 8005bea:	eba0 000a 	sub.w	r0, r0, sl
 8005bee:	fa03 f000 	lsl.w	r0, r3, r0
 8005bf2:	9b04      	ldr	r3, [sp, #16]
 8005bf4:	4303      	orrs	r3, r0
 8005bf6:	3401      	adds	r4, #1
 8005bf8:	9304      	str	r3, [sp, #16]
 8005bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bfe:	4826      	ldr	r0, [pc, #152]	; (8005c98 <_svfiprintf_r+0x1f0>)
 8005c00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c04:	2206      	movs	r2, #6
 8005c06:	f7fa fb1b 	bl	8000240 <memchr>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d038      	beq.n	8005c80 <_svfiprintf_r+0x1d8>
 8005c0e:	4b23      	ldr	r3, [pc, #140]	; (8005c9c <_svfiprintf_r+0x1f4>)
 8005c10:	bb1b      	cbnz	r3, 8005c5a <_svfiprintf_r+0x1b2>
 8005c12:	9b03      	ldr	r3, [sp, #12]
 8005c14:	3307      	adds	r3, #7
 8005c16:	f023 0307 	bic.w	r3, r3, #7
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	9303      	str	r3, [sp, #12]
 8005c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c20:	4433      	add	r3, r6
 8005c22:	9309      	str	r3, [sp, #36]	; 0x24
 8005c24:	e767      	b.n	8005af6 <_svfiprintf_r+0x4e>
 8005c26:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c2a:	460c      	mov	r4, r1
 8005c2c:	2001      	movs	r0, #1
 8005c2e:	e7a5      	b.n	8005b7c <_svfiprintf_r+0xd4>
 8005c30:	2300      	movs	r3, #0
 8005c32:	3401      	adds	r4, #1
 8005c34:	9305      	str	r3, [sp, #20]
 8005c36:	4619      	mov	r1, r3
 8005c38:	f04f 0c0a 	mov.w	ip, #10
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c42:	3a30      	subs	r2, #48	; 0x30
 8005c44:	2a09      	cmp	r2, #9
 8005c46:	d903      	bls.n	8005c50 <_svfiprintf_r+0x1a8>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0c5      	beq.n	8005bd8 <_svfiprintf_r+0x130>
 8005c4c:	9105      	str	r1, [sp, #20]
 8005c4e:	e7c3      	b.n	8005bd8 <_svfiprintf_r+0x130>
 8005c50:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c54:	4604      	mov	r4, r0
 8005c56:	2301      	movs	r3, #1
 8005c58:	e7f0      	b.n	8005c3c <_svfiprintf_r+0x194>
 8005c5a:	ab03      	add	r3, sp, #12
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	462a      	mov	r2, r5
 8005c60:	4b0f      	ldr	r3, [pc, #60]	; (8005ca0 <_svfiprintf_r+0x1f8>)
 8005c62:	a904      	add	r1, sp, #16
 8005c64:	4638      	mov	r0, r7
 8005c66:	f3af 8000 	nop.w
 8005c6a:	1c42      	adds	r2, r0, #1
 8005c6c:	4606      	mov	r6, r0
 8005c6e:	d1d6      	bne.n	8005c1e <_svfiprintf_r+0x176>
 8005c70:	89ab      	ldrh	r3, [r5, #12]
 8005c72:	065b      	lsls	r3, r3, #25
 8005c74:	f53f af2c 	bmi.w	8005ad0 <_svfiprintf_r+0x28>
 8005c78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c7a:	b01d      	add	sp, #116	; 0x74
 8005c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c80:	ab03      	add	r3, sp, #12
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	462a      	mov	r2, r5
 8005c86:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <_svfiprintf_r+0x1f8>)
 8005c88:	a904      	add	r1, sp, #16
 8005c8a:	4638      	mov	r0, r7
 8005c8c:	f000 f87a 	bl	8005d84 <_printf_i>
 8005c90:	e7eb      	b.n	8005c6a <_svfiprintf_r+0x1c2>
 8005c92:	bf00      	nop
 8005c94:	080062f0 	.word	0x080062f0
 8005c98:	080062fa 	.word	0x080062fa
 8005c9c:	00000000 	.word	0x00000000
 8005ca0:	080059f1 	.word	0x080059f1
 8005ca4:	080062f6 	.word	0x080062f6

08005ca8 <_printf_common>:
 8005ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cac:	4616      	mov	r6, r2
 8005cae:	4699      	mov	r9, r3
 8005cb0:	688a      	ldr	r2, [r1, #8]
 8005cb2:	690b      	ldr	r3, [r1, #16]
 8005cb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	bfb8      	it	lt
 8005cbc:	4613      	movlt	r3, r2
 8005cbe:	6033      	str	r3, [r6, #0]
 8005cc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cc4:	4607      	mov	r7, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	b10a      	cbz	r2, 8005cce <_printf_common+0x26>
 8005cca:	3301      	adds	r3, #1
 8005ccc:	6033      	str	r3, [r6, #0]
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	0699      	lsls	r1, r3, #26
 8005cd2:	bf42      	ittt	mi
 8005cd4:	6833      	ldrmi	r3, [r6, #0]
 8005cd6:	3302      	addmi	r3, #2
 8005cd8:	6033      	strmi	r3, [r6, #0]
 8005cda:	6825      	ldr	r5, [r4, #0]
 8005cdc:	f015 0506 	ands.w	r5, r5, #6
 8005ce0:	d106      	bne.n	8005cf0 <_printf_common+0x48>
 8005ce2:	f104 0a19 	add.w	sl, r4, #25
 8005ce6:	68e3      	ldr	r3, [r4, #12]
 8005ce8:	6832      	ldr	r2, [r6, #0]
 8005cea:	1a9b      	subs	r3, r3, r2
 8005cec:	42ab      	cmp	r3, r5
 8005cee:	dc26      	bgt.n	8005d3e <_printf_common+0x96>
 8005cf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cf4:	1e13      	subs	r3, r2, #0
 8005cf6:	6822      	ldr	r2, [r4, #0]
 8005cf8:	bf18      	it	ne
 8005cfa:	2301      	movne	r3, #1
 8005cfc:	0692      	lsls	r2, r2, #26
 8005cfe:	d42b      	bmi.n	8005d58 <_printf_common+0xb0>
 8005d00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d04:	4649      	mov	r1, r9
 8005d06:	4638      	mov	r0, r7
 8005d08:	47c0      	blx	r8
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	d01e      	beq.n	8005d4c <_printf_common+0xa4>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	68e5      	ldr	r5, [r4, #12]
 8005d12:	6832      	ldr	r2, [r6, #0]
 8005d14:	f003 0306 	and.w	r3, r3, #6
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	bf08      	it	eq
 8005d1c:	1aad      	subeq	r5, r5, r2
 8005d1e:	68a3      	ldr	r3, [r4, #8]
 8005d20:	6922      	ldr	r2, [r4, #16]
 8005d22:	bf0c      	ite	eq
 8005d24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d28:	2500      	movne	r5, #0
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	bfc4      	itt	gt
 8005d2e:	1a9b      	subgt	r3, r3, r2
 8005d30:	18ed      	addgt	r5, r5, r3
 8005d32:	2600      	movs	r6, #0
 8005d34:	341a      	adds	r4, #26
 8005d36:	42b5      	cmp	r5, r6
 8005d38:	d11a      	bne.n	8005d70 <_printf_common+0xc8>
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	e008      	b.n	8005d50 <_printf_common+0xa8>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4652      	mov	r2, sl
 8005d42:	4649      	mov	r1, r9
 8005d44:	4638      	mov	r0, r7
 8005d46:	47c0      	blx	r8
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d103      	bne.n	8005d54 <_printf_common+0xac>
 8005d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d54:	3501      	adds	r5, #1
 8005d56:	e7c6      	b.n	8005ce6 <_printf_common+0x3e>
 8005d58:	18e1      	adds	r1, r4, r3
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	2030      	movs	r0, #48	; 0x30
 8005d5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d62:	4422      	add	r2, r4
 8005d64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d6c:	3302      	adds	r3, #2
 8005d6e:	e7c7      	b.n	8005d00 <_printf_common+0x58>
 8005d70:	2301      	movs	r3, #1
 8005d72:	4622      	mov	r2, r4
 8005d74:	4649      	mov	r1, r9
 8005d76:	4638      	mov	r0, r7
 8005d78:	47c0      	blx	r8
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	d0e6      	beq.n	8005d4c <_printf_common+0xa4>
 8005d7e:	3601      	adds	r6, #1
 8005d80:	e7d9      	b.n	8005d36 <_printf_common+0x8e>
	...

08005d84 <_printf_i>:
 8005d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	460c      	mov	r4, r1
 8005d8a:	4691      	mov	r9, r2
 8005d8c:	7e27      	ldrb	r7, [r4, #24]
 8005d8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d90:	2f78      	cmp	r7, #120	; 0x78
 8005d92:	4680      	mov	r8, r0
 8005d94:	469a      	mov	sl, r3
 8005d96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d9a:	d807      	bhi.n	8005dac <_printf_i+0x28>
 8005d9c:	2f62      	cmp	r7, #98	; 0x62
 8005d9e:	d80a      	bhi.n	8005db6 <_printf_i+0x32>
 8005da0:	2f00      	cmp	r7, #0
 8005da2:	f000 80d8 	beq.w	8005f56 <_printf_i+0x1d2>
 8005da6:	2f58      	cmp	r7, #88	; 0x58
 8005da8:	f000 80a3 	beq.w	8005ef2 <_printf_i+0x16e>
 8005dac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005db0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005db4:	e03a      	b.n	8005e2c <_printf_i+0xa8>
 8005db6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dba:	2b15      	cmp	r3, #21
 8005dbc:	d8f6      	bhi.n	8005dac <_printf_i+0x28>
 8005dbe:	a001      	add	r0, pc, #4	; (adr r0, 8005dc4 <_printf_i+0x40>)
 8005dc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005dc4:	08005e1d 	.word	0x08005e1d
 8005dc8:	08005e31 	.word	0x08005e31
 8005dcc:	08005dad 	.word	0x08005dad
 8005dd0:	08005dad 	.word	0x08005dad
 8005dd4:	08005dad 	.word	0x08005dad
 8005dd8:	08005dad 	.word	0x08005dad
 8005ddc:	08005e31 	.word	0x08005e31
 8005de0:	08005dad 	.word	0x08005dad
 8005de4:	08005dad 	.word	0x08005dad
 8005de8:	08005dad 	.word	0x08005dad
 8005dec:	08005dad 	.word	0x08005dad
 8005df0:	08005f3d 	.word	0x08005f3d
 8005df4:	08005e61 	.word	0x08005e61
 8005df8:	08005f1f 	.word	0x08005f1f
 8005dfc:	08005dad 	.word	0x08005dad
 8005e00:	08005dad 	.word	0x08005dad
 8005e04:	08005f5f 	.word	0x08005f5f
 8005e08:	08005dad 	.word	0x08005dad
 8005e0c:	08005e61 	.word	0x08005e61
 8005e10:	08005dad 	.word	0x08005dad
 8005e14:	08005dad 	.word	0x08005dad
 8005e18:	08005f27 	.word	0x08005f27
 8005e1c:	680b      	ldr	r3, [r1, #0]
 8005e1e:	1d1a      	adds	r2, r3, #4
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	600a      	str	r2, [r1, #0]
 8005e24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e0a3      	b.n	8005f78 <_printf_i+0x1f4>
 8005e30:	6825      	ldr	r5, [r4, #0]
 8005e32:	6808      	ldr	r0, [r1, #0]
 8005e34:	062e      	lsls	r6, r5, #24
 8005e36:	f100 0304 	add.w	r3, r0, #4
 8005e3a:	d50a      	bpl.n	8005e52 <_printf_i+0xce>
 8005e3c:	6805      	ldr	r5, [r0, #0]
 8005e3e:	600b      	str	r3, [r1, #0]
 8005e40:	2d00      	cmp	r5, #0
 8005e42:	da03      	bge.n	8005e4c <_printf_i+0xc8>
 8005e44:	232d      	movs	r3, #45	; 0x2d
 8005e46:	426d      	negs	r5, r5
 8005e48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e4c:	485e      	ldr	r0, [pc, #376]	; (8005fc8 <_printf_i+0x244>)
 8005e4e:	230a      	movs	r3, #10
 8005e50:	e019      	b.n	8005e86 <_printf_i+0x102>
 8005e52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005e56:	6805      	ldr	r5, [r0, #0]
 8005e58:	600b      	str	r3, [r1, #0]
 8005e5a:	bf18      	it	ne
 8005e5c:	b22d      	sxthne	r5, r5
 8005e5e:	e7ef      	b.n	8005e40 <_printf_i+0xbc>
 8005e60:	680b      	ldr	r3, [r1, #0]
 8005e62:	6825      	ldr	r5, [r4, #0]
 8005e64:	1d18      	adds	r0, r3, #4
 8005e66:	6008      	str	r0, [r1, #0]
 8005e68:	0628      	lsls	r0, r5, #24
 8005e6a:	d501      	bpl.n	8005e70 <_printf_i+0xec>
 8005e6c:	681d      	ldr	r5, [r3, #0]
 8005e6e:	e002      	b.n	8005e76 <_printf_i+0xf2>
 8005e70:	0669      	lsls	r1, r5, #25
 8005e72:	d5fb      	bpl.n	8005e6c <_printf_i+0xe8>
 8005e74:	881d      	ldrh	r5, [r3, #0]
 8005e76:	4854      	ldr	r0, [pc, #336]	; (8005fc8 <_printf_i+0x244>)
 8005e78:	2f6f      	cmp	r7, #111	; 0x6f
 8005e7a:	bf0c      	ite	eq
 8005e7c:	2308      	moveq	r3, #8
 8005e7e:	230a      	movne	r3, #10
 8005e80:	2100      	movs	r1, #0
 8005e82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e86:	6866      	ldr	r6, [r4, #4]
 8005e88:	60a6      	str	r6, [r4, #8]
 8005e8a:	2e00      	cmp	r6, #0
 8005e8c:	bfa2      	ittt	ge
 8005e8e:	6821      	ldrge	r1, [r4, #0]
 8005e90:	f021 0104 	bicge.w	r1, r1, #4
 8005e94:	6021      	strge	r1, [r4, #0]
 8005e96:	b90d      	cbnz	r5, 8005e9c <_printf_i+0x118>
 8005e98:	2e00      	cmp	r6, #0
 8005e9a:	d04d      	beq.n	8005f38 <_printf_i+0x1b4>
 8005e9c:	4616      	mov	r6, r2
 8005e9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ea2:	fb03 5711 	mls	r7, r3, r1, r5
 8005ea6:	5dc7      	ldrb	r7, [r0, r7]
 8005ea8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005eac:	462f      	mov	r7, r5
 8005eae:	42bb      	cmp	r3, r7
 8005eb0:	460d      	mov	r5, r1
 8005eb2:	d9f4      	bls.n	8005e9e <_printf_i+0x11a>
 8005eb4:	2b08      	cmp	r3, #8
 8005eb6:	d10b      	bne.n	8005ed0 <_printf_i+0x14c>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	07df      	lsls	r7, r3, #31
 8005ebc:	d508      	bpl.n	8005ed0 <_printf_i+0x14c>
 8005ebe:	6923      	ldr	r3, [r4, #16]
 8005ec0:	6861      	ldr	r1, [r4, #4]
 8005ec2:	4299      	cmp	r1, r3
 8005ec4:	bfde      	ittt	le
 8005ec6:	2330      	movle	r3, #48	; 0x30
 8005ec8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ecc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ed0:	1b92      	subs	r2, r2, r6
 8005ed2:	6122      	str	r2, [r4, #16]
 8005ed4:	f8cd a000 	str.w	sl, [sp]
 8005ed8:	464b      	mov	r3, r9
 8005eda:	aa03      	add	r2, sp, #12
 8005edc:	4621      	mov	r1, r4
 8005ede:	4640      	mov	r0, r8
 8005ee0:	f7ff fee2 	bl	8005ca8 <_printf_common>
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d14c      	bne.n	8005f82 <_printf_i+0x1fe>
 8005ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eec:	b004      	add	sp, #16
 8005eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef2:	4835      	ldr	r0, [pc, #212]	; (8005fc8 <_printf_i+0x244>)
 8005ef4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	680e      	ldr	r6, [r1, #0]
 8005efc:	061f      	lsls	r7, r3, #24
 8005efe:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f02:	600e      	str	r6, [r1, #0]
 8005f04:	d514      	bpl.n	8005f30 <_printf_i+0x1ac>
 8005f06:	07d9      	lsls	r1, r3, #31
 8005f08:	bf44      	itt	mi
 8005f0a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f0e:	6023      	strmi	r3, [r4, #0]
 8005f10:	b91d      	cbnz	r5, 8005f1a <_printf_i+0x196>
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	f023 0320 	bic.w	r3, r3, #32
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	2310      	movs	r3, #16
 8005f1c:	e7b0      	b.n	8005e80 <_printf_i+0xfc>
 8005f1e:	6823      	ldr	r3, [r4, #0]
 8005f20:	f043 0320 	orr.w	r3, r3, #32
 8005f24:	6023      	str	r3, [r4, #0]
 8005f26:	2378      	movs	r3, #120	; 0x78
 8005f28:	4828      	ldr	r0, [pc, #160]	; (8005fcc <_printf_i+0x248>)
 8005f2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f2e:	e7e3      	b.n	8005ef8 <_printf_i+0x174>
 8005f30:	065e      	lsls	r6, r3, #25
 8005f32:	bf48      	it	mi
 8005f34:	b2ad      	uxthmi	r5, r5
 8005f36:	e7e6      	b.n	8005f06 <_printf_i+0x182>
 8005f38:	4616      	mov	r6, r2
 8005f3a:	e7bb      	b.n	8005eb4 <_printf_i+0x130>
 8005f3c:	680b      	ldr	r3, [r1, #0]
 8005f3e:	6826      	ldr	r6, [r4, #0]
 8005f40:	6960      	ldr	r0, [r4, #20]
 8005f42:	1d1d      	adds	r5, r3, #4
 8005f44:	600d      	str	r5, [r1, #0]
 8005f46:	0635      	lsls	r5, r6, #24
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	d501      	bpl.n	8005f50 <_printf_i+0x1cc>
 8005f4c:	6018      	str	r0, [r3, #0]
 8005f4e:	e002      	b.n	8005f56 <_printf_i+0x1d2>
 8005f50:	0671      	lsls	r1, r6, #25
 8005f52:	d5fb      	bpl.n	8005f4c <_printf_i+0x1c8>
 8005f54:	8018      	strh	r0, [r3, #0]
 8005f56:	2300      	movs	r3, #0
 8005f58:	6123      	str	r3, [r4, #16]
 8005f5a:	4616      	mov	r6, r2
 8005f5c:	e7ba      	b.n	8005ed4 <_printf_i+0x150>
 8005f5e:	680b      	ldr	r3, [r1, #0]
 8005f60:	1d1a      	adds	r2, r3, #4
 8005f62:	600a      	str	r2, [r1, #0]
 8005f64:	681e      	ldr	r6, [r3, #0]
 8005f66:	6862      	ldr	r2, [r4, #4]
 8005f68:	2100      	movs	r1, #0
 8005f6a:	4630      	mov	r0, r6
 8005f6c:	f7fa f968 	bl	8000240 <memchr>
 8005f70:	b108      	cbz	r0, 8005f76 <_printf_i+0x1f2>
 8005f72:	1b80      	subs	r0, r0, r6
 8005f74:	6060      	str	r0, [r4, #4]
 8005f76:	6863      	ldr	r3, [r4, #4]
 8005f78:	6123      	str	r3, [r4, #16]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f80:	e7a8      	b.n	8005ed4 <_printf_i+0x150>
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	4632      	mov	r2, r6
 8005f86:	4649      	mov	r1, r9
 8005f88:	4640      	mov	r0, r8
 8005f8a:	47d0      	blx	sl
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d0ab      	beq.n	8005ee8 <_printf_i+0x164>
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	079b      	lsls	r3, r3, #30
 8005f94:	d413      	bmi.n	8005fbe <_printf_i+0x23a>
 8005f96:	68e0      	ldr	r0, [r4, #12]
 8005f98:	9b03      	ldr	r3, [sp, #12]
 8005f9a:	4298      	cmp	r0, r3
 8005f9c:	bfb8      	it	lt
 8005f9e:	4618      	movlt	r0, r3
 8005fa0:	e7a4      	b.n	8005eec <_printf_i+0x168>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	4632      	mov	r2, r6
 8005fa6:	4649      	mov	r1, r9
 8005fa8:	4640      	mov	r0, r8
 8005faa:	47d0      	blx	sl
 8005fac:	3001      	adds	r0, #1
 8005fae:	d09b      	beq.n	8005ee8 <_printf_i+0x164>
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	68e3      	ldr	r3, [r4, #12]
 8005fb4:	9903      	ldr	r1, [sp, #12]
 8005fb6:	1a5b      	subs	r3, r3, r1
 8005fb8:	42ab      	cmp	r3, r5
 8005fba:	dcf2      	bgt.n	8005fa2 <_printf_i+0x21e>
 8005fbc:	e7eb      	b.n	8005f96 <_printf_i+0x212>
 8005fbe:	2500      	movs	r5, #0
 8005fc0:	f104 0619 	add.w	r6, r4, #25
 8005fc4:	e7f5      	b.n	8005fb2 <_printf_i+0x22e>
 8005fc6:	bf00      	nop
 8005fc8:	08006301 	.word	0x08006301
 8005fcc:	08006312 	.word	0x08006312

08005fd0 <memcpy>:
 8005fd0:	440a      	add	r2, r1
 8005fd2:	4291      	cmp	r1, r2
 8005fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fd8:	d100      	bne.n	8005fdc <memcpy+0xc>
 8005fda:	4770      	bx	lr
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fe6:	4291      	cmp	r1, r2
 8005fe8:	d1f9      	bne.n	8005fde <memcpy+0xe>
 8005fea:	bd10      	pop	{r4, pc}

08005fec <memmove>:
 8005fec:	4288      	cmp	r0, r1
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	eb01 0402 	add.w	r4, r1, r2
 8005ff4:	d902      	bls.n	8005ffc <memmove+0x10>
 8005ff6:	4284      	cmp	r4, r0
 8005ff8:	4623      	mov	r3, r4
 8005ffa:	d807      	bhi.n	800600c <memmove+0x20>
 8005ffc:	1e43      	subs	r3, r0, #1
 8005ffe:	42a1      	cmp	r1, r4
 8006000:	d008      	beq.n	8006014 <memmove+0x28>
 8006002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800600a:	e7f8      	b.n	8005ffe <memmove+0x12>
 800600c:	4402      	add	r2, r0
 800600e:	4601      	mov	r1, r0
 8006010:	428a      	cmp	r2, r1
 8006012:	d100      	bne.n	8006016 <memmove+0x2a>
 8006014:	bd10      	pop	{r4, pc}
 8006016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800601a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800601e:	e7f7      	b.n	8006010 <memmove+0x24>

08006020 <_free_r>:
 8006020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006022:	2900      	cmp	r1, #0
 8006024:	d048      	beq.n	80060b8 <_free_r+0x98>
 8006026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800602a:	9001      	str	r0, [sp, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	f1a1 0404 	sub.w	r4, r1, #4
 8006032:	bfb8      	it	lt
 8006034:	18e4      	addlt	r4, r4, r3
 8006036:	f000 f8d3 	bl	80061e0 <__malloc_lock>
 800603a:	4a20      	ldr	r2, [pc, #128]	; (80060bc <_free_r+0x9c>)
 800603c:	9801      	ldr	r0, [sp, #4]
 800603e:	6813      	ldr	r3, [r2, #0]
 8006040:	4615      	mov	r5, r2
 8006042:	b933      	cbnz	r3, 8006052 <_free_r+0x32>
 8006044:	6063      	str	r3, [r4, #4]
 8006046:	6014      	str	r4, [r2, #0]
 8006048:	b003      	add	sp, #12
 800604a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800604e:	f000 b8cd 	b.w	80061ec <__malloc_unlock>
 8006052:	42a3      	cmp	r3, r4
 8006054:	d90b      	bls.n	800606e <_free_r+0x4e>
 8006056:	6821      	ldr	r1, [r4, #0]
 8006058:	1862      	adds	r2, r4, r1
 800605a:	4293      	cmp	r3, r2
 800605c:	bf04      	itt	eq
 800605e:	681a      	ldreq	r2, [r3, #0]
 8006060:	685b      	ldreq	r3, [r3, #4]
 8006062:	6063      	str	r3, [r4, #4]
 8006064:	bf04      	itt	eq
 8006066:	1852      	addeq	r2, r2, r1
 8006068:	6022      	streq	r2, [r4, #0]
 800606a:	602c      	str	r4, [r5, #0]
 800606c:	e7ec      	b.n	8006048 <_free_r+0x28>
 800606e:	461a      	mov	r2, r3
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	b10b      	cbz	r3, 8006078 <_free_r+0x58>
 8006074:	42a3      	cmp	r3, r4
 8006076:	d9fa      	bls.n	800606e <_free_r+0x4e>
 8006078:	6811      	ldr	r1, [r2, #0]
 800607a:	1855      	adds	r5, r2, r1
 800607c:	42a5      	cmp	r5, r4
 800607e:	d10b      	bne.n	8006098 <_free_r+0x78>
 8006080:	6824      	ldr	r4, [r4, #0]
 8006082:	4421      	add	r1, r4
 8006084:	1854      	adds	r4, r2, r1
 8006086:	42a3      	cmp	r3, r4
 8006088:	6011      	str	r1, [r2, #0]
 800608a:	d1dd      	bne.n	8006048 <_free_r+0x28>
 800608c:	681c      	ldr	r4, [r3, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	6053      	str	r3, [r2, #4]
 8006092:	4421      	add	r1, r4
 8006094:	6011      	str	r1, [r2, #0]
 8006096:	e7d7      	b.n	8006048 <_free_r+0x28>
 8006098:	d902      	bls.n	80060a0 <_free_r+0x80>
 800609a:	230c      	movs	r3, #12
 800609c:	6003      	str	r3, [r0, #0]
 800609e:	e7d3      	b.n	8006048 <_free_r+0x28>
 80060a0:	6825      	ldr	r5, [r4, #0]
 80060a2:	1961      	adds	r1, r4, r5
 80060a4:	428b      	cmp	r3, r1
 80060a6:	bf04      	itt	eq
 80060a8:	6819      	ldreq	r1, [r3, #0]
 80060aa:	685b      	ldreq	r3, [r3, #4]
 80060ac:	6063      	str	r3, [r4, #4]
 80060ae:	bf04      	itt	eq
 80060b0:	1949      	addeq	r1, r1, r5
 80060b2:	6021      	streq	r1, [r4, #0]
 80060b4:	6054      	str	r4, [r2, #4]
 80060b6:	e7c7      	b.n	8006048 <_free_r+0x28>
 80060b8:	b003      	add	sp, #12
 80060ba:	bd30      	pop	{r4, r5, pc}
 80060bc:	20000090 	.word	0x20000090

080060c0 <_malloc_r>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	1ccd      	adds	r5, r1, #3
 80060c4:	f025 0503 	bic.w	r5, r5, #3
 80060c8:	3508      	adds	r5, #8
 80060ca:	2d0c      	cmp	r5, #12
 80060cc:	bf38      	it	cc
 80060ce:	250c      	movcc	r5, #12
 80060d0:	2d00      	cmp	r5, #0
 80060d2:	4606      	mov	r6, r0
 80060d4:	db01      	blt.n	80060da <_malloc_r+0x1a>
 80060d6:	42a9      	cmp	r1, r5
 80060d8:	d903      	bls.n	80060e2 <_malloc_r+0x22>
 80060da:	230c      	movs	r3, #12
 80060dc:	6033      	str	r3, [r6, #0]
 80060de:	2000      	movs	r0, #0
 80060e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060e2:	f000 f87d 	bl	80061e0 <__malloc_lock>
 80060e6:	4921      	ldr	r1, [pc, #132]	; (800616c <_malloc_r+0xac>)
 80060e8:	680a      	ldr	r2, [r1, #0]
 80060ea:	4614      	mov	r4, r2
 80060ec:	b99c      	cbnz	r4, 8006116 <_malloc_r+0x56>
 80060ee:	4f20      	ldr	r7, [pc, #128]	; (8006170 <_malloc_r+0xb0>)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	b923      	cbnz	r3, 80060fe <_malloc_r+0x3e>
 80060f4:	4621      	mov	r1, r4
 80060f6:	4630      	mov	r0, r6
 80060f8:	f000 f862 	bl	80061c0 <_sbrk_r>
 80060fc:	6038      	str	r0, [r7, #0]
 80060fe:	4629      	mov	r1, r5
 8006100:	4630      	mov	r0, r6
 8006102:	f000 f85d 	bl	80061c0 <_sbrk_r>
 8006106:	1c43      	adds	r3, r0, #1
 8006108:	d123      	bne.n	8006152 <_malloc_r+0x92>
 800610a:	230c      	movs	r3, #12
 800610c:	6033      	str	r3, [r6, #0]
 800610e:	4630      	mov	r0, r6
 8006110:	f000 f86c 	bl	80061ec <__malloc_unlock>
 8006114:	e7e3      	b.n	80060de <_malloc_r+0x1e>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	1b5b      	subs	r3, r3, r5
 800611a:	d417      	bmi.n	800614c <_malloc_r+0x8c>
 800611c:	2b0b      	cmp	r3, #11
 800611e:	d903      	bls.n	8006128 <_malloc_r+0x68>
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	441c      	add	r4, r3
 8006124:	6025      	str	r5, [r4, #0]
 8006126:	e004      	b.n	8006132 <_malloc_r+0x72>
 8006128:	6863      	ldr	r3, [r4, #4]
 800612a:	42a2      	cmp	r2, r4
 800612c:	bf0c      	ite	eq
 800612e:	600b      	streq	r3, [r1, #0]
 8006130:	6053      	strne	r3, [r2, #4]
 8006132:	4630      	mov	r0, r6
 8006134:	f000 f85a 	bl	80061ec <__malloc_unlock>
 8006138:	f104 000b 	add.w	r0, r4, #11
 800613c:	1d23      	adds	r3, r4, #4
 800613e:	f020 0007 	bic.w	r0, r0, #7
 8006142:	1ac2      	subs	r2, r0, r3
 8006144:	d0cc      	beq.n	80060e0 <_malloc_r+0x20>
 8006146:	1a1b      	subs	r3, r3, r0
 8006148:	50a3      	str	r3, [r4, r2]
 800614a:	e7c9      	b.n	80060e0 <_malloc_r+0x20>
 800614c:	4622      	mov	r2, r4
 800614e:	6864      	ldr	r4, [r4, #4]
 8006150:	e7cc      	b.n	80060ec <_malloc_r+0x2c>
 8006152:	1cc4      	adds	r4, r0, #3
 8006154:	f024 0403 	bic.w	r4, r4, #3
 8006158:	42a0      	cmp	r0, r4
 800615a:	d0e3      	beq.n	8006124 <_malloc_r+0x64>
 800615c:	1a21      	subs	r1, r4, r0
 800615e:	4630      	mov	r0, r6
 8006160:	f000 f82e 	bl	80061c0 <_sbrk_r>
 8006164:	3001      	adds	r0, #1
 8006166:	d1dd      	bne.n	8006124 <_malloc_r+0x64>
 8006168:	e7cf      	b.n	800610a <_malloc_r+0x4a>
 800616a:	bf00      	nop
 800616c:	20000090 	.word	0x20000090
 8006170:	20000094 	.word	0x20000094

08006174 <_realloc_r>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	4607      	mov	r7, r0
 8006178:	4614      	mov	r4, r2
 800617a:	460e      	mov	r6, r1
 800617c:	b921      	cbnz	r1, 8006188 <_realloc_r+0x14>
 800617e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006182:	4611      	mov	r1, r2
 8006184:	f7ff bf9c 	b.w	80060c0 <_malloc_r>
 8006188:	b922      	cbnz	r2, 8006194 <_realloc_r+0x20>
 800618a:	f7ff ff49 	bl	8006020 <_free_r>
 800618e:	4625      	mov	r5, r4
 8006190:	4628      	mov	r0, r5
 8006192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006194:	f000 f830 	bl	80061f8 <_malloc_usable_size_r>
 8006198:	42a0      	cmp	r0, r4
 800619a:	d20f      	bcs.n	80061bc <_realloc_r+0x48>
 800619c:	4621      	mov	r1, r4
 800619e:	4638      	mov	r0, r7
 80061a0:	f7ff ff8e 	bl	80060c0 <_malloc_r>
 80061a4:	4605      	mov	r5, r0
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d0f2      	beq.n	8006190 <_realloc_r+0x1c>
 80061aa:	4631      	mov	r1, r6
 80061ac:	4622      	mov	r2, r4
 80061ae:	f7ff ff0f 	bl	8005fd0 <memcpy>
 80061b2:	4631      	mov	r1, r6
 80061b4:	4638      	mov	r0, r7
 80061b6:	f7ff ff33 	bl	8006020 <_free_r>
 80061ba:	e7e9      	b.n	8006190 <_realloc_r+0x1c>
 80061bc:	4635      	mov	r5, r6
 80061be:	e7e7      	b.n	8006190 <_realloc_r+0x1c>

080061c0 <_sbrk_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	4d06      	ldr	r5, [pc, #24]	; (80061dc <_sbrk_r+0x1c>)
 80061c4:	2300      	movs	r3, #0
 80061c6:	4604      	mov	r4, r0
 80061c8:	4608      	mov	r0, r1
 80061ca:	602b      	str	r3, [r5, #0]
 80061cc:	f7fa ffbe 	bl	800114c <_sbrk>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_sbrk_r+0x1a>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	b103      	cbz	r3, 80061da <_sbrk_r+0x1a>
 80061d8:	6023      	str	r3, [r4, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	200005f8 	.word	0x200005f8

080061e0 <__malloc_lock>:
 80061e0:	4801      	ldr	r0, [pc, #4]	; (80061e8 <__malloc_lock+0x8>)
 80061e2:	f000 b811 	b.w	8006208 <__retarget_lock_acquire_recursive>
 80061e6:	bf00      	nop
 80061e8:	20000600 	.word	0x20000600

080061ec <__malloc_unlock>:
 80061ec:	4801      	ldr	r0, [pc, #4]	; (80061f4 <__malloc_unlock+0x8>)
 80061ee:	f000 b80c 	b.w	800620a <__retarget_lock_release_recursive>
 80061f2:	bf00      	nop
 80061f4:	20000600 	.word	0x20000600

080061f8 <_malloc_usable_size_r>:
 80061f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061fc:	1f18      	subs	r0, r3, #4
 80061fe:	2b00      	cmp	r3, #0
 8006200:	bfbc      	itt	lt
 8006202:	580b      	ldrlt	r3, [r1, r0]
 8006204:	18c0      	addlt	r0, r0, r3
 8006206:	4770      	bx	lr

08006208 <__retarget_lock_acquire_recursive>:
 8006208:	4770      	bx	lr

0800620a <__retarget_lock_release_recursive>:
 800620a:	4770      	bx	lr

0800620c <_init>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	bf00      	nop
 8006210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006212:	bc08      	pop	{r3}
 8006214:	469e      	mov	lr, r3
 8006216:	4770      	bx	lr

08006218 <_fini>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	bf00      	nop
 800621c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621e:	bc08      	pop	{r3}
 8006220:	469e      	mov	lr, r3
 8006222:	4770      	bx	lr
