
MspInit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005438  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005638  08005638  00015638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005754  08005754  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08005754  08005754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800575c  0800575c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800575c  0800575c  0001575c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005760  08005760  00015760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001214  20000084  080057e8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001298  080057e8  00021298  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f255  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002247  00000000  00000000  0002f307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  00031550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  00031fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270bb  00000000  00000000  00032938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000daf3  00000000  00000000  000599f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5062  00000000  00000000  000674e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c548  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ce4  00000000  00000000  0015c59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000084 	.word	0x20000084
 800021c:	00000000 	.word	0x00000000
 8000220:	08005620 	.word	0x08005620

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000088 	.word	0x20000088
 800023c:	08005620 	.word	0x08005620

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0b6      	sub	sp, #216	; 0xd8
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char msg1[] =  "Long boat holystone pirate log driver hulk nipperkin cog. " \
 80005de:	4a3b      	ldr	r2, [pc, #236]	; (80006cc <main+0xf4>)
 80005e0:	f107 0318 	add.w	r3, r7, #24
 80005e4:	4611      	mov	r1, r2
 80005e6:	22ba      	movs	r2, #186	; 0xba
 80005e8:	4618      	mov	r0, r3
 80005ea:	f004 fbe3 	bl	8004db4 <memcpy>
	                "Buccaneer me lass poop deck spyglass maroon jib spike. Come" \
	                "about maroon skysail Corsair bilge water Arr long clothes " \
	                "transom.\r\n";
	uint8_t i = 0, ret, timeout;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	uint8_t msg[20] = {'\0'};
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
	char d[3]={7,5,10};
 8000606:	4a32      	ldr	r2, [pc, #200]	; (80006d0 <main+0xf8>)
 8000608:	463b      	mov	r3, r7
 800060a:	6812      	ldr	r2, [r2, #0]
 800060c:	4611      	mov	r1, r2
 800060e:	8019      	strh	r1, [r3, #0]
 8000610:	3302      	adds	r3, #2
 8000612:	0c12      	lsrs	r2, r2, #16
 8000614:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fd58 	bl	80010ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f865 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 fa0d 	bl	8000a3c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000622:	f000 f98d 	bl	8000940 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000626:	f000 f8d1 	bl	80007cc <MX_ADC1_Init>
  MX_DMA_Init();
 800062a:	f000 f9e9 	bl	8000a00 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800062e:	f000 f957 	bl	80008e0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000632:	f000 f9b5 	bl	80009a0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);


  HAL_UART_Transmit(&huart3, StartMSG, sizeof(StartMSG), 10000);
 8000636:	f242 7310 	movw	r3, #10000	; 0x2710
 800063a:	2214      	movs	r2, #20
 800063c:	4925      	ldr	r1, [pc, #148]	; (80006d4 <main+0xfc>)
 800063e:	4826      	ldr	r0, [pc, #152]	; (80006d8 <main+0x100>)
 8000640:	f003 f9f8 	bl	8003a34 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8000644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000648:	f000 fd9c 	bl	8001184 <HAL_Delay>
  uint8_t k=0;
 800064c:	2300      	movs	r3, #0
 800064e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  for (uint16_t K=0; K<1998; K++)
 8000652:	2300      	movs	r3, #0
 8000654:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
 8000658:	e009      	b.n	800066e <main+0x96>
  {
	  dma_buf[K]='x';
 800065a:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 800065e:	4a1f      	ldr	r2, [pc, #124]	; (80006dc <main+0x104>)
 8000660:	2178      	movs	r1, #120	; 0x78
 8000662:	54d1      	strb	r1, [r2, r3]
  for (uint16_t K=0; K<1998; K++)
 8000664:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000668:	3301      	adds	r3, #1
 800066a:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
 800066e:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000672:	f240 72cd 	movw	r2, #1997	; 0x7cd
 8000676:	4293      	cmp	r3, r2
 8000678:	d9ef      	bls.n	800065a <main+0x82>
  }
  dma_buf[1998]='\r';
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <main+0x104>)
 800067c:	220d      	movs	r2, #13
 800067e:	f883 27ce 	strb.w	r2, [r3, #1998]	; 0x7ce
  dma_buf[1999]='\n';
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <main+0x104>)
 8000684:	220a      	movs	r2, #10
 8000686:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf

  //HAL_UART_Receive_IT(&huart6, &dma_rec, 12);
  HAL_Delay(100);
 800068a:	2064      	movs	r0, #100	; 0x64
 800068c:	f000 fd7a 	bl	8001184 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
	HAL_UART_Transmit_DMA(&huart2, dma_buf, 2000);
 8000690:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000694:	4911      	ldr	r1, [pc, #68]	; (80006dc <main+0x104>)
 8000696:	4812      	ldr	r0, [pc, #72]	; (80006e0 <main+0x108>)
 8000698:	f003 fa60 	bl	8003b5c <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), HAL_MAX_DELAY);
	HAL_Delay(500);
 800069c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a0:	f000 fd70 	bl	8001184 <HAL_Delay>
	k++;
 80006a4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80006a8:	3301      	adds	r3, #1
 80006aa:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	sprintf(msg, "%hu:", k);
 80006ae:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	490b      	ldr	r1, [pc, #44]	; (80006e4 <main+0x10c>)
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 fb92 	bl	8004de0 <siprintf>
	HAL_UART_Transmit(&huart3, msg, 4, 1000);
 80006bc:	1d39      	adds	r1, r7, #4
 80006be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c2:	2204      	movs	r2, #4
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <main+0x100>)
 80006c6:	f003 f9b5 	bl	8003a34 <HAL_UART_Transmit>
  {
 80006ca:	e7e1      	b.n	8000690 <main+0xb8>
 80006cc:	08005640 	.word	0x08005640
 80006d0:	080056fc 	.word	0x080056fc
 80006d4:	20000000 	.word	0x20000000
 80006d8:	200000b0 	.word	0x200000b0
 80006dc:	2000017c 	.word	0x2000017c
 80006e0:	20001200 	.word	0x20001200
 80006e4:	08005638 	.word	0x08005638

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2234      	movs	r2, #52	; 0x34
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 fb6a 	bl	8004dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800070c:	f002 f80c 	bl	8002728 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <SystemClock_Config+0xdc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a2b      	ldr	r2, [pc, #172]	; (80007c4 <SystemClock_Config+0xdc>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <SystemClock_Config+0xdc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000728:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <SystemClock_Config+0xe0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000730:	4a25      	ldr	r2, [pc, #148]	; (80007c8 <SystemClock_Config+0xe0>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <SystemClock_Config+0xe0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000744:	2301      	movs	r3, #1
 8000746:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000748:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800074c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000752:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000758:	2304      	movs	r3, #4
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800075c:	2360      	movs	r3, #96	; 0x60
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000764:	2304      	movs	r3, #4
 8000766:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000768:	2302      	movs	r3, #2
 800076a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4618      	mov	r0, r3
 8000772:	f002 f839 	bl	80027e8 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800077c:	f000 fa44 	bl	8000c08 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000780:	f001 ffe2 	bl	8002748 <HAL_PWREx_EnableOverDrive>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800078a:	f000 fa3d 	bl	8000c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	230f      	movs	r3, #15
 8000790:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	2302      	movs	r3, #2
 8000794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800079a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	2103      	movs	r1, #3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f002 fac9 	bl	8002d44 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007b8:	f000 fa26 	bl	8000c08 <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	3750      	adds	r7, #80	; 0x50
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40007000 	.word	0x40007000

080007cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007d2:	463b      	mov	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007de:	4b3d      	ldr	r3, [pc, #244]	; (80008d4 <MX_ADC1_Init+0x108>)
 80007e0:	4a3d      	ldr	r2, [pc, #244]	; (80008d8 <MX_ADC1_Init+0x10c>)
 80007e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007e4:	4b3b      	ldr	r3, [pc, #236]	; (80008d4 <MX_ADC1_Init+0x108>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ea:	4b3a      	ldr	r3, [pc, #232]	; (80008d4 <MX_ADC1_Init+0x108>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007f0:	4b38      	ldr	r3, [pc, #224]	; (80008d4 <MX_ADC1_Init+0x108>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007f6:	4b37      	ldr	r3, [pc, #220]	; (80008d4 <MX_ADC1_Init+0x108>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fc:	4b35      	ldr	r3, [pc, #212]	; (80008d4 <MX_ADC1_Init+0x108>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000804:	4b33      	ldr	r3, [pc, #204]	; (80008d4 <MX_ADC1_Init+0x108>)
 8000806:	2200      	movs	r2, #0
 8000808:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080a:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <MX_ADC1_Init+0x108>)
 800080c:	4a33      	ldr	r2, [pc, #204]	; (80008dc <MX_ADC1_Init+0x110>)
 800080e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000810:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <MX_ADC1_Init+0x108>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000816:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <MX_ADC1_Init+0x108>)
 8000818:	2205      	movs	r2, #5
 800081a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800081c:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <MX_ADC1_Init+0x108>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000824:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <MX_ADC1_Init+0x108>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082a:	482a      	ldr	r0, [pc, #168]	; (80008d4 <MX_ADC1_Init+0x108>)
 800082c:	f000 fcce 	bl	80011cc <HAL_ADC_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 f9e7 	bl	8000c08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800083a:	2303      	movs	r3, #3
 800083c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800083e:	2301      	movs	r3, #1
 8000840:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000842:	2307      	movs	r3, #7
 8000844:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	4822      	ldr	r0, [pc, #136]	; (80008d4 <MX_ADC1_Init+0x108>)
 800084c:	f000 fe30 	bl	80014b0 <HAL_ADC_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000856:	f000 f9d7 	bl	8000c08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800085a:	2302      	movs	r3, #2
 800085c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800085e:	2303      	movs	r3, #3
 8000860:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	481b      	ldr	r0, [pc, #108]	; (80008d4 <MX_ADC1_Init+0x108>)
 8000868:	f000 fe22 	bl	80014b0 <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000872:	f000 f9c9 	bl	8000c08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000876:	2303      	movs	r3, #3
 8000878:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800087a:	2304      	movs	r3, #4
 800087c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4619      	mov	r1, r3
 8000882:	4814      	ldr	r0, [pc, #80]	; (80008d4 <MX_ADC1_Init+0x108>)
 8000884:	f000 fe14 	bl	80014b0 <HAL_ADC_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800088e:	f000 f9bb 	bl	8000c08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000892:	2304      	movs	r3, #4
 8000894:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000896:	2305      	movs	r3, #5
 8000898:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089a:	463b      	mov	r3, r7
 800089c:	4619      	mov	r1, r3
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_ADC1_Init+0x108>)
 80008a0:	f000 fe06 	bl	80014b0 <HAL_ADC_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80008aa:	f000 f9ad 	bl	8000c08 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80008ae:	2305      	movs	r3, #5
 80008b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80008b2:	2306      	movs	r3, #6
 80008b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_ADC1_Init+0x108>)
 80008bc:	f000 fdf8 	bl	80014b0 <HAL_ADC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80008c6:	f000 f99f 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000134 	.word	0x20000134
 80008d8:	40012000 	.word	0x40012000
 80008dc:	0f000001 	.word	0x0f000001

080008e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_USART2_UART_Init+0x58>)
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <MX_USART2_UART_Init+0x5c>)
 80008e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_USART2_UART_Init+0x58>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART2_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_USART2_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART2_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART2_UART_Init+0x58>)
 8000906:	220c      	movs	r2, #12
 8000908:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART2_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART2_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART2_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART2_UART_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART2_UART_Init+0x58>)
 8000924:	f003 f838 	bl	8003998 <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800092e:	f000 f96b 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20001200 	.word	0x20001200
 800093c:	40004400 	.word	0x40004400

08000940 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <MX_USART3_UART_Init+0x5c>)
 8000948:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART3_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART3_UART_Init+0x58>)
 8000984:	f003 f808 	bl	8003998 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800098e:	f000 f93b 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000b0 	.word	0x200000b0
 800099c:	40004800 	.word	0x40004800

080009a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USART6_UART_Init+0x58>)
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <MX_USART6_UART_Init+0x5c>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_USART6_UART_Init+0x58>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART6_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_USART6_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART6_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART6_UART_Init+0x58>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART6_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART6_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART6_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART6_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART6_UART_Init+0x58>)
 80009e4:	f002 ffd8 	bl	8003998 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 f90b 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000117c 	.word	0x2000117c
 80009fc:	40011400 	.word	0x40011400

08000a00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_DMA_Init+0x38>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <MX_DMA_Init+0x38>)
 8000a0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_DMA_Init+0x38>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2011      	movs	r0, #17
 8000a24:	f001 f879 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a28:	2011      	movs	r0, #17
 8000a2a:	f001 f892 	bl	8001b52 <HAL_NVIC_EnableIRQ>

}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	; 0x30
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a36      	ldr	r2, [pc, #216]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a30      	ldr	r2, [pc, #192]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a2a      	ldr	r2, [pc, #168]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b25      	ldr	r3, [pc, #148]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a24      	ldr	r2, [pc, #144]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <MX_GPIO_Init+0xf4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ae8:	4812      	ldr	r0, [pc, #72]	; (8000b34 <MX_GPIO_Init+0xf8>)
 8000aea:	f001 fe03 	bl	80026f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_GPIO_Init+0xfc>)
 8000b06:	f001 fc49 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b0a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_GPIO_Init+0xf8>)
 8000b24:	f001 fc3a 	bl	800239c <HAL_GPIO_Init>

}
 8000b28:	bf00      	nop
 8000b2a:	3730      	adds	r7, #48	; 0x30
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020400 	.word	0x40020400
 8000b38:	40020800 	.word	0x40020800

08000b3c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	//HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
	uint16_t i=0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	81fb      	strh	r3, [r7, #14]
	toogle = !toogle;
 8000b48:	4b19      	ldr	r3, [pc, #100]	; (8000bb0 <HAL_UART_TxCpltCallback+0x74>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	bf0c      	ite	eq
 8000b52:	2301      	moveq	r3, #1
 8000b54:	2300      	movne	r3, #0
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <HAL_UART_TxCpltCallback+0x74>)
 8000b5c:	701a      	strb	r2, [r3, #0]
	for (i=1000; i<1998; i++)
 8000b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b62:	81fb      	strh	r3, [r7, #14]
 8000b64:	e010      	b.n	8000b88 <HAL_UART_TxCpltCallback+0x4c>
	{
		if (toogle)
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_UART_TxCpltCallback+0x74>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d004      	beq.n	8000b7a <HAL_UART_TxCpltCallback+0x3e>
			dma_buf[i]='x';
 8000b70:	89fb      	ldrh	r3, [r7, #14]
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <HAL_UART_TxCpltCallback+0x78>)
 8000b74:	2178      	movs	r1, #120	; 0x78
 8000b76:	54d1      	strb	r1, [r2, r3]
 8000b78:	e003      	b.n	8000b82 <HAL_UART_TxCpltCallback+0x46>
		else
			dma_buf[i]='y';
 8000b7a:	89fb      	ldrh	r3, [r7, #14]
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <HAL_UART_TxCpltCallback+0x78>)
 8000b7e:	2179      	movs	r1, #121	; 0x79
 8000b80:	54d1      	strb	r1, [r2, r3]
	for (i=1000; i<1998; i++)
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	3301      	adds	r3, #1
 8000b86:	81fb      	strh	r3, [r7, #14]
 8000b88:	89fb      	ldrh	r3, [r7, #14]
 8000b8a:	f240 72cd 	movw	r2, #1997	; 0x7cd
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d9e9      	bls.n	8000b66 <HAL_UART_TxCpltCallback+0x2a>
	}
	dma_buf[1998]='\r';
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_UART_TxCpltCallback+0x78>)
 8000b94:	220d      	movs	r2, #13
 8000b96:	f883 27ce 	strb.w	r2, [r3, #1998]	; 0x7ce
	dma_buf[1999]='\n';
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_UART_TxCpltCallback+0x78>)
 8000b9c:	220a      	movs	r2, #10
 8000b9e:	f883 27cf 	strb.w	r2, [r3, #1999]	; 0x7cf
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200000a0 	.word	0x200000a0
 8000bb4:	2000017c 	.word	0x2000017c

08000bb8 <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	//HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
	uint16_t i;
	for (i=0; i<1000; i++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	81fb      	strh	r3, [r7, #14]
 8000bc4:	e010      	b.n	8000be8 <HAL_UART_TxHalfCpltCallback+0x30>
	{
		if (toogle)
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <HAL_UART_TxHalfCpltCallback+0x48>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d004      	beq.n	8000bda <HAL_UART_TxHalfCpltCallback+0x22>
			dma_buf[i]='z';
 8000bd0:	89fb      	ldrh	r3, [r7, #14]
 8000bd2:	4a0c      	ldr	r2, [pc, #48]	; (8000c04 <HAL_UART_TxHalfCpltCallback+0x4c>)
 8000bd4:	217a      	movs	r1, #122	; 0x7a
 8000bd6:	54d1      	strb	r1, [r2, r3]
 8000bd8:	e003      	b.n	8000be2 <HAL_UART_TxHalfCpltCallback+0x2a>
		else
			dma_buf[i]='w';
 8000bda:	89fb      	ldrh	r3, [r7, #14]
 8000bdc:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <HAL_UART_TxHalfCpltCallback+0x4c>)
 8000bde:	2177      	movs	r1, #119	; 0x77
 8000be0:	54d1      	strb	r1, [r2, r3]
	for (i=0; i<1000; i++)
 8000be2:	89fb      	ldrh	r3, [r7, #14]
 8000be4:	3301      	adds	r3, #1
 8000be6:	81fb      	strh	r3, [r7, #14]
 8000be8:	89fb      	ldrh	r3, [r7, #14]
 8000bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bee:	d3ea      	bcc.n	8000bc6 <HAL_UART_TxHalfCpltCallback+0xe>
	}
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	200000a0 	.word	0x200000a0
 8000c04:	2000017c 	.word	0x2000017c

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_MspInit+0x44>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <HAL_MspInit+0x44>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_MspInit+0x44>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x44>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x44>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x44>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <HAL_ADC_MspInit+0x84>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12b      	bne.n	8000cd6 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_ADC_MspInit+0x88>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <HAL_ADC_MspInit+0x88>)
 8000c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_ADC_MspInit+0x88>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <HAL_ADC_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <HAL_ADC_MspInit+0x88>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_ADC_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cae:	2308      	movs	r3, #8
 8000cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <HAL_ADC_MspInit+0x8c>)
 8000cc2:	f001 fb6b 	bl	800239c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2012      	movs	r0, #18
 8000ccc:	f000 ff25 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000cd0:	2012      	movs	r0, #18
 8000cd2:	f000 ff3e 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3728      	adds	r7, #40	; 0x28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40012000 	.word	0x40012000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000

08000cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0b2      	sub	sp, #200	; 0xc8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d08:	2290      	movs	r2, #144	; 0x90
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f004 f85f 	bl	8004dd0 <memset>
  if(huart->Instance==USART2)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a83      	ldr	r2, [pc, #524]	; (8000f24 <HAL_UART_MspInit+0x238>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d171      	bne.n	8000e00 <HAL_UART_MspInit+0x114>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f002 fa0d 	bl	8003148 <HAL_RCCEx_PeriphCLKConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d34:	f7ff ff68 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d38:	4b7b      	ldr	r3, [pc, #492]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	4a7a      	ldr	r2, [pc, #488]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d42:	6413      	str	r3, [r2, #64]	; 0x40
 8000d44:	4b78      	ldr	r3, [pc, #480]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4c:	623b      	str	r3, [r7, #32]
 8000d4e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d50:	4b75      	ldr	r3, [pc, #468]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	4a74      	ldr	r2, [pc, #464]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000d56:	f043 0308 	orr.w	r3, r3, #8
 8000d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5c:	4b72      	ldr	r3, [pc, #456]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000d68:	2360      	movs	r3, #96	; 0x60
 8000d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d80:	2307      	movs	r3, #7
 8000d82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d86:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4867      	ldr	r0, [pc, #412]	; (8000f2c <HAL_UART_MspInit+0x240>)
 8000d8e:	f001 fb05 	bl	800239c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000d92:	4b67      	ldr	r3, [pc, #412]	; (8000f30 <HAL_UART_MspInit+0x244>)
 8000d94:	4a67      	ldr	r2, [pc, #412]	; (8000f34 <HAL_UART_MspInit+0x248>)
 8000d96:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000d98:	4b65      	ldr	r3, [pc, #404]	; (8000f30 <HAL_UART_MspInit+0x244>)
 8000d9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d9e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da0:	4b63      	ldr	r3, [pc, #396]	; (8000f30 <HAL_UART_MspInit+0x244>)
 8000da2:	2240      	movs	r2, #64	; 0x40
 8000da4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da6:	4b62      	ldr	r3, [pc, #392]	; (8000f30 <HAL_UART_MspInit+0x244>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dac:	4b60      	ldr	r3, [pc, #384]	; (8000f30 <HAL_UART_MspInit+0x244>)
 8000dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000db4:	4b5e      	ldr	r3, [pc, #376]	; (8000f30 <HAL_UART_MspInit+0x244>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dba:	4b5d      	ldr	r3, [pc, #372]	; (8000f30 <HAL_UART_MspInit+0x244>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000dc0:	4b5b      	ldr	r3, [pc, #364]	; (8000f30 <HAL_UART_MspInit+0x244>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dc6:	4b5a      	ldr	r3, [pc, #360]	; (8000f30 <HAL_UART_MspInit+0x244>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dcc:	4b58      	ldr	r3, [pc, #352]	; (8000f30 <HAL_UART_MspInit+0x244>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000dd2:	4857      	ldr	r0, [pc, #348]	; (8000f30 <HAL_UART_MspInit+0x244>)
 8000dd4:	f000 fed8 	bl	8001b88 <HAL_DMA_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8000dde:	f7ff ff13 	bl	8000c08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a52      	ldr	r2, [pc, #328]	; (8000f30 <HAL_UART_MspInit+0x244>)
 8000de6:	66da      	str	r2, [r3, #108]	; 0x6c
 8000de8:	4a51      	ldr	r2, [pc, #324]	; (8000f30 <HAL_UART_MspInit+0x244>)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2026      	movs	r0, #38	; 0x26
 8000df4:	f000 fe91 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000df8:	2026      	movs	r0, #38	; 0x26
 8000dfa:	f000 feaa 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000dfe:	e08c      	b.n	8000f1a <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART3)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a4c      	ldr	r2, [pc, #304]	; (8000f38 <HAL_UART_MspInit+0x24c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d13d      	bne.n	8000e86 <HAL_UART_MspInit+0x19a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f002 f995 	bl	8003148 <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8000e24:	f7ff fef0 	bl	8000c08 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e28:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	4a3e      	ldr	r2, [pc, #248]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000e2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e32:	6413      	str	r3, [r2, #64]	; 0x40
 8000e34:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e40:	4b39      	ldr	r3, [pc, #228]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	4a38      	ldr	r2, [pc, #224]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4c:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	f003 0308 	and.w	r3, r3, #8
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e72:	2307      	movs	r3, #7
 8000e74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e78:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	482b      	ldr	r0, [pc, #172]	; (8000f2c <HAL_UART_MspInit+0x240>)
 8000e80:	f001 fa8c 	bl	800239c <HAL_GPIO_Init>
}
 8000e84:	e049      	b.n	8000f1a <HAL_UART_MspInit+0x22e>
  else if(huart->Instance==USART6)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a2c      	ldr	r2, [pc, #176]	; (8000f3c <HAL_UART_MspInit+0x250>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d144      	bne.n	8000f1a <HAL_UART_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8000e90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000e96:	2300      	movs	r3, #0
 8000e98:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f002 f952 	bl	8003148 <HAL_RCCEx_PeriphCLKConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_UART_MspInit+0x1c2>
      Error_Handler();
 8000eaa:	f7ff fead 	bl	8000c08 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a1d      	ldr	r2, [pc, #116]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000eb4:	f043 0320 	orr.w	r3, r3, #32
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f003 0320 	and.w	r3, r3, #32
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_UART_MspInit+0x23c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000ede:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000efe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f02:	4619      	mov	r1, r3
 8000f04:	480e      	ldr	r0, [pc, #56]	; (8000f40 <HAL_UART_MspInit+0x254>)
 8000f06:	f001 fa49 	bl	800239c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	2047      	movs	r0, #71	; 0x47
 8000f10:	f000 fe03 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000f14:	2047      	movs	r0, #71	; 0x47
 8000f16:	f000 fe1c 	bl	8001b52 <HAL_NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	37c8      	adds	r7, #200	; 0xc8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40004400 	.word	0x40004400
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020c00 	.word	0x40020c00
 8000f30:	2000094c 	.word	0x2000094c
 8000f34:	400260a0 	.word	0x400260a0
 8000f38:	40004800 	.word	0x40004800
 8000f3c:	40011400 	.word	0x40011400
 8000f40:	40021800 	.word	0x40021800

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <NMI_Handler+0x4>

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f8d8 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <DMA1_Stream6_IRQHandler+0x10>)
 8000f9e:	f000 ff93 	bl	8001ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000094c 	.word	0x2000094c

08000fac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <ADC_IRQHandler+0x10>)
 8000fb2:	f000 f94f 	bl	8001254 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000134 	.word	0x20000134

08000fc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <USART2_IRQHandler+0x10>)
 8000fc6:	f002 fe59 	bl	8003c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20001200 	.word	0x20001200

08000fd4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <USART6_IRQHandler+0x10>)
 8000fda:	f002 fe4f 	bl	8003c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000117c 	.word	0x2000117c

08000fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <_sbrk+0x5c>)
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <_sbrk+0x60>)
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <_sbrk+0x64>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <_sbrk+0x64>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <_sbrk+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	429a      	cmp	r2, r3
 8001016:	d207      	bcs.n	8001028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001018:	f003 fea2 	bl	8004d60 <__errno>
 800101c:	4603      	mov	r3, r0
 800101e:	220c      	movs	r2, #12
 8001020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	e009      	b.n	800103c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	4a05      	ldr	r2, [pc, #20]	; (800104c <_sbrk+0x64>)
 8001038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20080000 	.word	0x20080000
 8001048:	00000400 	.word	0x00000400
 800104c:	200000a4 	.word	0x200000a4
 8001050:	20001298 	.word	0x20001298

08001054 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <SystemInit+0x20>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <SystemInit+0x20>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001080:	4a0e      	ldr	r2, [pc, #56]	; (80010bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001094:	4c0b      	ldr	r4, [pc, #44]	; (80010c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a2:	f7ff ffd7 	bl	8001054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a6:	f003 fe61 	bl	8004d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010aa:	f7ff fa95 	bl	80005d8 <main>
  bx  lr    
 80010ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80010bc:	08005764 	.word	0x08005764
  ldr r2, =_sbss
 80010c0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80010c4:	20001298 	.word	0x20001298

080010c8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <CAN1_RX0_IRQHandler>

080010ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ce:	2003      	movs	r0, #3
 80010d0:	f000 fd18 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f000 f805 	bl	80010e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010da:	f7ff fd9b 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x54>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_InitTick+0x58>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f000 fd33 	bl	8001b6e <HAL_SYSTICK_Config>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e00e      	b.n	8001130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d80a      	bhi.n	800112e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001118:	2200      	movs	r2, #0
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f000 fcfb 	bl	8001b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_InitTick+0x5c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000014 	.word	0x20000014
 800113c:	2000001c 	.word	0x2000001c
 8001140:	20000018 	.word	0x20000018

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	2000001c 	.word	0x2000001c
 8001168:	20001284 	.word	0x20001284

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20001284 	.word	0x20001284

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffde 	bl	800116c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000001c 	.word	0x2000001c

080011cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e031      	b.n	8001246 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fd36 	bl	8000c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	2b00      	cmp	r3, #0
 8001208:	d116      	bne.n	8001238 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <HAL_ADC_Init+0x84>)
 8001210:	4013      	ands	r3, r2
 8001212:	f043 0202 	orr.w	r2, r3, #2
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 fa9e 	bl	800175c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f023 0303 	bic.w	r3, r3, #3
 800122e:	f043 0201 	orr.w	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641a      	str	r2, [r3, #64]	; 0x40
 8001236:	e001      	b.n	800123c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	ffffeefd 	.word	0xffffeefd

08001254 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	f003 0320 	and.w	r3, r3, #32
 8001282:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d049      	beq.n	800131e <HAL_ADC_IRQHandler+0xca>
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d046      	beq.n	800131e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f003 0310 	and.w	r3, r3, #16
 8001298:	2b00      	cmp	r3, #0
 800129a:	d105      	bne.n	80012a8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d12b      	bne.n	800130e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d127      	bne.n	800130e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d119      	bne.n	800130e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0220 	bic.w	r2, r2, #32
 80012e8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d105      	bne.n	800130e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f043 0201 	orr.w	r2, r3, #1
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f8b0 	bl	8001474 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f06f 0212 	mvn.w	r2, #18
 800131c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800132c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d057      	beq.n	80013e4 <HAL_ADC_IRQHandler+0x190>
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d054      	beq.n	80013e4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	2b00      	cmp	r3, #0
 8001344:	d105      	bne.n	8001352 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d139      	bne.n	80013d4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001366:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800136a:	2b00      	cmp	r3, #0
 800136c:	d006      	beq.n	800137c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001378:	2b00      	cmp	r3, #0
 800137a:	d12b      	bne.n	80013d4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001386:	2b00      	cmp	r3, #0
 8001388:	d124      	bne.n	80013d4 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001394:	2b00      	cmp	r3, #0
 8001396:	d11d      	bne.n	80013d4 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800139c:	2b00      	cmp	r3, #0
 800139e:	d119      	bne.n	80013d4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013ae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d105      	bne.n	80013d4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f043 0201 	orr.w	r2, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 fabb 	bl	8001950 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f06f 020c 	mvn.w	r2, #12
 80013e2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d017      	beq.n	800142a <HAL_ADC_IRQHandler+0x1d6>
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d014      	beq.n	800142a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b01      	cmp	r3, #1
 800140c:	d10d      	bne.n	800142a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f834 	bl	8001488 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f06f 0201 	mvn.w	r2, #1
 8001428:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f003 0320 	and.w	r3, r3, #32
 8001430:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001438:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d015      	beq.n	800146c <HAL_ADC_IRQHandler+0x218>
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d012      	beq.n	800146c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f043 0202 	orr.w	r2, r3, #2
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f06f 0220 	mvn.w	r2, #32
 800145a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f81d 	bl	800149c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f06f 0220 	mvn.w	r2, #32
 800146a:	601a      	str	r2, [r3, #0]
  }
}
 800146c:	bf00      	nop
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x1c>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e136      	b.n	800173a <HAL_ADC_ConfigChannel+0x28a>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b09      	cmp	r3, #9
 80014da:	d93a      	bls.n	8001552 <HAL_ADC_ConfigChannel+0xa2>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014e4:	d035      	beq.n	8001552 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68d9      	ldr	r1, [r3, #12]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	3b1e      	subs	r3, #30
 80014fc:	2207      	movs	r2, #7
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	400a      	ands	r2, r1
 800150a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a8d      	ldr	r2, [pc, #564]	; (8001748 <HAL_ADC_ConfigChannel+0x298>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10a      	bne.n	800152c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68d9      	ldr	r1, [r3, #12]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	061a      	lsls	r2, r3, #24
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800152a:	e035      	b.n	8001598 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68d9      	ldr	r1, [r3, #12]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4618      	mov	r0, r3
 800153e:	4603      	mov	r3, r0
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4403      	add	r3, r0
 8001544:	3b1e      	subs	r3, #30
 8001546:	409a      	lsls	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001550:	e022      	b.n	8001598 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6919      	ldr	r1, [r3, #16]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	2207      	movs	r2, #7
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43da      	mvns	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	400a      	ands	r2, r1
 8001574:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6919      	ldr	r1, [r3, #16]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	b29b      	uxth	r3, r3
 8001586:	4618      	mov	r0, r3
 8001588:	4603      	mov	r3, r0
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4403      	add	r3, r0
 800158e:	409a      	lsls	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b06      	cmp	r3, #6
 800159e:	d824      	bhi.n	80015ea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	3b05      	subs	r3, #5
 80015b2:	221f      	movs	r2, #31
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43da      	mvns	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	400a      	ands	r2, r1
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	3b05      	subs	r3, #5
 80015dc:	fa00 f203 	lsl.w	r2, r0, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	635a      	str	r2, [r3, #52]	; 0x34
 80015e8:	e04c      	b.n	8001684 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	d824      	bhi.n	800163c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	3b23      	subs	r3, #35	; 0x23
 8001604:	221f      	movs	r2, #31
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	400a      	ands	r2, r1
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	3b23      	subs	r3, #35	; 0x23
 800162e:	fa00 f203 	lsl.w	r2, r0, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	631a      	str	r2, [r3, #48]	; 0x30
 800163a:	e023      	b.n	8001684 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	3b41      	subs	r3, #65	; 0x41
 800164e:	221f      	movs	r2, #31
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43da      	mvns	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	400a      	ands	r2, r1
 800165c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	b29b      	uxth	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3b41      	subs	r3, #65	; 0x41
 8001678:	fa00 f203 	lsl.w	r2, r0, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a30      	ldr	r2, [pc, #192]	; (800174c <HAL_ADC_ConfigChannel+0x29c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d10a      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x1f4>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001696:	d105      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001698:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4a2c      	ldr	r2, [pc, #176]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 800169e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016a2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a28      	ldr	r2, [pc, #160]	; (800174c <HAL_ADC_ConfigChannel+0x29c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d10f      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x21e>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b12      	cmp	r3, #18
 80016b4:	d10b      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4a25      	ldr	r2, [pc, #148]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016c0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80016c2:	4b23      	ldr	r3, [pc, #140]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a22      	ldr	r2, [pc, #136]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016cc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1e      	ldr	r2, [pc, #120]	; (800174c <HAL_ADC_ConfigChannel+0x29c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d12b      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x280>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_ADC_ConfigChannel+0x298>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d003      	beq.n	80016ea <HAL_ADC_ConfigChannel+0x23a>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b11      	cmp	r3, #17
 80016e8:	d122      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4a18      	ldr	r2, [pc, #96]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016f4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a15      	ldr	r2, [pc, #84]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001700:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a10      	ldr	r2, [pc, #64]	; (8001748 <HAL_ADC_ConfigChannel+0x298>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d111      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <HAL_ADC_ConfigChannel+0x2a4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a11      	ldr	r2, [pc, #68]	; (8001758 <HAL_ADC_ConfigChannel+0x2a8>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	0c9a      	lsrs	r2, r3, #18
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001722:	e002      	b.n	800172a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3b01      	subs	r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f9      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	10000012 	.word	0x10000012
 800174c:	40012000 	.word	0x40012000
 8001750:	40012300 	.word	0x40012300
 8001754:	20000014 	.word	0x20000014
 8001758:	431bde83 	.word	0x431bde83

0800175c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001764:	4b78      	ldr	r3, [pc, #480]	; (8001948 <ADC_Init+0x1ec>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a77      	ldr	r2, [pc, #476]	; (8001948 <ADC_Init+0x1ec>)
 800176a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800176e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001770:	4b75      	ldr	r3, [pc, #468]	; (8001948 <ADC_Init+0x1ec>)
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4973      	ldr	r1, [pc, #460]	; (8001948 <ADC_Init+0x1ec>)
 800177a:	4313      	orrs	r3, r2
 800177c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800178c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6859      	ldr	r1, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	021a      	lsls	r2, r3, #8
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6899      	ldr	r1, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	4a58      	ldr	r2, [pc, #352]	; (800194c <ADC_Init+0x1f0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d022      	beq.n	8001836 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6899      	ldr	r1, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6899      	ldr	r1, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	e00f      	b.n	8001856 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001854:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0202 	bic.w	r2, r2, #2
 8001864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6899      	ldr	r1, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	005a      	lsls	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01b      	beq.n	80018bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001892:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6859      	ldr	r1, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	3b01      	subs	r3, #1
 80018b0:	035a      	lsls	r2, r3, #13
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	e007      	b.n	80018cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	051a      	lsls	r2, r3, #20
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001900:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6899      	ldr	r1, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800190e:	025a      	lsls	r2, r3, #9
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6899      	ldr	r1, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	029a      	lsls	r2, r3, #10
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	609a      	str	r2, [r3, #8]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40012300 	.word	0x40012300
 800194c:	0f000001 	.word	0x0f000001

08001950 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	4313      	orrs	r3, r2
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00
 80019a8:	05fa0000 	.word	0x05fa0000

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0b      	blt.n	80019f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4907      	ldr	r1, [pc, #28]	; (8001a00 <__NVIC_EnableIRQ+0x38>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad0:	d301      	bcc.n	8001ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00f      	b.n	8001af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <SysTick_Config+0x40>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ade:	210f      	movs	r1, #15
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f7ff ff8e 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <SysTick_Config+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SysTick_Config+0x40>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff29 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff3e 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ff8e 	bl	8001a58 <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff5d 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff31 	bl	80019c8 <__NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffa2 	bl	8001ac0 <SysTick_Config>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff faea 	bl	800116c <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e099      	b.n	8001cd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc4:	e00f      	b.n	8001be6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bc6:	f7ff fad1 	bl	800116c <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d908      	bls.n	8001be6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2203      	movs	r2, #3
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e078      	b.n	8001cd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1e8      	bne.n	8001bc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <HAL_DMA_Init+0x158>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d107      	bne.n	8001c50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f023 0307 	bic.w	r3, r3, #7
 8001c66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	2b04      	cmp	r3, #4
 8001c78:	d117      	bne.n	8001caa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00e      	beq.n	8001caa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 fb09 	bl	80022a4 <DMA_CheckFifoParam>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2240      	movs	r2, #64	; 0x40
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e016      	b.n	8001cd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fac0 	bl	8002238 <DMA_CalcBaseAndBitshift>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc0:	223f      	movs	r2, #63	; 0x3f
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	e010803f 	.word	0xe010803f

08001ce4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_DMA_Start_IT+0x26>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e048      	b.n	8001d9c <HAL_DMA_Start_IT+0xb8>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d137      	bne.n	8001d8e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2202      	movs	r2, #2
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 fa52 	bl	80021dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	223f      	movs	r2, #63	; 0x3f
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0216 	orr.w	r2, r2, #22
 8001d52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d62:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0208 	orr.w	r2, r2, #8
 8001d7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	e005      	b.n	8001d9a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d96:	2302      	movs	r3, #2
 8001d98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001db2:	f7ff f9db 	bl	800116c <HAL_GetTick>
 8001db6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d008      	beq.n	8001dd6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2280      	movs	r2, #128	; 0x80
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e052      	b.n	8001e7c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0216 	bic.w	r2, r2, #22
 8001de4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695a      	ldr	r2, [r3, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <HAL_DMA_Abort+0x62>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0208 	bic.w	r2, r2, #8
 8001e14:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0201 	bic.w	r2, r2, #1
 8001e24:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e26:	e013      	b.n	8001e50 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e28:	f7ff f9a0 	bl	800116c <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	d90c      	bls.n	8001e50 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2203      	movs	r2, #3
 8001e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e015      	b.n	8001e7c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1e4      	bne.n	8001e28 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	223f      	movs	r2, #63	; 0x3f
 8001e64:	409a      	lsls	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d004      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2280      	movs	r2, #128	; 0x80
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00c      	b.n	8001ebc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2205      	movs	r2, #5
 8001ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001ed4:	4b92      	ldr	r3, [pc, #584]	; (8002120 <HAL_DMA_IRQHandler+0x258>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a92      	ldr	r2, [pc, #584]	; (8002124 <HAL_DMA_IRQHandler+0x25c>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	0a9b      	lsrs	r3, r3, #10
 8001ee0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	2208      	movs	r2, #8
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d01a      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d013      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0204 	bic.w	r2, r2, #4
 8001f1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	2208      	movs	r2, #8
 8001f22:	409a      	lsls	r2, r3
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f38:	2201      	movs	r2, #1
 8001f3a:	409a      	lsls	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d012      	beq.n	8001f6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00b      	beq.n	8001f6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	2201      	movs	r2, #1
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f62:	f043 0202 	orr.w	r2, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	2204      	movs	r2, #4
 8001f70:	409a      	lsls	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4013      	ands	r3, r2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d012      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00b      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	f043 0204 	orr.w	r2, r3, #4
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	409a      	lsls	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4013      	ands	r3, r2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d043      	beq.n	8002038 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d03c      	beq.n	8002038 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	2210      	movs	r2, #16
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d018      	beq.n	800200a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d108      	bne.n	8001ff8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d024      	beq.n	8002038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	4798      	blx	r3
 8001ff6:	e01f      	b.n	8002038 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d01b      	beq.n	8002038 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
 8002008:	e016      	b.n	8002038 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0208 	bic.w	r2, r2, #8
 8002026:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	2220      	movs	r2, #32
 800203e:	409a      	lsls	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4013      	ands	r3, r2
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 808e 	beq.w	8002166 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 8086 	beq.w	8002166 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205e:	2220      	movs	r2, #32
 8002060:	409a      	lsls	r2, r3
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b05      	cmp	r3, #5
 8002070:	d136      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0216 	bic.w	r2, r2, #22
 8002080:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002090:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d103      	bne.n	80020a2 <HAL_DMA_IRQHandler+0x1da>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0208 	bic.w	r2, r2, #8
 80020b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b6:	223f      	movs	r2, #63	; 0x3f
 80020b8:	409a      	lsls	r2, r3
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d07d      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	4798      	blx	r3
        }
        return;
 80020de:	e078      	b.n	80021d2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d01c      	beq.n	8002128 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d108      	bne.n	800210e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002100:	2b00      	cmp	r3, #0
 8002102:	d030      	beq.n	8002166 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	4798      	blx	r3
 800210c:	e02b      	b.n	8002166 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002112:	2b00      	cmp	r3, #0
 8002114:	d027      	beq.n	8002166 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	4798      	blx	r3
 800211e:	e022      	b.n	8002166 <HAL_DMA_IRQHandler+0x29e>
 8002120:	20000014 	.word	0x20000014
 8002124:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10f      	bne.n	8002156 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0210 	bic.w	r2, r2, #16
 8002144:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800216a:	2b00      	cmp	r3, #0
 800216c:	d032      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d022      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2205      	movs	r2, #5
 800217e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	3301      	adds	r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	429a      	cmp	r2, r3
 800219c:	d307      	bcc.n	80021ae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f2      	bne.n	8002192 <HAL_DMA_IRQHandler+0x2ca>
 80021ac:	e000      	b.n	80021b0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80021ae:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4798      	blx	r3
 80021d0:	e000      	b.n	80021d4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80021d2:	bf00      	nop
    }
  }
}
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop

080021dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
 80021e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b40      	cmp	r3, #64	; 0x40
 8002208:	d108      	bne.n	800221c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800221a:	e007      	b.n	800222c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	60da      	str	r2, [r3, #12]
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	3b10      	subs	r3, #16
 8002248:	4a13      	ldr	r2, [pc, #76]	; (8002298 <DMA_CalcBaseAndBitshift+0x60>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002252:	4a12      	ldr	r2, [pc, #72]	; (800229c <DMA_CalcBaseAndBitshift+0x64>)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d908      	bls.n	8002278 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <DMA_CalcBaseAndBitshift+0x68>)
 800226e:	4013      	ands	r3, r2
 8002270:	1d1a      	adds	r2, r3, #4
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	659a      	str	r2, [r3, #88]	; 0x58
 8002276:	e006      	b.n	8002286 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002280:	4013      	ands	r3, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	aaaaaaab 	.word	0xaaaaaaab
 800229c:	08005718 	.word	0x08005718
 80022a0:	fffffc00 	.word	0xfffffc00

080022a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d11f      	bne.n	80022fe <DMA_CheckFifoParam+0x5a>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d856      	bhi.n	8002372 <DMA_CheckFifoParam+0xce>
 80022c4:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <DMA_CheckFifoParam+0x28>)
 80022c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ca:	bf00      	nop
 80022cc:	080022dd 	.word	0x080022dd
 80022d0:	080022ef 	.word	0x080022ef
 80022d4:	080022dd 	.word	0x080022dd
 80022d8:	08002373 	.word	0x08002373
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d046      	beq.n	8002376 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ec:	e043      	b.n	8002376 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022f6:	d140      	bne.n	800237a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022fc:	e03d      	b.n	800237a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002306:	d121      	bne.n	800234c <DMA_CheckFifoParam+0xa8>
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d837      	bhi.n	800237e <DMA_CheckFifoParam+0xda>
 800230e:	a201      	add	r2, pc, #4	; (adr r2, 8002314 <DMA_CheckFifoParam+0x70>)
 8002310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002314:	08002325 	.word	0x08002325
 8002318:	0800232b 	.word	0x0800232b
 800231c:	08002325 	.word	0x08002325
 8002320:	0800233d 	.word	0x0800233d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	73fb      	strb	r3, [r7, #15]
      break;
 8002328:	e030      	b.n	800238c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d025      	beq.n	8002382 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800233a:	e022      	b.n	8002382 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002344:	d11f      	bne.n	8002386 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800234a:	e01c      	b.n	8002386 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d903      	bls.n	800235a <DMA_CheckFifoParam+0xb6>
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d003      	beq.n	8002360 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002358:	e018      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
      break;
 800235e:	e015      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00e      	beq.n	800238a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
      break;
 8002370:	e00b      	b.n	800238a <DMA_CheckFifoParam+0xe6>
      break;
 8002372:	bf00      	nop
 8002374:	e00a      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;
 8002376:	bf00      	nop
 8002378:	e008      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;
 800237a:	bf00      	nop
 800237c:	e006      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;
 800237e:	bf00      	nop
 8002380:	e004      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;
 8002382:	bf00      	nop
 8002384:	e002      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;   
 8002386:	bf00      	nop
 8002388:	e000      	b.n	800238c <DMA_CheckFifoParam+0xe8>
      break;
 800238a:	bf00      	nop
    }
  } 
  
  return status; 
 800238c:	7bfb      	ldrb	r3, [r7, #15]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop

0800239c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	e175      	b.n	80026a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023bc:	2201      	movs	r2, #1
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	f040 8164 	bne.w	80026a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d005      	beq.n	80023f2 <HAL_GPIO_Init+0x56>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d130      	bne.n	8002454 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	2203      	movs	r2, #3
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002428:	2201      	movs	r2, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 0201 	and.w	r2, r3, #1
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b03      	cmp	r3, #3
 800245e:	d017      	beq.n	8002490 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	2203      	movs	r2, #3
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d123      	bne.n	80024e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	08da      	lsrs	r2, r3, #3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3208      	adds	r2, #8
 80024a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	220f      	movs	r2, #15
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	08da      	lsrs	r2, r3, #3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	3208      	adds	r2, #8
 80024de:	69b9      	ldr	r1, [r7, #24]
 80024e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2203      	movs	r2, #3
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0203 	and.w	r2, r3, #3
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80be 	beq.w	80026a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002526:	4b66      	ldr	r3, [pc, #408]	; (80026c0 <HAL_GPIO_Init+0x324>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	4a65      	ldr	r2, [pc, #404]	; (80026c0 <HAL_GPIO_Init+0x324>)
 800252c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002530:	6453      	str	r3, [r2, #68]	; 0x44
 8002532:	4b63      	ldr	r3, [pc, #396]	; (80026c0 <HAL_GPIO_Init+0x324>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800253e:	4a61      	ldr	r2, [pc, #388]	; (80026c4 <HAL_GPIO_Init+0x328>)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	3302      	adds	r3, #2
 8002546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_GPIO_Init+0x32c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d037      	beq.n	80025da <HAL_GPIO_Init+0x23e>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a57      	ldr	r2, [pc, #348]	; (80026cc <HAL_GPIO_Init+0x330>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d031      	beq.n	80025d6 <HAL_GPIO_Init+0x23a>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a56      	ldr	r2, [pc, #344]	; (80026d0 <HAL_GPIO_Init+0x334>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02b      	beq.n	80025d2 <HAL_GPIO_Init+0x236>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a55      	ldr	r2, [pc, #340]	; (80026d4 <HAL_GPIO_Init+0x338>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d025      	beq.n	80025ce <HAL_GPIO_Init+0x232>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a54      	ldr	r2, [pc, #336]	; (80026d8 <HAL_GPIO_Init+0x33c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01f      	beq.n	80025ca <HAL_GPIO_Init+0x22e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a53      	ldr	r2, [pc, #332]	; (80026dc <HAL_GPIO_Init+0x340>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d019      	beq.n	80025c6 <HAL_GPIO_Init+0x22a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a52      	ldr	r2, [pc, #328]	; (80026e0 <HAL_GPIO_Init+0x344>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_GPIO_Init+0x226>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a51      	ldr	r2, [pc, #324]	; (80026e4 <HAL_GPIO_Init+0x348>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00d      	beq.n	80025be <HAL_GPIO_Init+0x222>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a50      	ldr	r2, [pc, #320]	; (80026e8 <HAL_GPIO_Init+0x34c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d007      	beq.n	80025ba <HAL_GPIO_Init+0x21e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4f      	ldr	r2, [pc, #316]	; (80026ec <HAL_GPIO_Init+0x350>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_GPIO_Init+0x21a>
 80025b2:	2309      	movs	r3, #9
 80025b4:	e012      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025b6:	230a      	movs	r3, #10
 80025b8:	e010      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025ba:	2308      	movs	r3, #8
 80025bc:	e00e      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025be:	2307      	movs	r3, #7
 80025c0:	e00c      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025c2:	2306      	movs	r3, #6
 80025c4:	e00a      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025c6:	2305      	movs	r3, #5
 80025c8:	e008      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025ca:	2304      	movs	r3, #4
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025ce:	2303      	movs	r3, #3
 80025d0:	e004      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_GPIO_Init+0x240>
 80025da:	2300      	movs	r3, #0
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	f002 0203 	and.w	r2, r2, #3
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	4093      	lsls	r3, r2
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025ec:	4935      	ldr	r1, [pc, #212]	; (80026c4 <HAL_GPIO_Init+0x328>)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fa:	4b3d      	ldr	r3, [pc, #244]	; (80026f0 <HAL_GPIO_Init+0x354>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261e:	4a34      	ldr	r2, [pc, #208]	; (80026f0 <HAL_GPIO_Init+0x354>)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002624:	4b32      	ldr	r3, [pc, #200]	; (80026f0 <HAL_GPIO_Init+0x354>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002648:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <HAL_GPIO_Init+0x354>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800264e:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <HAL_GPIO_Init+0x354>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002672:	4a1f      	ldr	r2, [pc, #124]	; (80026f0 <HAL_GPIO_Init+0x354>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_GPIO_Init+0x354>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800269c:	4a14      	ldr	r2, [pc, #80]	; (80026f0 <HAL_GPIO_Init+0x354>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3301      	adds	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b0f      	cmp	r3, #15
 80026ac:	f67f ae86 	bls.w	80023bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40013800 	.word	0x40013800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020400 	.word	0x40020400
 80026d0:	40020800 	.word	0x40020800
 80026d4:	40020c00 	.word	0x40020c00
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40021400 	.word	0x40021400
 80026e0:	40021800 	.word	0x40021800
 80026e4:	40021c00 	.word	0x40021c00
 80026e8:	40022000 	.word	0x40022000
 80026ec:	40022400 	.word	0x40022400
 80026f0:	40013c00 	.word	0x40013c00

080026f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	807b      	strh	r3, [r7, #2]
 8002700:	4613      	mov	r3, r2
 8002702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002704:	787b      	ldrb	r3, [r7, #1]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800270a:	887a      	ldrh	r2, [r7, #2]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002710:	e003      	b.n	800271a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002712:	887b      	ldrh	r3, [r7, #2]
 8002714:	041a      	lsls	r2, r3, #16
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	619a      	str	r2, [r3, #24]
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a04      	ldr	r2, [pc, #16]	; (8002744 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002736:	6013      	str	r3, [r2, #0]
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40007000 	.word	0x40007000

08002748 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	4b23      	ldr	r3, [pc, #140]	; (80027e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a22      	ldr	r2, [pc, #136]	; (80027e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800276a:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002774:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002776:	f7fe fcf9 	bl	800116c <HAL_GetTick>
 800277a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800277c:	e009      	b.n	8002792 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800277e:	f7fe fcf5 	bl	800116c <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800278c:	d901      	bls.n	8002792 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e022      	b.n	80027d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002792:	4b14      	ldr	r3, [pc, #80]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800279e:	d1ee      	bne.n	800277e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027a0:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a0f      	ldr	r2, [pc, #60]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027ac:	f7fe fcde 	bl	800116c <HAL_GetTick>
 80027b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027b2:	e009      	b.n	80027c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027b4:	f7fe fcda 	bl	800116c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c2:	d901      	bls.n	80027c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e007      	b.n	80027d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027d4:	d1ee      	bne.n	80027b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80027d6:	2300      	movs	r3, #0
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40007000 	.word	0x40007000

080027e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80027f0:	2300      	movs	r3, #0
 80027f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e29b      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8087 	beq.w	800291a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800280c:	4b96      	ldr	r3, [pc, #600]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b04      	cmp	r3, #4
 8002816:	d00c      	beq.n	8002832 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002818:	4b93      	ldr	r3, [pc, #588]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b08      	cmp	r3, #8
 8002822:	d112      	bne.n	800284a <HAL_RCC_OscConfig+0x62>
 8002824:	4b90      	ldr	r3, [pc, #576]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002830:	d10b      	bne.n	800284a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002832:	4b8d      	ldr	r3, [pc, #564]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d06c      	beq.n	8002918 <HAL_RCC_OscConfig+0x130>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d168      	bne.n	8002918 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e275      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002852:	d106      	bne.n	8002862 <HAL_RCC_OscConfig+0x7a>
 8002854:	4b84      	ldr	r3, [pc, #528]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a83      	ldr	r2, [pc, #524]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800285a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	e02e      	b.n	80028c0 <HAL_RCC_OscConfig+0xd8>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10c      	bne.n	8002884 <HAL_RCC_OscConfig+0x9c>
 800286a:	4b7f      	ldr	r3, [pc, #508]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a7e      	ldr	r2, [pc, #504]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	4b7c      	ldr	r3, [pc, #496]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a7b      	ldr	r2, [pc, #492]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800287c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	e01d      	b.n	80028c0 <HAL_RCC_OscConfig+0xd8>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0xc0>
 800288e:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a75      	ldr	r2, [pc, #468]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	4b73      	ldr	r3, [pc, #460]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a72      	ldr	r2, [pc, #456]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e00b      	b.n	80028c0 <HAL_RCC_OscConfig+0xd8>
 80028a8:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a6e      	ldr	r2, [pc, #440]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	4b6c      	ldr	r3, [pc, #432]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a6b      	ldr	r2, [pc, #428]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d013      	beq.n	80028f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7fe fc50 	bl	800116c <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d0:	f7fe fc4c 	bl	800116c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e229      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	4b61      	ldr	r3, [pc, #388]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0xe8>
 80028ee:	e014      	b.n	800291a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fc3c 	bl	800116c <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f8:	f7fe fc38 	bl	800116c <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e215      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290a:	4b57      	ldr	r3, [pc, #348]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x110>
 8002916:	e000      	b.n	800291a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d069      	beq.n	80029fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002926:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002932:	4b4d      	ldr	r3, [pc, #308]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b08      	cmp	r3, #8
 800293c:	d11c      	bne.n	8002978 <HAL_RCC_OscConfig+0x190>
 800293e:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d116      	bne.n	8002978 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_RCC_OscConfig+0x17a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d001      	beq.n	8002962 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e1e9      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002962:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	493d      	ldr	r1, [pc, #244]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002976:	e040      	b.n	80029fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d023      	beq.n	80029c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002980:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a38      	ldr	r2, [pc, #224]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fbee 	bl	800116c <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002994:	f7fe fbea 	bl	800116c <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e1c7      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a6:	4b30      	ldr	r3, [pc, #192]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b2:	4b2d      	ldr	r3, [pc, #180]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4929      	ldr	r1, [pc, #164]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
 80029c6:	e018      	b.n	80029fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c8:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a26      	ldr	r2, [pc, #152]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fbca 	bl	800116c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029dc:	f7fe fbc6 	bl	800116c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e1a3      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ee:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d038      	beq.n	8002a78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d019      	beq.n	8002a42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a12:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fba7 	bl	800116c <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a22:	f7fe fba3 	bl	800116c <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e180      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x23a>
 8002a40:	e01a      	b.n	8002a78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a46:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <HAL_RCC_OscConfig+0x280>)
 8002a48:	f023 0301 	bic.w	r3, r3, #1
 8002a4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fb8d 	bl	800116c <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a56:	f7fe fb89 	bl	800116c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d903      	bls.n	8002a6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e166      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>
 8002a68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6c:	4b92      	ldr	r3, [pc, #584]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1ee      	bne.n	8002a56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80a4 	beq.w	8002bce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a86:	4b8c      	ldr	r3, [pc, #560]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10d      	bne.n	8002aae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a92:	4b89      	ldr	r3, [pc, #548]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	4a88      	ldr	r2, [pc, #544]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9e:	4b86      	ldr	r3, [pc, #536]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aae:	4b83      	ldr	r3, [pc, #524]	; (8002cbc <HAL_RCC_OscConfig+0x4d4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d118      	bne.n	8002aec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002aba:	4b80      	ldr	r3, [pc, #512]	; (8002cbc <HAL_RCC_OscConfig+0x4d4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a7f      	ldr	r2, [pc, #508]	; (8002cbc <HAL_RCC_OscConfig+0x4d4>)
 8002ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac6:	f7fe fb51 	bl	800116c <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002acc:	e008      	b.n	8002ae0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ace:	f7fe fb4d 	bl	800116c <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b64      	cmp	r3, #100	; 0x64
 8002ada:	d901      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e12a      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae0:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCC_OscConfig+0x4d4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d0f0      	beq.n	8002ace <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d106      	bne.n	8002b02 <HAL_RCC_OscConfig+0x31a>
 8002af4:	4b70      	ldr	r3, [pc, #448]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	4a6f      	ldr	r2, [pc, #444]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	6713      	str	r3, [r2, #112]	; 0x70
 8002b00:	e02d      	b.n	8002b5e <HAL_RCC_OscConfig+0x376>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_RCC_OscConfig+0x33c>
 8002b0a:	4b6b      	ldr	r3, [pc, #428]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a6a      	ldr	r2, [pc, #424]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
 8002b16:	4b68      	ldr	r3, [pc, #416]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	4a67      	ldr	r2, [pc, #412]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	6713      	str	r3, [r2, #112]	; 0x70
 8002b22:	e01c      	b.n	8002b5e <HAL_RCC_OscConfig+0x376>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	d10c      	bne.n	8002b46 <HAL_RCC_OscConfig+0x35e>
 8002b2c:	4b62      	ldr	r3, [pc, #392]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b30:	4a61      	ldr	r2, [pc, #388]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	6713      	str	r3, [r2, #112]	; 0x70
 8002b38:	4b5f      	ldr	r3, [pc, #380]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	4a5e      	ldr	r2, [pc, #376]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6713      	str	r3, [r2, #112]	; 0x70
 8002b44:	e00b      	b.n	8002b5e <HAL_RCC_OscConfig+0x376>
 8002b46:	4b5c      	ldr	r3, [pc, #368]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	4a5b      	ldr	r2, [pc, #364]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	; 0x70
 8002b52:	4b59      	ldr	r3, [pc, #356]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	4a58      	ldr	r2, [pc, #352]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002b58:	f023 0304 	bic.w	r3, r3, #4
 8002b5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d015      	beq.n	8002b92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fe fb01 	bl	800116c <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe fafd 	bl	800116c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e0d8      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	4b4c      	ldr	r3, [pc, #304]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ee      	beq.n	8002b6e <HAL_RCC_OscConfig+0x386>
 8002b90:	e014      	b.n	8002bbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b92:	f7fe faeb 	bl	800116c <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fe fae7 	bl	800116c <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e0c2      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb0:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ee      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d105      	bne.n	8002bce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc2:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	4a3c      	ldr	r2, [pc, #240]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 80ae 	beq.w	8002d34 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd8:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d06d      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d14b      	bne.n	8002c84 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a31      	ldr	r2, [pc, #196]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fab8 	bl	800116c <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fab4 	bl	800116c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e091      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	4b29      	ldr	r3, [pc, #164]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	019b      	lsls	r3, r3, #6
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	3b01      	subs	r3, #1
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	071b      	lsls	r3, r3, #28
 8002c4a:	491b      	ldr	r1, [pc, #108]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fa86 	bl	800116c <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c64:	f7fe fa82 	bl	800116c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e05f      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x47c>
 8002c82:	e057      	b.n	8002d34 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe fa6c 	bl	800116c <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe fa68 	bl	800116c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e045      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <HAL_RCC_OscConfig+0x4d0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4b0>
 8002cb6:	e03d      	b.n	8002d34 <HAL_RCC_OscConfig+0x54c>
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <HAL_RCC_OscConfig+0x558>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d030      	beq.n	8002d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d129      	bne.n	8002d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d122      	bne.n	8002d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cf6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d119      	bne.n	8002d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d10f      	bne.n	8002d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d107      	bne.n	8002d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800

08002d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0d0      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b6a      	ldr	r3, [pc, #424]	; (8002f08 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d910      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b67      	ldr	r3, [pc, #412]	; (8002f08 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 020f 	bic.w	r2, r3, #15
 8002d72:	4965      	ldr	r1, [pc, #404]	; (8002f08 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b63      	ldr	r3, [pc, #396]	; (8002f08 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0b8      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d020      	beq.n	8002dda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da4:	4b59      	ldr	r3, [pc, #356]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a58      	ldr	r2, [pc, #352]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dbc:	4b53      	ldr	r3, [pc, #332]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a52      	ldr	r2, [pc, #328]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc8:	4b50      	ldr	r3, [pc, #320]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	494d      	ldr	r1, [pc, #308]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d040      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d107      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	4b47      	ldr	r3, [pc, #284]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d115      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e07f      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e06:	4b41      	ldr	r3, [pc, #260]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e073      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e16:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e06b      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e26:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f023 0203 	bic.w	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4936      	ldr	r1, [pc, #216]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e38:	f7fe f998 	bl	800116c <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e40:	f7fe f994 	bl	800116c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e053      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e56:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 020c 	and.w	r2, r3, #12
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d1eb      	bne.n	8002e40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d210      	bcs.n	8002e98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 020f 	bic.w	r2, r3, #15
 8002e7e:	4922      	ldr	r1, [pc, #136]	; (8002f08 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b20      	ldr	r3, [pc, #128]	; (8002f08 <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e032      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4916      	ldr	r1, [pc, #88]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ec2:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	490e      	ldr	r1, [pc, #56]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ed6:	f000 f821 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 8002eda:	4602      	mov	r2, r0
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	490a      	ldr	r1, [pc, #40]	; (8002f10 <HAL_RCC_ClockConfig+0x1cc>)
 8002ee8:	5ccb      	ldrb	r3, [r1, r3]
 8002eea:	fa22 f303 	lsr.w	r3, r2, r3
 8002eee:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <HAL_RCC_ClockConfig+0x1d0>)
 8002ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_RCC_ClockConfig+0x1d4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe f8f4 	bl	80010e4 <HAL_InitTick>

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40023c00 	.word	0x40023c00
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	08005700 	.word	0x08005700
 8002f14:	20000014 	.word	0x20000014
 8002f18:	20000018 	.word	0x20000018

08002f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	607b      	str	r3, [r7, #4]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f34:	4b67      	ldr	r3, [pc, #412]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f003 030c 	and.w	r3, r3, #12
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d00d      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x40>
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	f200 80bd 	bhi.w	80030c0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x34>
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d003      	beq.n	8002f56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f4e:	e0b7      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f50:	4b61      	ldr	r3, [pc, #388]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002f52:	60bb      	str	r3, [r7, #8]
      break;
 8002f54:	e0b7      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f56:	4b61      	ldr	r3, [pc, #388]	; (80030dc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002f58:	60bb      	str	r3, [r7, #8]
      break;
 8002f5a:	e0b4      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f5c:	4b5d      	ldr	r3, [pc, #372]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f64:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f66:	4b5b      	ldr	r3, [pc, #364]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d04d      	beq.n	800300e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f72:	4b58      	ldr	r3, [pc, #352]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	099b      	lsrs	r3, r3, #6
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f04f 0300 	mov.w	r3, #0
 8002f7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	ea02 0800 	and.w	r8, r2, r0
 8002f8a:	ea03 0901 	and.w	r9, r3, r1
 8002f8e:	4640      	mov	r0, r8
 8002f90:	4649      	mov	r1, r9
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 0300 	mov.w	r3, #0
 8002f9a:	014b      	lsls	r3, r1, #5
 8002f9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fa0:	0142      	lsls	r2, r0, #5
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	ebb0 0008 	subs.w	r0, r0, r8
 8002faa:	eb61 0109 	sbc.w	r1, r1, r9
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	018b      	lsls	r3, r1, #6
 8002fb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fbc:	0182      	lsls	r2, r0, #6
 8002fbe:	1a12      	subs	r2, r2, r0
 8002fc0:	eb63 0301 	sbc.w	r3, r3, r1
 8002fc4:	f04f 0000 	mov.w	r0, #0
 8002fc8:	f04f 0100 	mov.w	r1, #0
 8002fcc:	00d9      	lsls	r1, r3, #3
 8002fce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fd2:	00d0      	lsls	r0, r2, #3
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	eb12 0208 	adds.w	r2, r2, r8
 8002fdc:	eb43 0309 	adc.w	r3, r3, r9
 8002fe0:	f04f 0000 	mov.w	r0, #0
 8002fe4:	f04f 0100 	mov.w	r1, #0
 8002fe8:	0259      	lsls	r1, r3, #9
 8002fea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002fee:	0250      	lsls	r0, r2, #9
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4610      	mov	r0, r2
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	f7fd f96e 	bl	80002e0 <__aeabi_uldivmod>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4613      	mov	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	e04a      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300e:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	099b      	lsrs	r3, r3, #6
 8003014:	461a      	mov	r2, r3
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800301e:	f04f 0100 	mov.w	r1, #0
 8003022:	ea02 0400 	and.w	r4, r2, r0
 8003026:	ea03 0501 	and.w	r5, r3, r1
 800302a:	4620      	mov	r0, r4
 800302c:	4629      	mov	r1, r5
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	014b      	lsls	r3, r1, #5
 8003038:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800303c:	0142      	lsls	r2, r0, #5
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	1b00      	subs	r0, r0, r4
 8003044:	eb61 0105 	sbc.w	r1, r1, r5
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	018b      	lsls	r3, r1, #6
 8003052:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003056:	0182      	lsls	r2, r0, #6
 8003058:	1a12      	subs	r2, r2, r0
 800305a:	eb63 0301 	sbc.w	r3, r3, r1
 800305e:	f04f 0000 	mov.w	r0, #0
 8003062:	f04f 0100 	mov.w	r1, #0
 8003066:	00d9      	lsls	r1, r3, #3
 8003068:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800306c:	00d0      	lsls	r0, r2, #3
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	1912      	adds	r2, r2, r4
 8003074:	eb45 0303 	adc.w	r3, r5, r3
 8003078:	f04f 0000 	mov.w	r0, #0
 800307c:	f04f 0100 	mov.w	r1, #0
 8003080:	0299      	lsls	r1, r3, #10
 8003082:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003086:	0290      	lsls	r0, r2, #10
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	461a      	mov	r2, r3
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	f7fd f922 	bl	80002e0 <__aeabi_uldivmod>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4613      	mov	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	0c1b      	lsrs	r3, r3, #16
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	3301      	adds	r3, #1
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030bc:	60bb      	str	r3, [r7, #8]
      break;
 80030be:	e002      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030c2:	60bb      	str	r3, [r7, #8]
      break;
 80030c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030c6:	68bb      	ldr	r3, [r7, #8]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800
 80030d8:	00f42400 	.word	0x00f42400
 80030dc:	007a1200 	.word	0x007a1200

080030e0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e4:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000014 	.word	0x20000014

080030f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030fc:	f7ff fff0 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 8003100:	4602      	mov	r2, r0
 8003102:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	0a9b      	lsrs	r3, r3, #10
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	4903      	ldr	r1, [pc, #12]	; (800311c <HAL_RCC_GetPCLK1Freq+0x24>)
 800310e:	5ccb      	ldrb	r3, [r1, r3]
 8003110:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003114:	4618      	mov	r0, r3
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40023800 	.word	0x40023800
 800311c:	08005710 	.word	0x08005710

08003120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003124:	f7ff ffdc 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 8003128:	4602      	mov	r2, r0
 800312a:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_RCC_GetPCLK2Freq+0x20>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	0b5b      	lsrs	r3, r3, #13
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	4903      	ldr	r1, [pc, #12]	; (8003144 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003136:	5ccb      	ldrb	r3, [r1, r3]
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800313c:	4618      	mov	r0, r3
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40023800 	.word	0x40023800
 8003144:	08005710 	.word	0x08005710

08003148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d012      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003170:	4b69      	ldr	r3, [pc, #420]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a68      	ldr	r2, [pc, #416]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003176:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800317a:	6093      	str	r3, [r2, #8]
 800317c:	4b66      	ldr	r3, [pc, #408]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003184:	4964      	ldr	r1, [pc, #400]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003186:	4313      	orrs	r3, r2
 8003188:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003192:	2301      	movs	r3, #1
 8003194:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d017      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031a2:	4b5d      	ldr	r3, [pc, #372]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b0:	4959      	ldr	r1, [pc, #356]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c0:	d101      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031c2:	2301      	movs	r3, #1
 80031c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031ce:	2301      	movs	r3, #1
 80031d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d017      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031de:	4b4e      	ldr	r3, [pc, #312]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	494a      	ldr	r1, [pc, #296]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fc:	d101      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031fe:	2301      	movs	r3, #1
 8003200:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800320a:	2301      	movs	r3, #1
 800320c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800321a:	2301      	movs	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0320 	and.w	r3, r3, #32
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 808b 	beq.w	8003342 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800322c:	4b3a      	ldr	r3, [pc, #232]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	4a39      	ldr	r2, [pc, #228]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003236:	6413      	str	r3, [r2, #64]	; 0x40
 8003238:	4b37      	ldr	r3, [pc, #220]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003244:	4b35      	ldr	r3, [pc, #212]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a34      	ldr	r2, [pc, #208]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800324a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003250:	f7fd ff8c 	bl	800116c <HAL_GetTick>
 8003254:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003258:	f7fd ff88 	bl	800116c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	; 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e38f      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800326a:	4b2c      	ldr	r3, [pc, #176]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003276:	4b28      	ldr	r3, [pc, #160]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d035      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	429a      	cmp	r2, r3
 8003292:	d02e      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003294:	4b20      	ldr	r3, [pc, #128]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800329e:	4b1e      	ldr	r3, [pc, #120]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a1d      	ldr	r2, [pc, #116]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032aa:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a1a      	ldr	r2, [pc, #104]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032b6:	4a18      	ldr	r2, [pc, #96]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032bc:	4b16      	ldr	r3, [pc, #88]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d114      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fd ff50 	bl	800116c <HAL_GetTick>
 80032cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ce:	e00a      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032d0:	f7fd ff4c 	bl	800116c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	f241 3288 	movw	r2, #5000	; 0x1388
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e351      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0ee      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032fe:	d111      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800330e:	400b      	ands	r3, r1
 8003310:	4901      	ldr	r1, [pc, #4]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
 8003316:	e00b      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003318:	40023800 	.word	0x40023800
 800331c:	40007000 	.word	0x40007000
 8003320:	0ffffcff 	.word	0x0ffffcff
 8003324:	4bb3      	ldr	r3, [pc, #716]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4ab2      	ldr	r2, [pc, #712]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800332e:	6093      	str	r3, [r2, #8]
 8003330:	4bb0      	ldr	r3, [pc, #704]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003332:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800333c:	49ad      	ldr	r1, [pc, #692]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800333e:	4313      	orrs	r3, r2
 8003340:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	2b00      	cmp	r3, #0
 800334c:	d010      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800334e:	4ba9      	ldr	r3, [pc, #676]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003354:	4aa7      	ldr	r2, [pc, #668]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800335a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800335e:	4ba5      	ldr	r3, [pc, #660]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003360:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003368:	49a2      	ldr	r1, [pc, #648]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800337c:	4b9d      	ldr	r3, [pc, #628]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800337e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003382:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800338a:	499a      	ldr	r1, [pc, #616]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800339e:	4b95      	ldr	r3, [pc, #596]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033ac:	4991      	ldr	r1, [pc, #580]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033c0:	4b8c      	ldr	r3, [pc, #560]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ce:	4989      	ldr	r1, [pc, #548]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033e2:	4b84      	ldr	r3, [pc, #528]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	4980      	ldr	r1, [pc, #512]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003404:	4b7b      	ldr	r3, [pc, #492]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	f023 0203 	bic.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	4978      	ldr	r1, [pc, #480]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003426:	4b73      	ldr	r3, [pc, #460]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	f023 020c 	bic.w	r2, r3, #12
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003434:	496f      	ldr	r1, [pc, #444]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00a      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003448:	4b6a      	ldr	r3, [pc, #424]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003456:	4967      	ldr	r1, [pc, #412]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003458:	4313      	orrs	r3, r2
 800345a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800346a:	4b62      	ldr	r3, [pc, #392]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800346c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003470:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003478:	495e      	ldr	r1, [pc, #376]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800348c:	4b59      	ldr	r3, [pc, #356]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	4956      	ldr	r1, [pc, #344]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034ae:	4b51      	ldr	r3, [pc, #324]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	494d      	ldr	r1, [pc, #308]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034d0:	4b48      	ldr	r3, [pc, #288]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034de:	4945      	ldr	r1, [pc, #276]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034f2:	4b40      	ldr	r3, [pc, #256]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80034f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003500:	493c      	ldr	r1, [pc, #240]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003514:	4b37      	ldr	r3, [pc, #220]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003522:	4934      	ldr	r1, [pc, #208]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d011      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003536:	4b2f      	ldr	r3, [pc, #188]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003544:	492b      	ldr	r1, [pc, #172]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003554:	d101      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003556:	2301      	movs	r3, #1
 8003558:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003576:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003584:	491b      	ldr	r1, [pc, #108]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00b      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003598:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a8:	4912      	ldr	r1, [pc, #72]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00b      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80035bc:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035cc:	4909      	ldr	r1, [pc, #36]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00f      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035e0:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80035e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	e002      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	4986      	ldr	r1, [pc, #536]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00b      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800360c:	4b81      	ldr	r3, [pc, #516]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800360e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003612:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800361c:	497d      	ldr	r1, [pc, #500]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d006      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 80d6 	beq.w	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003638:	4b76      	ldr	r3, [pc, #472]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a75      	ldr	r2, [pc, #468]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800363e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003644:	f7fd fd92 	bl	800116c <HAL_GetTick>
 8003648:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800364c:	f7fd fd8e 	bl	800116c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b64      	cmp	r3, #100	; 0x64
 8003658:	d901      	bls.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e195      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800365e:	4b6d      	ldr	r3, [pc, #436]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d021      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367a:	2b00      	cmp	r3, #0
 800367c:	d11d      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800367e:	4b65      	ldr	r3, [pc, #404]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003680:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003684:	0c1b      	lsrs	r3, r3, #16
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800368c:	4b61      	ldr	r3, [pc, #388]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800368e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003692:	0e1b      	lsrs	r3, r3, #24
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	019a      	lsls	r2, r3, #6
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	041b      	lsls	r3, r3, #16
 80036a4:	431a      	orrs	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	061b      	lsls	r3, r3, #24
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	071b      	lsls	r3, r3, #28
 80036b2:	4958      	ldr	r1, [pc, #352]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d004      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ce:	d00a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d02e      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e4:	d129      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036e6:	4b4b      	ldr	r3, [pc, #300]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036f4:	4b47      	ldr	r3, [pc, #284]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036fa:	0f1b      	lsrs	r3, r3, #28
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	019a      	lsls	r2, r3, #6
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	041b      	lsls	r3, r3, #16
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	061b      	lsls	r3, r3, #24
 8003714:	431a      	orrs	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	071b      	lsls	r3, r3, #28
 800371a:	493e      	ldr	r1, [pc, #248]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003722:	4b3c      	ldr	r3, [pc, #240]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003728:	f023 021f 	bic.w	r2, r3, #31
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	3b01      	subs	r3, #1
 8003732:	4938      	ldr	r1, [pc, #224]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01d      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003746:	4b33      	ldr	r3, [pc, #204]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800374c:	0e1b      	lsrs	r3, r3, #24
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003754:	4b2f      	ldr	r3, [pc, #188]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800375a:	0f1b      	lsrs	r3, r3, #28
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	019a      	lsls	r2, r3, #6
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	431a      	orrs	r2, r3
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	061b      	lsls	r3, r3, #24
 8003774:	431a      	orrs	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	071b      	lsls	r3, r3, #28
 800377a:	4926      	ldr	r1, [pc, #152]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d011      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	019a      	lsls	r2, r3, #6
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	041b      	lsls	r3, r3, #16
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	061b      	lsls	r3, r3, #24
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	071b      	lsls	r3, r3, #28
 80037aa:	491a      	ldr	r1, [pc, #104]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a17      	ldr	r2, [pc, #92]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037be:	f7fd fcd5 	bl	800116c <HAL_GetTick>
 80037c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037c6:	f7fd fcd1 	bl	800116c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b64      	cmp	r3, #100	; 0x64
 80037d2:	d901      	bls.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e0d8      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037d8:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	f040 80ce 	bne.w	8003988 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037ec:	4b09      	ldr	r3, [pc, #36]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a08      	ldr	r2, [pc, #32]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f8:	f7fd fcb8 	bl	800116c <HAL_GetTick>
 80037fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037fe:	e00b      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003800:	f7fd fcb4 	bl	800116c <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b64      	cmp	r3, #100	; 0x64
 800380c:	d904      	bls.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e0bb      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003818:	4b5e      	ldr	r3, [pc, #376]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003824:	d0ec      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003842:	2b00      	cmp	r3, #0
 8003844:	d02e      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	2b00      	cmp	r3, #0
 800384c:	d12a      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800384e:	4b51      	ldr	r3, [pc, #324]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003854:	0c1b      	lsrs	r3, r3, #16
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800385c:	4b4d      	ldr	r3, [pc, #308]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003862:	0f1b      	lsrs	r3, r3, #28
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	019a      	lsls	r2, r3, #6
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	041b      	lsls	r3, r3, #16
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	061b      	lsls	r3, r3, #24
 800387c:	431a      	orrs	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	071b      	lsls	r3, r3, #28
 8003882:	4944      	ldr	r1, [pc, #272]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800388a:	4b42      	ldr	r3, [pc, #264]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800388c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003890:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	3b01      	subs	r3, #1
 800389a:	021b      	lsls	r3, r3, #8
 800389c:	493d      	ldr	r1, [pc, #244]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d022      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038b8:	d11d      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038ba:	4b36      	ldr	r3, [pc, #216]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c0:	0e1b      	lsrs	r3, r3, #24
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038c8:	4b32      	ldr	r3, [pc, #200]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	0f1b      	lsrs	r3, r3, #28
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	019a      	lsls	r2, r3, #6
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	041b      	lsls	r3, r3, #16
 80038e2:	431a      	orrs	r2, r3
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	061b      	lsls	r3, r3, #24
 80038e8:	431a      	orrs	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	071b      	lsls	r3, r3, #28
 80038ee:	4929      	ldr	r1, [pc, #164]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d028      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003902:	4b24      	ldr	r3, [pc, #144]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	0e1b      	lsrs	r3, r3, #24
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003910:	4b20      	ldr	r3, [pc, #128]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003916:	0c1b      	lsrs	r3, r3, #16
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	019a      	lsls	r2, r3, #6
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	431a      	orrs	r2, r3
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	071b      	lsls	r3, r3, #28
 8003936:	4917      	ldr	r1, [pc, #92]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394c:	4911      	ldr	r1, [pc, #68]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0e      	ldr	r2, [pc, #56]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800395a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003960:	f7fd fc04 	bl	800116c <HAL_GetTick>
 8003964:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003966:	e008      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003968:	f7fd fc00 	bl	800116c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b64      	cmp	r3, #100	; 0x64
 8003974:	d901      	bls.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e007      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003986:	d1ef      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800

08003998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e040      	b.n	8003a2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fd f996 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2224      	movs	r2, #36	; 0x24
 80039c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fc50 	bl	800427c <UART_SetConfig>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e022      	b.n	8003a2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 fea6 	bl	8004740 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 ff2d 	bl	8004884 <UART_CheckIdleState>
 8003a2a:	4603      	mov	r3, r0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08a      	sub	sp, #40	; 0x28
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	f040 8081 	bne.w	8003b50 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_UART_Transmit+0x26>
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e079      	b.n	8003b52 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_UART_Transmit+0x38>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e072      	b.n	8003b52 <HAL_UART_Transmit+0x11e>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2221      	movs	r2, #33	; 0x21
 8003a80:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a82:	f7fd fb73 	bl	800116c <HAL_GetTick>
 8003a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	88fa      	ldrh	r2, [r7, #6]
 8003a8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	88fa      	ldrh	r2, [r7, #6]
 8003a94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa0:	d108      	bne.n	8003ab4 <HAL_UART_Transmit+0x80>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	e003      	b.n	8003abc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003ac4:	e02c      	b.n	8003b20 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2180      	movs	r1, #128	; 0x80
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 ff20 	bl	8004916 <UART_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e038      	b.n	8003b52 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10b      	bne.n	8003afe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	461a      	mov	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003af4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	3302      	adds	r3, #2
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e007      	b.n	8003b0e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	781a      	ldrb	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1cc      	bne.n	8003ac6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2200      	movs	r2, #0
 8003b34:	2140      	movs	r1, #64	; 0x40
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 feed 	bl	8004916 <UART_WaitOnFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e005      	b.n	8003b52 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	e000      	b.n	8003b52 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003b50:	2302      	movs	r3, #2
  }
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3720      	adds	r7, #32
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	; 0x28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d178      	bne.n	8003c64 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_UART_Transmit_DMA+0x22>
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e071      	b.n	8003c66 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_UART_Transmit_DMA+0x34>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e06a      	b.n	8003c66 <HAL_UART_Transmit_DMA+0x10a>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	88fa      	ldrh	r2, [r7, #6]
 8003ba2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	88fa      	ldrh	r2, [r7, #6]
 8003baa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2221      	movs	r2, #33	; 0x21
 8003bba:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d02b      	beq.n	8003c1c <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc8:	4a29      	ldr	r2, [pc, #164]	; (8003c70 <HAL_UART_Transmit_DMA+0x114>)
 8003bca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd0:	4a28      	ldr	r2, [pc, #160]	; (8003c74 <HAL_UART_Transmit_DMA+0x118>)
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd8:	4a27      	ldr	r2, [pc, #156]	; (8003c78 <HAL_UART_Transmit_DMA+0x11c>)
 8003bda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be0:	2200      	movs	r2, #0
 8003be2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bec:	4619      	mov	r1, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3328      	adds	r3, #40	; 0x28
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	f7fe f874 	bl	8001ce4 <HAL_DMA_Start_IT>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00c      	beq.n	8003c1c <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2210      	movs	r2, #16
 8003c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e024      	b.n	8003c66 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2240      	movs	r2, #64	; 0x40
 8003c22:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3308      	adds	r3, #8
 8003c32:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3308      	adds	r3, #8
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4c:	623a      	str	r2, [r7, #32]
 8003c4e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	69f9      	ldr	r1, [r7, #28]
 8003c52:	6a3a      	ldr	r2, [r7, #32]
 8003c54:	e841 2300 	strex	r3, r2, [r1]
 8003c58:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1e5      	bne.n	8003c2c <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	e000      	b.n	8003c66 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003c64:	2302      	movs	r3, #2
  }
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3728      	adds	r7, #40	; 0x28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	08004bb1 	.word	0x08004bb1
 8003c74:	08004c47 	.word	0x08004c47
 8003c78:	08004c63 	.word	0x08004c63

08003c7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b0ba      	sub	sp, #232	; 0xe8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ca2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ca6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003caa:	4013      	ands	r3, r2
 8003cac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003cb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d115      	bne.n	8003ce4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00f      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d009      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 82a4 	beq.w	8004222 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4798      	blx	r3
      }
      return;
 8003ce2:	e29e      	b.n	8004222 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ce4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8117 	beq.w	8003f1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003cfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003cfe:	4b85      	ldr	r3, [pc, #532]	; (8003f14 <HAL_UART_IRQHandler+0x298>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 810a 	beq.w	8003f1c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d011      	beq.n	8003d38 <HAL_UART_IRQHandler+0xbc>
 8003d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2201      	movs	r2, #1
 8003d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2e:	f043 0201 	orr.w	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d011      	beq.n	8003d68 <HAL_UART_IRQHandler+0xec>
 8003d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2202      	movs	r2, #2
 8003d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d5e:	f043 0204 	orr.w	r2, r3, #4
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d011      	beq.n	8003d98 <HAL_UART_IRQHandler+0x11c>
 8003d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2204      	movs	r2, #4
 8003d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d8e:	f043 0202 	orr.w	r2, r3, #2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d017      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d105      	bne.n	8003dbc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003db4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00b      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2208      	movs	r2, #8
 8003dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dca:	f043 0208 	orr.w	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d012      	beq.n	8003e06 <HAL_UART_IRQHandler+0x18a>
 8003de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00c      	beq.n	8003e06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003df4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dfc:	f043 0220 	orr.w	r2, r3, #32
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 820a 	beq.w	8004226 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4e:	2b40      	cmp	r3, #64	; 0x40
 8003e50:	d005      	beq.n	8003e5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d04f      	beq.n	8003efe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fe43 	bl	8004aea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d141      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3308      	adds	r3, #8
 8003e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3308      	adds	r3, #8
 8003e9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003eb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1d9      	bne.n	8003e72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d013      	beq.n	8003eee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <HAL_UART_IRQHandler+0x29c>)
 8003ecc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fd ffd6 	bl	8001e84 <HAL_DMA_Abort_IT>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d017      	beq.n	8003f0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eec:	e00f      	b.n	8003f0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f9a4 	bl	800423c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	e00b      	b.n	8003f0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f9a0 	bl	800423c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efc:	e007      	b.n	8003f0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f99c 	bl	800423c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003f0c:	e18b      	b.n	8004226 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0e:	bf00      	nop
    return;
 8003f10:	e189      	b.n	8004226 <HAL_UART_IRQHandler+0x5aa>
 8003f12:	bf00      	nop
 8003f14:	04000120 	.word	0x04000120
 8003f18:	08004cdf 	.word	0x08004cdf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	f040 8144 	bne.w	80041ae <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 813d 	beq.w	80041ae <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8136 	beq.w	80041ae <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2210      	movs	r2, #16
 8003f48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f54:	2b40      	cmp	r3, #64	; 0x40
 8003f56:	f040 80b2 	bne.w	80040be <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 815d 	beq.w	800422a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	f080 8155 	bcs.w	800422a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f94:	f000 8085 	beq.w	80040a2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fc6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1da      	bne.n	8003f98 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3308      	adds	r3, #8
 8004002:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004006:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800400a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800400e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e1      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3308      	adds	r3, #8
 8004024:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004026:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800402e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3308      	adds	r3, #8
 800403e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004042:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004044:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004046:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004048:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800404a:	e841 2300 	strex	r3, r2, [r1]
 800404e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1e3      	bne.n	800401e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004072:	f023 0310 	bic.w	r3, r3, #16
 8004076:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004084:	65bb      	str	r3, [r7, #88]	; 0x58
 8004086:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800408a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e4      	bne.n	8004062 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409c:	4618      	mov	r0, r3
 800409e:	f7fd fe81 	bl	8001da4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f8ca 	bl	8004250 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040bc:	e0b5      	b.n	800422a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80a7 	beq.w	800422e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80040e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80a2 	beq.w	800422e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800410c:	647b      	str	r3, [r7, #68]	; 0x44
 800410e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800411a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e4      	bne.n	80040ea <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3308      	adds	r3, #8
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	623b      	str	r3, [r7, #32]
   return(result);
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3308      	adds	r3, #8
 8004140:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004144:	633a      	str	r2, [r7, #48]	; 0x30
 8004146:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004148:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800414a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414c:	e841 2300 	strex	r3, r2, [r1]
 8004150:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1e3      	bne.n	8004120 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	60fb      	str	r3, [r7, #12]
   return(result);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0310 	bic.w	r3, r3, #16
 800417e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	69b9      	ldr	r1, [r7, #24]
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	617b      	str	r3, [r7, #20]
   return(result);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e4      	bne.n	800416a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041a4:	4619      	mov	r1, r3
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f852 	bl	8004250 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041ac:	e03f      	b.n	800422e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00e      	beq.n	80041d8 <HAL_UART_IRQHandler+0x55c>
 80041ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f849 	bl	8004268 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041d6:	e02d      	b.n	8004234 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80041d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00e      	beq.n	8004202 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80041e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01c      	beq.n	8004232 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	4798      	blx	r3
    }
    return;
 8004200:	e017      	b.n	8004232 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d012      	beq.n	8004234 <HAL_UART_IRQHandler+0x5b8>
 800420e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00c      	beq.n	8004234 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fd75 	bl	8004d0a <UART_EndTransmit_IT>
    return;
 8004220:	e008      	b.n	8004234 <HAL_UART_IRQHandler+0x5b8>
      return;
 8004222:	bf00      	nop
 8004224:	e006      	b.n	8004234 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004226:	bf00      	nop
 8004228:	e004      	b.n	8004234 <HAL_UART_IRQHandler+0x5b8>
      return;
 800422a:	bf00      	nop
 800422c:	e002      	b.n	8004234 <HAL_UART_IRQHandler+0x5b8>
      return;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <HAL_UART_IRQHandler+0x5b8>
    return;
 8004232:	bf00      	nop
  }

}
 8004234:	37e8      	adds	r7, #232	; 0xe8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop

0800423c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004284:	2300      	movs	r3, #0
 8004286:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4ba7      	ldr	r3, [pc, #668]	; (8004544 <UART_SetConfig+0x2c8>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6812      	ldr	r2, [r2, #0]
 80042ae:	6979      	ldr	r1, [r7, #20]
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a95      	ldr	r2, [pc, #596]	; (8004548 <UART_SetConfig+0x2cc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d120      	bne.n	800433a <UART_SetConfig+0xbe>
 80042f8:	4b94      	ldr	r3, [pc, #592]	; (800454c <UART_SetConfig+0x2d0>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b03      	cmp	r3, #3
 8004304:	d816      	bhi.n	8004334 <UART_SetConfig+0xb8>
 8004306:	a201      	add	r2, pc, #4	; (adr r2, 800430c <UART_SetConfig+0x90>)
 8004308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430c:	0800431d 	.word	0x0800431d
 8004310:	08004329 	.word	0x08004329
 8004314:	08004323 	.word	0x08004323
 8004318:	0800432f 	.word	0x0800432f
 800431c:	2301      	movs	r3, #1
 800431e:	77fb      	strb	r3, [r7, #31]
 8004320:	e14f      	b.n	80045c2 <UART_SetConfig+0x346>
 8004322:	2302      	movs	r3, #2
 8004324:	77fb      	strb	r3, [r7, #31]
 8004326:	e14c      	b.n	80045c2 <UART_SetConfig+0x346>
 8004328:	2304      	movs	r3, #4
 800432a:	77fb      	strb	r3, [r7, #31]
 800432c:	e149      	b.n	80045c2 <UART_SetConfig+0x346>
 800432e:	2308      	movs	r3, #8
 8004330:	77fb      	strb	r3, [r7, #31]
 8004332:	e146      	b.n	80045c2 <UART_SetConfig+0x346>
 8004334:	2310      	movs	r3, #16
 8004336:	77fb      	strb	r3, [r7, #31]
 8004338:	e143      	b.n	80045c2 <UART_SetConfig+0x346>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a84      	ldr	r2, [pc, #528]	; (8004550 <UART_SetConfig+0x2d4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d132      	bne.n	80043aa <UART_SetConfig+0x12e>
 8004344:	4b81      	ldr	r3, [pc, #516]	; (800454c <UART_SetConfig+0x2d0>)
 8004346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b0c      	cmp	r3, #12
 8004350:	d828      	bhi.n	80043a4 <UART_SetConfig+0x128>
 8004352:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <UART_SetConfig+0xdc>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	0800438d 	.word	0x0800438d
 800435c:	080043a5 	.word	0x080043a5
 8004360:	080043a5 	.word	0x080043a5
 8004364:	080043a5 	.word	0x080043a5
 8004368:	08004399 	.word	0x08004399
 800436c:	080043a5 	.word	0x080043a5
 8004370:	080043a5 	.word	0x080043a5
 8004374:	080043a5 	.word	0x080043a5
 8004378:	08004393 	.word	0x08004393
 800437c:	080043a5 	.word	0x080043a5
 8004380:	080043a5 	.word	0x080043a5
 8004384:	080043a5 	.word	0x080043a5
 8004388:	0800439f 	.word	0x0800439f
 800438c:	2300      	movs	r3, #0
 800438e:	77fb      	strb	r3, [r7, #31]
 8004390:	e117      	b.n	80045c2 <UART_SetConfig+0x346>
 8004392:	2302      	movs	r3, #2
 8004394:	77fb      	strb	r3, [r7, #31]
 8004396:	e114      	b.n	80045c2 <UART_SetConfig+0x346>
 8004398:	2304      	movs	r3, #4
 800439a:	77fb      	strb	r3, [r7, #31]
 800439c:	e111      	b.n	80045c2 <UART_SetConfig+0x346>
 800439e:	2308      	movs	r3, #8
 80043a0:	77fb      	strb	r3, [r7, #31]
 80043a2:	e10e      	b.n	80045c2 <UART_SetConfig+0x346>
 80043a4:	2310      	movs	r3, #16
 80043a6:	77fb      	strb	r3, [r7, #31]
 80043a8:	e10b      	b.n	80045c2 <UART_SetConfig+0x346>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a69      	ldr	r2, [pc, #420]	; (8004554 <UART_SetConfig+0x2d8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d120      	bne.n	80043f6 <UART_SetConfig+0x17a>
 80043b4:	4b65      	ldr	r3, [pc, #404]	; (800454c <UART_SetConfig+0x2d0>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043be:	2b30      	cmp	r3, #48	; 0x30
 80043c0:	d013      	beq.n	80043ea <UART_SetConfig+0x16e>
 80043c2:	2b30      	cmp	r3, #48	; 0x30
 80043c4:	d814      	bhi.n	80043f0 <UART_SetConfig+0x174>
 80043c6:	2b20      	cmp	r3, #32
 80043c8:	d009      	beq.n	80043de <UART_SetConfig+0x162>
 80043ca:	2b20      	cmp	r3, #32
 80043cc:	d810      	bhi.n	80043f0 <UART_SetConfig+0x174>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <UART_SetConfig+0x15c>
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d006      	beq.n	80043e4 <UART_SetConfig+0x168>
 80043d6:	e00b      	b.n	80043f0 <UART_SetConfig+0x174>
 80043d8:	2300      	movs	r3, #0
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e0f1      	b.n	80045c2 <UART_SetConfig+0x346>
 80043de:	2302      	movs	r3, #2
 80043e0:	77fb      	strb	r3, [r7, #31]
 80043e2:	e0ee      	b.n	80045c2 <UART_SetConfig+0x346>
 80043e4:	2304      	movs	r3, #4
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	e0eb      	b.n	80045c2 <UART_SetConfig+0x346>
 80043ea:	2308      	movs	r3, #8
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e0e8      	b.n	80045c2 <UART_SetConfig+0x346>
 80043f0:	2310      	movs	r3, #16
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e0e5      	b.n	80045c2 <UART_SetConfig+0x346>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a57      	ldr	r2, [pc, #348]	; (8004558 <UART_SetConfig+0x2dc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d120      	bne.n	8004442 <UART_SetConfig+0x1c6>
 8004400:	4b52      	ldr	r3, [pc, #328]	; (800454c <UART_SetConfig+0x2d0>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800440a:	2bc0      	cmp	r3, #192	; 0xc0
 800440c:	d013      	beq.n	8004436 <UART_SetConfig+0x1ba>
 800440e:	2bc0      	cmp	r3, #192	; 0xc0
 8004410:	d814      	bhi.n	800443c <UART_SetConfig+0x1c0>
 8004412:	2b80      	cmp	r3, #128	; 0x80
 8004414:	d009      	beq.n	800442a <UART_SetConfig+0x1ae>
 8004416:	2b80      	cmp	r3, #128	; 0x80
 8004418:	d810      	bhi.n	800443c <UART_SetConfig+0x1c0>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <UART_SetConfig+0x1a8>
 800441e:	2b40      	cmp	r3, #64	; 0x40
 8004420:	d006      	beq.n	8004430 <UART_SetConfig+0x1b4>
 8004422:	e00b      	b.n	800443c <UART_SetConfig+0x1c0>
 8004424:	2300      	movs	r3, #0
 8004426:	77fb      	strb	r3, [r7, #31]
 8004428:	e0cb      	b.n	80045c2 <UART_SetConfig+0x346>
 800442a:	2302      	movs	r3, #2
 800442c:	77fb      	strb	r3, [r7, #31]
 800442e:	e0c8      	b.n	80045c2 <UART_SetConfig+0x346>
 8004430:	2304      	movs	r3, #4
 8004432:	77fb      	strb	r3, [r7, #31]
 8004434:	e0c5      	b.n	80045c2 <UART_SetConfig+0x346>
 8004436:	2308      	movs	r3, #8
 8004438:	77fb      	strb	r3, [r7, #31]
 800443a:	e0c2      	b.n	80045c2 <UART_SetConfig+0x346>
 800443c:	2310      	movs	r3, #16
 800443e:	77fb      	strb	r3, [r7, #31]
 8004440:	e0bf      	b.n	80045c2 <UART_SetConfig+0x346>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a45      	ldr	r2, [pc, #276]	; (800455c <UART_SetConfig+0x2e0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d125      	bne.n	8004498 <UART_SetConfig+0x21c>
 800444c:	4b3f      	ldr	r3, [pc, #252]	; (800454c <UART_SetConfig+0x2d0>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800445a:	d017      	beq.n	800448c <UART_SetConfig+0x210>
 800445c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004460:	d817      	bhi.n	8004492 <UART_SetConfig+0x216>
 8004462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004466:	d00b      	beq.n	8004480 <UART_SetConfig+0x204>
 8004468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800446c:	d811      	bhi.n	8004492 <UART_SetConfig+0x216>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <UART_SetConfig+0x1fe>
 8004472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004476:	d006      	beq.n	8004486 <UART_SetConfig+0x20a>
 8004478:	e00b      	b.n	8004492 <UART_SetConfig+0x216>
 800447a:	2300      	movs	r3, #0
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e0a0      	b.n	80045c2 <UART_SetConfig+0x346>
 8004480:	2302      	movs	r3, #2
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e09d      	b.n	80045c2 <UART_SetConfig+0x346>
 8004486:	2304      	movs	r3, #4
 8004488:	77fb      	strb	r3, [r7, #31]
 800448a:	e09a      	b.n	80045c2 <UART_SetConfig+0x346>
 800448c:	2308      	movs	r3, #8
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e097      	b.n	80045c2 <UART_SetConfig+0x346>
 8004492:	2310      	movs	r3, #16
 8004494:	77fb      	strb	r3, [r7, #31]
 8004496:	e094      	b.n	80045c2 <UART_SetConfig+0x346>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a30      	ldr	r2, [pc, #192]	; (8004560 <UART_SetConfig+0x2e4>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d125      	bne.n	80044ee <UART_SetConfig+0x272>
 80044a2:	4b2a      	ldr	r3, [pc, #168]	; (800454c <UART_SetConfig+0x2d0>)
 80044a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044b0:	d017      	beq.n	80044e2 <UART_SetConfig+0x266>
 80044b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044b6:	d817      	bhi.n	80044e8 <UART_SetConfig+0x26c>
 80044b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044bc:	d00b      	beq.n	80044d6 <UART_SetConfig+0x25a>
 80044be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c2:	d811      	bhi.n	80044e8 <UART_SetConfig+0x26c>
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <UART_SetConfig+0x254>
 80044c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044cc:	d006      	beq.n	80044dc <UART_SetConfig+0x260>
 80044ce:	e00b      	b.n	80044e8 <UART_SetConfig+0x26c>
 80044d0:	2301      	movs	r3, #1
 80044d2:	77fb      	strb	r3, [r7, #31]
 80044d4:	e075      	b.n	80045c2 <UART_SetConfig+0x346>
 80044d6:	2302      	movs	r3, #2
 80044d8:	77fb      	strb	r3, [r7, #31]
 80044da:	e072      	b.n	80045c2 <UART_SetConfig+0x346>
 80044dc:	2304      	movs	r3, #4
 80044de:	77fb      	strb	r3, [r7, #31]
 80044e0:	e06f      	b.n	80045c2 <UART_SetConfig+0x346>
 80044e2:	2308      	movs	r3, #8
 80044e4:	77fb      	strb	r3, [r7, #31]
 80044e6:	e06c      	b.n	80045c2 <UART_SetConfig+0x346>
 80044e8:	2310      	movs	r3, #16
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e069      	b.n	80045c2 <UART_SetConfig+0x346>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1c      	ldr	r2, [pc, #112]	; (8004564 <UART_SetConfig+0x2e8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d137      	bne.n	8004568 <UART_SetConfig+0x2ec>
 80044f8:	4b14      	ldr	r3, [pc, #80]	; (800454c <UART_SetConfig+0x2d0>)
 80044fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004502:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004506:	d017      	beq.n	8004538 <UART_SetConfig+0x2bc>
 8004508:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800450c:	d817      	bhi.n	800453e <UART_SetConfig+0x2c2>
 800450e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004512:	d00b      	beq.n	800452c <UART_SetConfig+0x2b0>
 8004514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004518:	d811      	bhi.n	800453e <UART_SetConfig+0x2c2>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <UART_SetConfig+0x2aa>
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004522:	d006      	beq.n	8004532 <UART_SetConfig+0x2b6>
 8004524:	e00b      	b.n	800453e <UART_SetConfig+0x2c2>
 8004526:	2300      	movs	r3, #0
 8004528:	77fb      	strb	r3, [r7, #31]
 800452a:	e04a      	b.n	80045c2 <UART_SetConfig+0x346>
 800452c:	2302      	movs	r3, #2
 800452e:	77fb      	strb	r3, [r7, #31]
 8004530:	e047      	b.n	80045c2 <UART_SetConfig+0x346>
 8004532:	2304      	movs	r3, #4
 8004534:	77fb      	strb	r3, [r7, #31]
 8004536:	e044      	b.n	80045c2 <UART_SetConfig+0x346>
 8004538:	2308      	movs	r3, #8
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e041      	b.n	80045c2 <UART_SetConfig+0x346>
 800453e:	2310      	movs	r3, #16
 8004540:	77fb      	strb	r3, [r7, #31]
 8004542:	e03e      	b.n	80045c2 <UART_SetConfig+0x346>
 8004544:	efff69f3 	.word	0xefff69f3
 8004548:	40011000 	.word	0x40011000
 800454c:	40023800 	.word	0x40023800
 8004550:	40004400 	.word	0x40004400
 8004554:	40004800 	.word	0x40004800
 8004558:	40004c00 	.word	0x40004c00
 800455c:	40005000 	.word	0x40005000
 8004560:	40011400 	.word	0x40011400
 8004564:	40007800 	.word	0x40007800
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a71      	ldr	r2, [pc, #452]	; (8004734 <UART_SetConfig+0x4b8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d125      	bne.n	80045be <UART_SetConfig+0x342>
 8004572:	4b71      	ldr	r3, [pc, #452]	; (8004738 <UART_SetConfig+0x4bc>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800457c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004580:	d017      	beq.n	80045b2 <UART_SetConfig+0x336>
 8004582:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004586:	d817      	bhi.n	80045b8 <UART_SetConfig+0x33c>
 8004588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458c:	d00b      	beq.n	80045a6 <UART_SetConfig+0x32a>
 800458e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004592:	d811      	bhi.n	80045b8 <UART_SetConfig+0x33c>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <UART_SetConfig+0x324>
 8004598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800459c:	d006      	beq.n	80045ac <UART_SetConfig+0x330>
 800459e:	e00b      	b.n	80045b8 <UART_SetConfig+0x33c>
 80045a0:	2300      	movs	r3, #0
 80045a2:	77fb      	strb	r3, [r7, #31]
 80045a4:	e00d      	b.n	80045c2 <UART_SetConfig+0x346>
 80045a6:	2302      	movs	r3, #2
 80045a8:	77fb      	strb	r3, [r7, #31]
 80045aa:	e00a      	b.n	80045c2 <UART_SetConfig+0x346>
 80045ac:	2304      	movs	r3, #4
 80045ae:	77fb      	strb	r3, [r7, #31]
 80045b0:	e007      	b.n	80045c2 <UART_SetConfig+0x346>
 80045b2:	2308      	movs	r3, #8
 80045b4:	77fb      	strb	r3, [r7, #31]
 80045b6:	e004      	b.n	80045c2 <UART_SetConfig+0x346>
 80045b8:	2310      	movs	r3, #16
 80045ba:	77fb      	strb	r3, [r7, #31]
 80045bc:	e001      	b.n	80045c2 <UART_SetConfig+0x346>
 80045be:	2310      	movs	r3, #16
 80045c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ca:	d15a      	bne.n	8004682 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80045cc:	7ffb      	ldrb	r3, [r7, #31]
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d827      	bhi.n	8004622 <UART_SetConfig+0x3a6>
 80045d2:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <UART_SetConfig+0x35c>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	080045fd 	.word	0x080045fd
 80045dc:	08004605 	.word	0x08004605
 80045e0:	0800460d 	.word	0x0800460d
 80045e4:	08004623 	.word	0x08004623
 80045e8:	08004613 	.word	0x08004613
 80045ec:	08004623 	.word	0x08004623
 80045f0:	08004623 	.word	0x08004623
 80045f4:	08004623 	.word	0x08004623
 80045f8:	0800461b 	.word	0x0800461b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045fc:	f7fe fd7c 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 8004600:	61b8      	str	r0, [r7, #24]
        break;
 8004602:	e013      	b.n	800462c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004604:	f7fe fd8c 	bl	8003120 <HAL_RCC_GetPCLK2Freq>
 8004608:	61b8      	str	r0, [r7, #24]
        break;
 800460a:	e00f      	b.n	800462c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800460c:	4b4b      	ldr	r3, [pc, #300]	; (800473c <UART_SetConfig+0x4c0>)
 800460e:	61bb      	str	r3, [r7, #24]
        break;
 8004610:	e00c      	b.n	800462c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004612:	f7fe fc83 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 8004616:	61b8      	str	r0, [r7, #24]
        break;
 8004618:	e008      	b.n	800462c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800461a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800461e:	61bb      	str	r3, [r7, #24]
        break;
 8004620:	e004      	b.n	800462c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	77bb      	strb	r3, [r7, #30]
        break;
 800462a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d074      	beq.n	800471c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	005a      	lsls	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	441a      	add	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	fbb2 f3f3 	udiv	r3, r2, r3
 8004646:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b0f      	cmp	r3, #15
 800464c:	d916      	bls.n	800467c <UART_SetConfig+0x400>
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d212      	bcs.n	800467c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	b29b      	uxth	r3, r3
 800465a:	f023 030f 	bic.w	r3, r3, #15
 800465e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	085b      	lsrs	r3, r3, #1
 8004664:	b29b      	uxth	r3, r3
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	b29a      	uxth	r2, r3
 800466c:	89fb      	ldrh	r3, [r7, #14]
 800466e:	4313      	orrs	r3, r2
 8004670:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	89fa      	ldrh	r2, [r7, #14]
 8004678:	60da      	str	r2, [r3, #12]
 800467a:	e04f      	b.n	800471c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	77bb      	strb	r3, [r7, #30]
 8004680:	e04c      	b.n	800471c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004682:	7ffb      	ldrb	r3, [r7, #31]
 8004684:	2b08      	cmp	r3, #8
 8004686:	d828      	bhi.n	80046da <UART_SetConfig+0x45e>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0x414>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046bd 	.word	0x080046bd
 8004698:	080046c5 	.word	0x080046c5
 800469c:	080046db 	.word	0x080046db
 80046a0:	080046cb 	.word	0x080046cb
 80046a4:	080046db 	.word	0x080046db
 80046a8:	080046db 	.word	0x080046db
 80046ac:	080046db 	.word	0x080046db
 80046b0:	080046d3 	.word	0x080046d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b4:	f7fe fd20 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 80046b8:	61b8      	str	r0, [r7, #24]
        break;
 80046ba:	e013      	b.n	80046e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046bc:	f7fe fd30 	bl	8003120 <HAL_RCC_GetPCLK2Freq>
 80046c0:	61b8      	str	r0, [r7, #24]
        break;
 80046c2:	e00f      	b.n	80046e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c4:	4b1d      	ldr	r3, [pc, #116]	; (800473c <UART_SetConfig+0x4c0>)
 80046c6:	61bb      	str	r3, [r7, #24]
        break;
 80046c8:	e00c      	b.n	80046e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ca:	f7fe fc27 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 80046ce:	61b8      	str	r0, [r7, #24]
        break;
 80046d0:	e008      	b.n	80046e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d6:	61bb      	str	r3, [r7, #24]
        break;
 80046d8:	e004      	b.n	80046e4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	77bb      	strb	r3, [r7, #30]
        break;
 80046e2:	bf00      	nop
    }

    if (pclk != 0U)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d018      	beq.n	800471c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	085a      	lsrs	r2, r3, #1
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	441a      	add	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	2b0f      	cmp	r3, #15
 8004702:	d909      	bls.n	8004718 <UART_SetConfig+0x49c>
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470a:	d205      	bcs.n	8004718 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	e001      	b.n	800471c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004728:	7fbb      	ldrb	r3, [r7, #30]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40007c00 	.word	0x40007c00
 8004738:	40023800 	.word	0x40023800
 800473c:	00f42400 	.word	0x00f42400

08004740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01a      	beq.n	8004856 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483e:	d10a      	bne.n	8004856 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	605a      	str	r2, [r3, #4]
  }
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af02      	add	r7, sp, #8
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004894:	f7fc fc6a 	bl	800116c <HAL_GetTick>
 8004898:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d10e      	bne.n	80048c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f82d 	bl	8004916 <UART_WaitOnFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e023      	b.n	800490e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d10e      	bne.n	80048f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f817 	bl	8004916 <UART_WaitOnFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e00d      	b.n	800490e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b09c      	sub	sp, #112	; 0x70
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	603b      	str	r3, [r7, #0]
 8004922:	4613      	mov	r3, r2
 8004924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004926:	e0a5      	b.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	f000 80a1 	beq.w	8004a74 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004932:	f7fc fc1b 	bl	800116c <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <UART_WaitOnFlagUntilTimeout+0x32>
 8004942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004944:	2b00      	cmp	r3, #0
 8004946:	d13e      	bne.n	80049c6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004958:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800495c:	667b      	str	r3, [r7, #100]	; 0x64
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004966:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004968:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800496c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800496e:	e841 2300 	strex	r3, r2, [r1]
 8004972:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1e6      	bne.n	8004948 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3308      	adds	r3, #8
 8004980:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	f023 0301 	bic.w	r3, r3, #1
 8004990:	663b      	str	r3, [r7, #96]	; 0x60
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3308      	adds	r3, #8
 8004998:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800499a:	64ba      	str	r2, [r7, #72]	; 0x48
 800499c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e5      	bne.n	800497a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2220      	movs	r2, #32
 80049b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e067      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d04f      	beq.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e2:	d147      	bne.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e6      	bne.n	80049ee <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3308      	adds	r3, #8
 8004a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a40:	623a      	str	r2, [r7, #32]
 8004a42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	69f9      	ldr	r1, [r7, #28]
 8004a46:	6a3a      	ldr	r2, [r7, #32]
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e5      	bne.n	8004a20 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e010      	b.n	8004a96 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69da      	ldr	r2, [r3, #28]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	f43f af4a 	beq.w	8004928 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3770      	adds	r7, #112	; 0x70
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b089      	sub	sp, #36	; 0x24
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	e853 3f00 	ldrex	r3, [r3]
 8004ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	61bb      	str	r3, [r7, #24]
 8004ac6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac8:	6979      	ldr	r1, [r7, #20]
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	e841 2300 	strex	r3, r2, [r1]
 8004ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1e6      	bne.n	8004aa6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	679a      	str	r2, [r3, #120]	; 0x78
}
 8004ade:	bf00      	nop
 8004ae0:	3724      	adds	r7, #36	; 0x24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b095      	sub	sp, #84	; 0x54
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b10:	643b      	str	r3, [r7, #64]	; 0x40
 8004b12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e6      	bne.n	8004af2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3308      	adds	r3, #8
 8004b2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f023 0301 	bic.w	r3, r3, #1
 8004b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3308      	adds	r3, #8
 8004b42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b4c:	e841 2300 	strex	r3, r2, [r1]
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1e5      	bne.n	8004b24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d118      	bne.n	8004b92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f023 0310 	bic.w	r3, r3, #16
 8004b74:	647b      	str	r3, [r7, #68]	; 0x44
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6979      	ldr	r1, [r7, #20]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e6      	bne.n	8004b60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004ba4:	bf00      	nop
 8004ba6:	3754      	adds	r7, #84	; 0x54
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b090      	sub	sp, #64	; 0x40
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc6:	d037      	beq.n	8004c38 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8004bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	623b      	str	r3, [r7, #32]
   return(result);
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3308      	adds	r3, #8
 8004bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bf0:	633a      	str	r2, [r7, #48]	; 0x30
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e5      	bne.n	8004bd0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
 8004c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c22:	61fb      	str	r3, [r7, #28]
 8004c24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	69b9      	ldr	r1, [r7, #24]
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	617b      	str	r3, [r7, #20]
   return(result);
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1e6      	bne.n	8004c04 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c36:	e002      	b.n	8004c3e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8004c38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c3a:	f7fb ff7f 	bl	8000b3c <HAL_UART_TxCpltCallback>
}
 8004c3e:	bf00      	nop
 8004c40:	3740      	adds	r7, #64	; 0x40
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b084      	sub	sp, #16
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f7fb ffaf 	bl	8000bb8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c74:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c86:	2b80      	cmp	r3, #128	; 0x80
 8004c88:	d109      	bne.n	8004c9e <UART_DMAError+0x3c>
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b21      	cmp	r3, #33	; 0x21
 8004c8e:	d106      	bne.n	8004c9e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8004c98:	6978      	ldr	r0, [r7, #20]
 8004c9a:	f7ff ff00 	bl	8004a9e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	d109      	bne.n	8004cc0 <UART_DMAError+0x5e>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b22      	cmp	r3, #34	; 0x22
 8004cb0:	d106      	bne.n	8004cc0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004cba:	6978      	ldr	r0, [r7, #20]
 8004cbc:	f7ff ff15 	bl	8004aea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc6:	f043 0210 	orr.w	r2, r3, #16
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cd0:	6978      	ldr	r0, [r7, #20]
 8004cd2:	f7ff fab3 	bl	800423c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cd6:	bf00      	nop
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff fa9d 	bl	800423c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b088      	sub	sp, #32
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	61bb      	str	r3, [r7, #24]
 8004d32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6979      	ldr	r1, [r7, #20]
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e6      	bne.n	8004d12 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7fb fef3 	bl	8000b3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d56:	bf00      	nop
 8004d58:	3720      	adds	r7, #32
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <__errno>:
 8004d60:	4b01      	ldr	r3, [pc, #4]	; (8004d68 <__errno+0x8>)
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	20000020 	.word	0x20000020

08004d6c <__libc_init_array>:
 8004d6c:	b570      	push	{r4, r5, r6, lr}
 8004d6e:	4d0d      	ldr	r5, [pc, #52]	; (8004da4 <__libc_init_array+0x38>)
 8004d70:	4c0d      	ldr	r4, [pc, #52]	; (8004da8 <__libc_init_array+0x3c>)
 8004d72:	1b64      	subs	r4, r4, r5
 8004d74:	10a4      	asrs	r4, r4, #2
 8004d76:	2600      	movs	r6, #0
 8004d78:	42a6      	cmp	r6, r4
 8004d7a:	d109      	bne.n	8004d90 <__libc_init_array+0x24>
 8004d7c:	4d0b      	ldr	r5, [pc, #44]	; (8004dac <__libc_init_array+0x40>)
 8004d7e:	4c0c      	ldr	r4, [pc, #48]	; (8004db0 <__libc_init_array+0x44>)
 8004d80:	f000 fc4e 	bl	8005620 <_init>
 8004d84:	1b64      	subs	r4, r4, r5
 8004d86:	10a4      	asrs	r4, r4, #2
 8004d88:	2600      	movs	r6, #0
 8004d8a:	42a6      	cmp	r6, r4
 8004d8c:	d105      	bne.n	8004d9a <__libc_init_array+0x2e>
 8004d8e:	bd70      	pop	{r4, r5, r6, pc}
 8004d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d94:	4798      	blx	r3
 8004d96:	3601      	adds	r6, #1
 8004d98:	e7ee      	b.n	8004d78 <__libc_init_array+0xc>
 8004d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d9e:	4798      	blx	r3
 8004da0:	3601      	adds	r6, #1
 8004da2:	e7f2      	b.n	8004d8a <__libc_init_array+0x1e>
 8004da4:	0800575c 	.word	0x0800575c
 8004da8:	0800575c 	.word	0x0800575c
 8004dac:	0800575c 	.word	0x0800575c
 8004db0:	08005760 	.word	0x08005760

08004db4 <memcpy>:
 8004db4:	440a      	add	r2, r1
 8004db6:	4291      	cmp	r1, r2
 8004db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dbc:	d100      	bne.n	8004dc0 <memcpy+0xc>
 8004dbe:	4770      	bx	lr
 8004dc0:	b510      	push	{r4, lr}
 8004dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dca:	4291      	cmp	r1, r2
 8004dcc:	d1f9      	bne.n	8004dc2 <memcpy+0xe>
 8004dce:	bd10      	pop	{r4, pc}

08004dd0 <memset>:
 8004dd0:	4402      	add	r2, r0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d100      	bne.n	8004dda <memset+0xa>
 8004dd8:	4770      	bx	lr
 8004dda:	f803 1b01 	strb.w	r1, [r3], #1
 8004dde:	e7f9      	b.n	8004dd4 <memset+0x4>

08004de0 <siprintf>:
 8004de0:	b40e      	push	{r1, r2, r3}
 8004de2:	b500      	push	{lr}
 8004de4:	b09c      	sub	sp, #112	; 0x70
 8004de6:	ab1d      	add	r3, sp, #116	; 0x74
 8004de8:	9002      	str	r0, [sp, #8]
 8004dea:	9006      	str	r0, [sp, #24]
 8004dec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004df0:	4809      	ldr	r0, [pc, #36]	; (8004e18 <siprintf+0x38>)
 8004df2:	9107      	str	r1, [sp, #28]
 8004df4:	9104      	str	r1, [sp, #16]
 8004df6:	4909      	ldr	r1, [pc, #36]	; (8004e1c <siprintf+0x3c>)
 8004df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dfc:	9105      	str	r1, [sp, #20]
 8004dfe:	6800      	ldr	r0, [r0, #0]
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	a902      	add	r1, sp, #8
 8004e04:	f000 f868 	bl	8004ed8 <_svfiprintf_r>
 8004e08:	9b02      	ldr	r3, [sp, #8]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
 8004e0e:	b01c      	add	sp, #112	; 0x70
 8004e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e14:	b003      	add	sp, #12
 8004e16:	4770      	bx	lr
 8004e18:	20000020 	.word	0x20000020
 8004e1c:	ffff0208 	.word	0xffff0208

08004e20 <__ssputs_r>:
 8004e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e24:	688e      	ldr	r6, [r1, #8]
 8004e26:	429e      	cmp	r6, r3
 8004e28:	4682      	mov	sl, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	4690      	mov	r8, r2
 8004e2e:	461f      	mov	r7, r3
 8004e30:	d838      	bhi.n	8004ea4 <__ssputs_r+0x84>
 8004e32:	898a      	ldrh	r2, [r1, #12]
 8004e34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e38:	d032      	beq.n	8004ea0 <__ssputs_r+0x80>
 8004e3a:	6825      	ldr	r5, [r4, #0]
 8004e3c:	6909      	ldr	r1, [r1, #16]
 8004e3e:	eba5 0901 	sub.w	r9, r5, r1
 8004e42:	6965      	ldr	r5, [r4, #20]
 8004e44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	444b      	add	r3, r9
 8004e50:	106d      	asrs	r5, r5, #1
 8004e52:	429d      	cmp	r5, r3
 8004e54:	bf38      	it	cc
 8004e56:	461d      	movcc	r5, r3
 8004e58:	0553      	lsls	r3, r2, #21
 8004e5a:	d531      	bpl.n	8004ec0 <__ssputs_r+0xa0>
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	f000 fb39 	bl	80054d4 <_malloc_r>
 8004e62:	4606      	mov	r6, r0
 8004e64:	b950      	cbnz	r0, 8004e7c <__ssputs_r+0x5c>
 8004e66:	230c      	movs	r3, #12
 8004e68:	f8ca 3000 	str.w	r3, [sl]
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e72:	81a3      	strh	r3, [r4, #12]
 8004e74:	f04f 30ff 	mov.w	r0, #4294967295
 8004e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e7c:	6921      	ldr	r1, [r4, #16]
 8004e7e:	464a      	mov	r2, r9
 8004e80:	f7ff ff98 	bl	8004db4 <memcpy>
 8004e84:	89a3      	ldrh	r3, [r4, #12]
 8004e86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8e:	81a3      	strh	r3, [r4, #12]
 8004e90:	6126      	str	r6, [r4, #16]
 8004e92:	6165      	str	r5, [r4, #20]
 8004e94:	444e      	add	r6, r9
 8004e96:	eba5 0509 	sub.w	r5, r5, r9
 8004e9a:	6026      	str	r6, [r4, #0]
 8004e9c:	60a5      	str	r5, [r4, #8]
 8004e9e:	463e      	mov	r6, r7
 8004ea0:	42be      	cmp	r6, r7
 8004ea2:	d900      	bls.n	8004ea6 <__ssputs_r+0x86>
 8004ea4:	463e      	mov	r6, r7
 8004ea6:	4632      	mov	r2, r6
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	4641      	mov	r1, r8
 8004eac:	f000 faa8 	bl	8005400 <memmove>
 8004eb0:	68a3      	ldr	r3, [r4, #8]
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	1b9b      	subs	r3, r3, r6
 8004eb6:	4432      	add	r2, r6
 8004eb8:	60a3      	str	r3, [r4, #8]
 8004eba:	6022      	str	r2, [r4, #0]
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	e7db      	b.n	8004e78 <__ssputs_r+0x58>
 8004ec0:	462a      	mov	r2, r5
 8004ec2:	f000 fb61 	bl	8005588 <_realloc_r>
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	2800      	cmp	r0, #0
 8004eca:	d1e1      	bne.n	8004e90 <__ssputs_r+0x70>
 8004ecc:	6921      	ldr	r1, [r4, #16]
 8004ece:	4650      	mov	r0, sl
 8004ed0:	f000 fab0 	bl	8005434 <_free_r>
 8004ed4:	e7c7      	b.n	8004e66 <__ssputs_r+0x46>
	...

08004ed8 <_svfiprintf_r>:
 8004ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004edc:	4698      	mov	r8, r3
 8004ede:	898b      	ldrh	r3, [r1, #12]
 8004ee0:	061b      	lsls	r3, r3, #24
 8004ee2:	b09d      	sub	sp, #116	; 0x74
 8004ee4:	4607      	mov	r7, r0
 8004ee6:	460d      	mov	r5, r1
 8004ee8:	4614      	mov	r4, r2
 8004eea:	d50e      	bpl.n	8004f0a <_svfiprintf_r+0x32>
 8004eec:	690b      	ldr	r3, [r1, #16]
 8004eee:	b963      	cbnz	r3, 8004f0a <_svfiprintf_r+0x32>
 8004ef0:	2140      	movs	r1, #64	; 0x40
 8004ef2:	f000 faef 	bl	80054d4 <_malloc_r>
 8004ef6:	6028      	str	r0, [r5, #0]
 8004ef8:	6128      	str	r0, [r5, #16]
 8004efa:	b920      	cbnz	r0, 8004f06 <_svfiprintf_r+0x2e>
 8004efc:	230c      	movs	r3, #12
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	f04f 30ff 	mov.w	r0, #4294967295
 8004f04:	e0d1      	b.n	80050aa <_svfiprintf_r+0x1d2>
 8004f06:	2340      	movs	r3, #64	; 0x40
 8004f08:	616b      	str	r3, [r5, #20]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0e:	2320      	movs	r3, #32
 8004f10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f14:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f18:	2330      	movs	r3, #48	; 0x30
 8004f1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80050c4 <_svfiprintf_r+0x1ec>
 8004f1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f22:	f04f 0901 	mov.w	r9, #1
 8004f26:	4623      	mov	r3, r4
 8004f28:	469a      	mov	sl, r3
 8004f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f2e:	b10a      	cbz	r2, 8004f34 <_svfiprintf_r+0x5c>
 8004f30:	2a25      	cmp	r2, #37	; 0x25
 8004f32:	d1f9      	bne.n	8004f28 <_svfiprintf_r+0x50>
 8004f34:	ebba 0b04 	subs.w	fp, sl, r4
 8004f38:	d00b      	beq.n	8004f52 <_svfiprintf_r+0x7a>
 8004f3a:	465b      	mov	r3, fp
 8004f3c:	4622      	mov	r2, r4
 8004f3e:	4629      	mov	r1, r5
 8004f40:	4638      	mov	r0, r7
 8004f42:	f7ff ff6d 	bl	8004e20 <__ssputs_r>
 8004f46:	3001      	adds	r0, #1
 8004f48:	f000 80aa 	beq.w	80050a0 <_svfiprintf_r+0x1c8>
 8004f4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f4e:	445a      	add	r2, fp
 8004f50:	9209      	str	r2, [sp, #36]	; 0x24
 8004f52:	f89a 3000 	ldrb.w	r3, [sl]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 80a2 	beq.w	80050a0 <_svfiprintf_r+0x1c8>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f66:	f10a 0a01 	add.w	sl, sl, #1
 8004f6a:	9304      	str	r3, [sp, #16]
 8004f6c:	9307      	str	r3, [sp, #28]
 8004f6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f72:	931a      	str	r3, [sp, #104]	; 0x68
 8004f74:	4654      	mov	r4, sl
 8004f76:	2205      	movs	r2, #5
 8004f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f7c:	4851      	ldr	r0, [pc, #324]	; (80050c4 <_svfiprintf_r+0x1ec>)
 8004f7e:	f7fb f95f 	bl	8000240 <memchr>
 8004f82:	9a04      	ldr	r2, [sp, #16]
 8004f84:	b9d8      	cbnz	r0, 8004fbe <_svfiprintf_r+0xe6>
 8004f86:	06d0      	lsls	r0, r2, #27
 8004f88:	bf44      	itt	mi
 8004f8a:	2320      	movmi	r3, #32
 8004f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f90:	0711      	lsls	r1, r2, #28
 8004f92:	bf44      	itt	mi
 8004f94:	232b      	movmi	r3, #43	; 0x2b
 8004f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004fa0:	d015      	beq.n	8004fce <_svfiprintf_r+0xf6>
 8004fa2:	9a07      	ldr	r2, [sp, #28]
 8004fa4:	4654      	mov	r4, sl
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	f04f 0c0a 	mov.w	ip, #10
 8004fac:	4621      	mov	r1, r4
 8004fae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fb2:	3b30      	subs	r3, #48	; 0x30
 8004fb4:	2b09      	cmp	r3, #9
 8004fb6:	d94e      	bls.n	8005056 <_svfiprintf_r+0x17e>
 8004fb8:	b1b0      	cbz	r0, 8004fe8 <_svfiprintf_r+0x110>
 8004fba:	9207      	str	r2, [sp, #28]
 8004fbc:	e014      	b.n	8004fe8 <_svfiprintf_r+0x110>
 8004fbe:	eba0 0308 	sub.w	r3, r0, r8
 8004fc2:	fa09 f303 	lsl.w	r3, r9, r3
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	9304      	str	r3, [sp, #16]
 8004fca:	46a2      	mov	sl, r4
 8004fcc:	e7d2      	b.n	8004f74 <_svfiprintf_r+0x9c>
 8004fce:	9b03      	ldr	r3, [sp, #12]
 8004fd0:	1d19      	adds	r1, r3, #4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	9103      	str	r1, [sp, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	bfbb      	ittet	lt
 8004fda:	425b      	neglt	r3, r3
 8004fdc:	f042 0202 	orrlt.w	r2, r2, #2
 8004fe0:	9307      	strge	r3, [sp, #28]
 8004fe2:	9307      	strlt	r3, [sp, #28]
 8004fe4:	bfb8      	it	lt
 8004fe6:	9204      	strlt	r2, [sp, #16]
 8004fe8:	7823      	ldrb	r3, [r4, #0]
 8004fea:	2b2e      	cmp	r3, #46	; 0x2e
 8004fec:	d10c      	bne.n	8005008 <_svfiprintf_r+0x130>
 8004fee:	7863      	ldrb	r3, [r4, #1]
 8004ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ff2:	d135      	bne.n	8005060 <_svfiprintf_r+0x188>
 8004ff4:	9b03      	ldr	r3, [sp, #12]
 8004ff6:	1d1a      	adds	r2, r3, #4
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	9203      	str	r2, [sp, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	bfb8      	it	lt
 8005000:	f04f 33ff 	movlt.w	r3, #4294967295
 8005004:	3402      	adds	r4, #2
 8005006:	9305      	str	r3, [sp, #20]
 8005008:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80050d4 <_svfiprintf_r+0x1fc>
 800500c:	7821      	ldrb	r1, [r4, #0]
 800500e:	2203      	movs	r2, #3
 8005010:	4650      	mov	r0, sl
 8005012:	f7fb f915 	bl	8000240 <memchr>
 8005016:	b140      	cbz	r0, 800502a <_svfiprintf_r+0x152>
 8005018:	2340      	movs	r3, #64	; 0x40
 800501a:	eba0 000a 	sub.w	r0, r0, sl
 800501e:	fa03 f000 	lsl.w	r0, r3, r0
 8005022:	9b04      	ldr	r3, [sp, #16]
 8005024:	4303      	orrs	r3, r0
 8005026:	3401      	adds	r4, #1
 8005028:	9304      	str	r3, [sp, #16]
 800502a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800502e:	4826      	ldr	r0, [pc, #152]	; (80050c8 <_svfiprintf_r+0x1f0>)
 8005030:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005034:	2206      	movs	r2, #6
 8005036:	f7fb f903 	bl	8000240 <memchr>
 800503a:	2800      	cmp	r0, #0
 800503c:	d038      	beq.n	80050b0 <_svfiprintf_r+0x1d8>
 800503e:	4b23      	ldr	r3, [pc, #140]	; (80050cc <_svfiprintf_r+0x1f4>)
 8005040:	bb1b      	cbnz	r3, 800508a <_svfiprintf_r+0x1b2>
 8005042:	9b03      	ldr	r3, [sp, #12]
 8005044:	3307      	adds	r3, #7
 8005046:	f023 0307 	bic.w	r3, r3, #7
 800504a:	3308      	adds	r3, #8
 800504c:	9303      	str	r3, [sp, #12]
 800504e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005050:	4433      	add	r3, r6
 8005052:	9309      	str	r3, [sp, #36]	; 0x24
 8005054:	e767      	b.n	8004f26 <_svfiprintf_r+0x4e>
 8005056:	fb0c 3202 	mla	r2, ip, r2, r3
 800505a:	460c      	mov	r4, r1
 800505c:	2001      	movs	r0, #1
 800505e:	e7a5      	b.n	8004fac <_svfiprintf_r+0xd4>
 8005060:	2300      	movs	r3, #0
 8005062:	3401      	adds	r4, #1
 8005064:	9305      	str	r3, [sp, #20]
 8005066:	4619      	mov	r1, r3
 8005068:	f04f 0c0a 	mov.w	ip, #10
 800506c:	4620      	mov	r0, r4
 800506e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005072:	3a30      	subs	r2, #48	; 0x30
 8005074:	2a09      	cmp	r2, #9
 8005076:	d903      	bls.n	8005080 <_svfiprintf_r+0x1a8>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0c5      	beq.n	8005008 <_svfiprintf_r+0x130>
 800507c:	9105      	str	r1, [sp, #20]
 800507e:	e7c3      	b.n	8005008 <_svfiprintf_r+0x130>
 8005080:	fb0c 2101 	mla	r1, ip, r1, r2
 8005084:	4604      	mov	r4, r0
 8005086:	2301      	movs	r3, #1
 8005088:	e7f0      	b.n	800506c <_svfiprintf_r+0x194>
 800508a:	ab03      	add	r3, sp, #12
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	462a      	mov	r2, r5
 8005090:	4b0f      	ldr	r3, [pc, #60]	; (80050d0 <_svfiprintf_r+0x1f8>)
 8005092:	a904      	add	r1, sp, #16
 8005094:	4638      	mov	r0, r7
 8005096:	f3af 8000 	nop.w
 800509a:	1c42      	adds	r2, r0, #1
 800509c:	4606      	mov	r6, r0
 800509e:	d1d6      	bne.n	800504e <_svfiprintf_r+0x176>
 80050a0:	89ab      	ldrh	r3, [r5, #12]
 80050a2:	065b      	lsls	r3, r3, #25
 80050a4:	f53f af2c 	bmi.w	8004f00 <_svfiprintf_r+0x28>
 80050a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050aa:	b01d      	add	sp, #116	; 0x74
 80050ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b0:	ab03      	add	r3, sp, #12
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	462a      	mov	r2, r5
 80050b6:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <_svfiprintf_r+0x1f8>)
 80050b8:	a904      	add	r1, sp, #16
 80050ba:	4638      	mov	r0, r7
 80050bc:	f000 f87a 	bl	80051b4 <_printf_i>
 80050c0:	e7eb      	b.n	800509a <_svfiprintf_r+0x1c2>
 80050c2:	bf00      	nop
 80050c4:	08005720 	.word	0x08005720
 80050c8:	0800572a 	.word	0x0800572a
 80050cc:	00000000 	.word	0x00000000
 80050d0:	08004e21 	.word	0x08004e21
 80050d4:	08005726 	.word	0x08005726

080050d8 <_printf_common>:
 80050d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050dc:	4616      	mov	r6, r2
 80050de:	4699      	mov	r9, r3
 80050e0:	688a      	ldr	r2, [r1, #8]
 80050e2:	690b      	ldr	r3, [r1, #16]
 80050e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050e8:	4293      	cmp	r3, r2
 80050ea:	bfb8      	it	lt
 80050ec:	4613      	movlt	r3, r2
 80050ee:	6033      	str	r3, [r6, #0]
 80050f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050f4:	4607      	mov	r7, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	b10a      	cbz	r2, 80050fe <_printf_common+0x26>
 80050fa:	3301      	adds	r3, #1
 80050fc:	6033      	str	r3, [r6, #0]
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	0699      	lsls	r1, r3, #26
 8005102:	bf42      	ittt	mi
 8005104:	6833      	ldrmi	r3, [r6, #0]
 8005106:	3302      	addmi	r3, #2
 8005108:	6033      	strmi	r3, [r6, #0]
 800510a:	6825      	ldr	r5, [r4, #0]
 800510c:	f015 0506 	ands.w	r5, r5, #6
 8005110:	d106      	bne.n	8005120 <_printf_common+0x48>
 8005112:	f104 0a19 	add.w	sl, r4, #25
 8005116:	68e3      	ldr	r3, [r4, #12]
 8005118:	6832      	ldr	r2, [r6, #0]
 800511a:	1a9b      	subs	r3, r3, r2
 800511c:	42ab      	cmp	r3, r5
 800511e:	dc26      	bgt.n	800516e <_printf_common+0x96>
 8005120:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005124:	1e13      	subs	r3, r2, #0
 8005126:	6822      	ldr	r2, [r4, #0]
 8005128:	bf18      	it	ne
 800512a:	2301      	movne	r3, #1
 800512c:	0692      	lsls	r2, r2, #26
 800512e:	d42b      	bmi.n	8005188 <_printf_common+0xb0>
 8005130:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005134:	4649      	mov	r1, r9
 8005136:	4638      	mov	r0, r7
 8005138:	47c0      	blx	r8
 800513a:	3001      	adds	r0, #1
 800513c:	d01e      	beq.n	800517c <_printf_common+0xa4>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	68e5      	ldr	r5, [r4, #12]
 8005142:	6832      	ldr	r2, [r6, #0]
 8005144:	f003 0306 	and.w	r3, r3, #6
 8005148:	2b04      	cmp	r3, #4
 800514a:	bf08      	it	eq
 800514c:	1aad      	subeq	r5, r5, r2
 800514e:	68a3      	ldr	r3, [r4, #8]
 8005150:	6922      	ldr	r2, [r4, #16]
 8005152:	bf0c      	ite	eq
 8005154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005158:	2500      	movne	r5, #0
 800515a:	4293      	cmp	r3, r2
 800515c:	bfc4      	itt	gt
 800515e:	1a9b      	subgt	r3, r3, r2
 8005160:	18ed      	addgt	r5, r5, r3
 8005162:	2600      	movs	r6, #0
 8005164:	341a      	adds	r4, #26
 8005166:	42b5      	cmp	r5, r6
 8005168:	d11a      	bne.n	80051a0 <_printf_common+0xc8>
 800516a:	2000      	movs	r0, #0
 800516c:	e008      	b.n	8005180 <_printf_common+0xa8>
 800516e:	2301      	movs	r3, #1
 8005170:	4652      	mov	r2, sl
 8005172:	4649      	mov	r1, r9
 8005174:	4638      	mov	r0, r7
 8005176:	47c0      	blx	r8
 8005178:	3001      	adds	r0, #1
 800517a:	d103      	bne.n	8005184 <_printf_common+0xac>
 800517c:	f04f 30ff 	mov.w	r0, #4294967295
 8005180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005184:	3501      	adds	r5, #1
 8005186:	e7c6      	b.n	8005116 <_printf_common+0x3e>
 8005188:	18e1      	adds	r1, r4, r3
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	2030      	movs	r0, #48	; 0x30
 800518e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005192:	4422      	add	r2, r4
 8005194:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005198:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800519c:	3302      	adds	r3, #2
 800519e:	e7c7      	b.n	8005130 <_printf_common+0x58>
 80051a0:	2301      	movs	r3, #1
 80051a2:	4622      	mov	r2, r4
 80051a4:	4649      	mov	r1, r9
 80051a6:	4638      	mov	r0, r7
 80051a8:	47c0      	blx	r8
 80051aa:	3001      	adds	r0, #1
 80051ac:	d0e6      	beq.n	800517c <_printf_common+0xa4>
 80051ae:	3601      	adds	r6, #1
 80051b0:	e7d9      	b.n	8005166 <_printf_common+0x8e>
	...

080051b4 <_printf_i>:
 80051b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051b8:	460c      	mov	r4, r1
 80051ba:	4691      	mov	r9, r2
 80051bc:	7e27      	ldrb	r7, [r4, #24]
 80051be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051c0:	2f78      	cmp	r7, #120	; 0x78
 80051c2:	4680      	mov	r8, r0
 80051c4:	469a      	mov	sl, r3
 80051c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051ca:	d807      	bhi.n	80051dc <_printf_i+0x28>
 80051cc:	2f62      	cmp	r7, #98	; 0x62
 80051ce:	d80a      	bhi.n	80051e6 <_printf_i+0x32>
 80051d0:	2f00      	cmp	r7, #0
 80051d2:	f000 80d8 	beq.w	8005386 <_printf_i+0x1d2>
 80051d6:	2f58      	cmp	r7, #88	; 0x58
 80051d8:	f000 80a3 	beq.w	8005322 <_printf_i+0x16e>
 80051dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051e4:	e03a      	b.n	800525c <_printf_i+0xa8>
 80051e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051ea:	2b15      	cmp	r3, #21
 80051ec:	d8f6      	bhi.n	80051dc <_printf_i+0x28>
 80051ee:	a001      	add	r0, pc, #4	; (adr r0, 80051f4 <_printf_i+0x40>)
 80051f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80051f4:	0800524d 	.word	0x0800524d
 80051f8:	08005261 	.word	0x08005261
 80051fc:	080051dd 	.word	0x080051dd
 8005200:	080051dd 	.word	0x080051dd
 8005204:	080051dd 	.word	0x080051dd
 8005208:	080051dd 	.word	0x080051dd
 800520c:	08005261 	.word	0x08005261
 8005210:	080051dd 	.word	0x080051dd
 8005214:	080051dd 	.word	0x080051dd
 8005218:	080051dd 	.word	0x080051dd
 800521c:	080051dd 	.word	0x080051dd
 8005220:	0800536d 	.word	0x0800536d
 8005224:	08005291 	.word	0x08005291
 8005228:	0800534f 	.word	0x0800534f
 800522c:	080051dd 	.word	0x080051dd
 8005230:	080051dd 	.word	0x080051dd
 8005234:	0800538f 	.word	0x0800538f
 8005238:	080051dd 	.word	0x080051dd
 800523c:	08005291 	.word	0x08005291
 8005240:	080051dd 	.word	0x080051dd
 8005244:	080051dd 	.word	0x080051dd
 8005248:	08005357 	.word	0x08005357
 800524c:	680b      	ldr	r3, [r1, #0]
 800524e:	1d1a      	adds	r2, r3, #4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	600a      	str	r2, [r1, #0]
 8005254:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800525c:	2301      	movs	r3, #1
 800525e:	e0a3      	b.n	80053a8 <_printf_i+0x1f4>
 8005260:	6825      	ldr	r5, [r4, #0]
 8005262:	6808      	ldr	r0, [r1, #0]
 8005264:	062e      	lsls	r6, r5, #24
 8005266:	f100 0304 	add.w	r3, r0, #4
 800526a:	d50a      	bpl.n	8005282 <_printf_i+0xce>
 800526c:	6805      	ldr	r5, [r0, #0]
 800526e:	600b      	str	r3, [r1, #0]
 8005270:	2d00      	cmp	r5, #0
 8005272:	da03      	bge.n	800527c <_printf_i+0xc8>
 8005274:	232d      	movs	r3, #45	; 0x2d
 8005276:	426d      	negs	r5, r5
 8005278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800527c:	485e      	ldr	r0, [pc, #376]	; (80053f8 <_printf_i+0x244>)
 800527e:	230a      	movs	r3, #10
 8005280:	e019      	b.n	80052b6 <_printf_i+0x102>
 8005282:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005286:	6805      	ldr	r5, [r0, #0]
 8005288:	600b      	str	r3, [r1, #0]
 800528a:	bf18      	it	ne
 800528c:	b22d      	sxthne	r5, r5
 800528e:	e7ef      	b.n	8005270 <_printf_i+0xbc>
 8005290:	680b      	ldr	r3, [r1, #0]
 8005292:	6825      	ldr	r5, [r4, #0]
 8005294:	1d18      	adds	r0, r3, #4
 8005296:	6008      	str	r0, [r1, #0]
 8005298:	0628      	lsls	r0, r5, #24
 800529a:	d501      	bpl.n	80052a0 <_printf_i+0xec>
 800529c:	681d      	ldr	r5, [r3, #0]
 800529e:	e002      	b.n	80052a6 <_printf_i+0xf2>
 80052a0:	0669      	lsls	r1, r5, #25
 80052a2:	d5fb      	bpl.n	800529c <_printf_i+0xe8>
 80052a4:	881d      	ldrh	r5, [r3, #0]
 80052a6:	4854      	ldr	r0, [pc, #336]	; (80053f8 <_printf_i+0x244>)
 80052a8:	2f6f      	cmp	r7, #111	; 0x6f
 80052aa:	bf0c      	ite	eq
 80052ac:	2308      	moveq	r3, #8
 80052ae:	230a      	movne	r3, #10
 80052b0:	2100      	movs	r1, #0
 80052b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052b6:	6866      	ldr	r6, [r4, #4]
 80052b8:	60a6      	str	r6, [r4, #8]
 80052ba:	2e00      	cmp	r6, #0
 80052bc:	bfa2      	ittt	ge
 80052be:	6821      	ldrge	r1, [r4, #0]
 80052c0:	f021 0104 	bicge.w	r1, r1, #4
 80052c4:	6021      	strge	r1, [r4, #0]
 80052c6:	b90d      	cbnz	r5, 80052cc <_printf_i+0x118>
 80052c8:	2e00      	cmp	r6, #0
 80052ca:	d04d      	beq.n	8005368 <_printf_i+0x1b4>
 80052cc:	4616      	mov	r6, r2
 80052ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80052d2:	fb03 5711 	mls	r7, r3, r1, r5
 80052d6:	5dc7      	ldrb	r7, [r0, r7]
 80052d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052dc:	462f      	mov	r7, r5
 80052de:	42bb      	cmp	r3, r7
 80052e0:	460d      	mov	r5, r1
 80052e2:	d9f4      	bls.n	80052ce <_printf_i+0x11a>
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d10b      	bne.n	8005300 <_printf_i+0x14c>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	07df      	lsls	r7, r3, #31
 80052ec:	d508      	bpl.n	8005300 <_printf_i+0x14c>
 80052ee:	6923      	ldr	r3, [r4, #16]
 80052f0:	6861      	ldr	r1, [r4, #4]
 80052f2:	4299      	cmp	r1, r3
 80052f4:	bfde      	ittt	le
 80052f6:	2330      	movle	r3, #48	; 0x30
 80052f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005300:	1b92      	subs	r2, r2, r6
 8005302:	6122      	str	r2, [r4, #16]
 8005304:	f8cd a000 	str.w	sl, [sp]
 8005308:	464b      	mov	r3, r9
 800530a:	aa03      	add	r2, sp, #12
 800530c:	4621      	mov	r1, r4
 800530e:	4640      	mov	r0, r8
 8005310:	f7ff fee2 	bl	80050d8 <_printf_common>
 8005314:	3001      	adds	r0, #1
 8005316:	d14c      	bne.n	80053b2 <_printf_i+0x1fe>
 8005318:	f04f 30ff 	mov.w	r0, #4294967295
 800531c:	b004      	add	sp, #16
 800531e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005322:	4835      	ldr	r0, [pc, #212]	; (80053f8 <_printf_i+0x244>)
 8005324:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	680e      	ldr	r6, [r1, #0]
 800532c:	061f      	lsls	r7, r3, #24
 800532e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005332:	600e      	str	r6, [r1, #0]
 8005334:	d514      	bpl.n	8005360 <_printf_i+0x1ac>
 8005336:	07d9      	lsls	r1, r3, #31
 8005338:	bf44      	itt	mi
 800533a:	f043 0320 	orrmi.w	r3, r3, #32
 800533e:	6023      	strmi	r3, [r4, #0]
 8005340:	b91d      	cbnz	r5, 800534a <_printf_i+0x196>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	f023 0320 	bic.w	r3, r3, #32
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	2310      	movs	r3, #16
 800534c:	e7b0      	b.n	80052b0 <_printf_i+0xfc>
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	f043 0320 	orr.w	r3, r3, #32
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	2378      	movs	r3, #120	; 0x78
 8005358:	4828      	ldr	r0, [pc, #160]	; (80053fc <_printf_i+0x248>)
 800535a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800535e:	e7e3      	b.n	8005328 <_printf_i+0x174>
 8005360:	065e      	lsls	r6, r3, #25
 8005362:	bf48      	it	mi
 8005364:	b2ad      	uxthmi	r5, r5
 8005366:	e7e6      	b.n	8005336 <_printf_i+0x182>
 8005368:	4616      	mov	r6, r2
 800536a:	e7bb      	b.n	80052e4 <_printf_i+0x130>
 800536c:	680b      	ldr	r3, [r1, #0]
 800536e:	6826      	ldr	r6, [r4, #0]
 8005370:	6960      	ldr	r0, [r4, #20]
 8005372:	1d1d      	adds	r5, r3, #4
 8005374:	600d      	str	r5, [r1, #0]
 8005376:	0635      	lsls	r5, r6, #24
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	d501      	bpl.n	8005380 <_printf_i+0x1cc>
 800537c:	6018      	str	r0, [r3, #0]
 800537e:	e002      	b.n	8005386 <_printf_i+0x1d2>
 8005380:	0671      	lsls	r1, r6, #25
 8005382:	d5fb      	bpl.n	800537c <_printf_i+0x1c8>
 8005384:	8018      	strh	r0, [r3, #0]
 8005386:	2300      	movs	r3, #0
 8005388:	6123      	str	r3, [r4, #16]
 800538a:	4616      	mov	r6, r2
 800538c:	e7ba      	b.n	8005304 <_printf_i+0x150>
 800538e:	680b      	ldr	r3, [r1, #0]
 8005390:	1d1a      	adds	r2, r3, #4
 8005392:	600a      	str	r2, [r1, #0]
 8005394:	681e      	ldr	r6, [r3, #0]
 8005396:	6862      	ldr	r2, [r4, #4]
 8005398:	2100      	movs	r1, #0
 800539a:	4630      	mov	r0, r6
 800539c:	f7fa ff50 	bl	8000240 <memchr>
 80053a0:	b108      	cbz	r0, 80053a6 <_printf_i+0x1f2>
 80053a2:	1b80      	subs	r0, r0, r6
 80053a4:	6060      	str	r0, [r4, #4]
 80053a6:	6863      	ldr	r3, [r4, #4]
 80053a8:	6123      	str	r3, [r4, #16]
 80053aa:	2300      	movs	r3, #0
 80053ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053b0:	e7a8      	b.n	8005304 <_printf_i+0x150>
 80053b2:	6923      	ldr	r3, [r4, #16]
 80053b4:	4632      	mov	r2, r6
 80053b6:	4649      	mov	r1, r9
 80053b8:	4640      	mov	r0, r8
 80053ba:	47d0      	blx	sl
 80053bc:	3001      	adds	r0, #1
 80053be:	d0ab      	beq.n	8005318 <_printf_i+0x164>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	079b      	lsls	r3, r3, #30
 80053c4:	d413      	bmi.n	80053ee <_printf_i+0x23a>
 80053c6:	68e0      	ldr	r0, [r4, #12]
 80053c8:	9b03      	ldr	r3, [sp, #12]
 80053ca:	4298      	cmp	r0, r3
 80053cc:	bfb8      	it	lt
 80053ce:	4618      	movlt	r0, r3
 80053d0:	e7a4      	b.n	800531c <_printf_i+0x168>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4632      	mov	r2, r6
 80053d6:	4649      	mov	r1, r9
 80053d8:	4640      	mov	r0, r8
 80053da:	47d0      	blx	sl
 80053dc:	3001      	adds	r0, #1
 80053de:	d09b      	beq.n	8005318 <_printf_i+0x164>
 80053e0:	3501      	adds	r5, #1
 80053e2:	68e3      	ldr	r3, [r4, #12]
 80053e4:	9903      	ldr	r1, [sp, #12]
 80053e6:	1a5b      	subs	r3, r3, r1
 80053e8:	42ab      	cmp	r3, r5
 80053ea:	dcf2      	bgt.n	80053d2 <_printf_i+0x21e>
 80053ec:	e7eb      	b.n	80053c6 <_printf_i+0x212>
 80053ee:	2500      	movs	r5, #0
 80053f0:	f104 0619 	add.w	r6, r4, #25
 80053f4:	e7f5      	b.n	80053e2 <_printf_i+0x22e>
 80053f6:	bf00      	nop
 80053f8:	08005731 	.word	0x08005731
 80053fc:	08005742 	.word	0x08005742

08005400 <memmove>:
 8005400:	4288      	cmp	r0, r1
 8005402:	b510      	push	{r4, lr}
 8005404:	eb01 0402 	add.w	r4, r1, r2
 8005408:	d902      	bls.n	8005410 <memmove+0x10>
 800540a:	4284      	cmp	r4, r0
 800540c:	4623      	mov	r3, r4
 800540e:	d807      	bhi.n	8005420 <memmove+0x20>
 8005410:	1e43      	subs	r3, r0, #1
 8005412:	42a1      	cmp	r1, r4
 8005414:	d008      	beq.n	8005428 <memmove+0x28>
 8005416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800541a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800541e:	e7f8      	b.n	8005412 <memmove+0x12>
 8005420:	4402      	add	r2, r0
 8005422:	4601      	mov	r1, r0
 8005424:	428a      	cmp	r2, r1
 8005426:	d100      	bne.n	800542a <memmove+0x2a>
 8005428:	bd10      	pop	{r4, pc}
 800542a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800542e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005432:	e7f7      	b.n	8005424 <memmove+0x24>

08005434 <_free_r>:
 8005434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005436:	2900      	cmp	r1, #0
 8005438:	d048      	beq.n	80054cc <_free_r+0x98>
 800543a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800543e:	9001      	str	r0, [sp, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f1a1 0404 	sub.w	r4, r1, #4
 8005446:	bfb8      	it	lt
 8005448:	18e4      	addlt	r4, r4, r3
 800544a:	f000 f8d3 	bl	80055f4 <__malloc_lock>
 800544e:	4a20      	ldr	r2, [pc, #128]	; (80054d0 <_free_r+0x9c>)
 8005450:	9801      	ldr	r0, [sp, #4]
 8005452:	6813      	ldr	r3, [r2, #0]
 8005454:	4615      	mov	r5, r2
 8005456:	b933      	cbnz	r3, 8005466 <_free_r+0x32>
 8005458:	6063      	str	r3, [r4, #4]
 800545a:	6014      	str	r4, [r2, #0]
 800545c:	b003      	add	sp, #12
 800545e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005462:	f000 b8cd 	b.w	8005600 <__malloc_unlock>
 8005466:	42a3      	cmp	r3, r4
 8005468:	d90b      	bls.n	8005482 <_free_r+0x4e>
 800546a:	6821      	ldr	r1, [r4, #0]
 800546c:	1862      	adds	r2, r4, r1
 800546e:	4293      	cmp	r3, r2
 8005470:	bf04      	itt	eq
 8005472:	681a      	ldreq	r2, [r3, #0]
 8005474:	685b      	ldreq	r3, [r3, #4]
 8005476:	6063      	str	r3, [r4, #4]
 8005478:	bf04      	itt	eq
 800547a:	1852      	addeq	r2, r2, r1
 800547c:	6022      	streq	r2, [r4, #0]
 800547e:	602c      	str	r4, [r5, #0]
 8005480:	e7ec      	b.n	800545c <_free_r+0x28>
 8005482:	461a      	mov	r2, r3
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	b10b      	cbz	r3, 800548c <_free_r+0x58>
 8005488:	42a3      	cmp	r3, r4
 800548a:	d9fa      	bls.n	8005482 <_free_r+0x4e>
 800548c:	6811      	ldr	r1, [r2, #0]
 800548e:	1855      	adds	r5, r2, r1
 8005490:	42a5      	cmp	r5, r4
 8005492:	d10b      	bne.n	80054ac <_free_r+0x78>
 8005494:	6824      	ldr	r4, [r4, #0]
 8005496:	4421      	add	r1, r4
 8005498:	1854      	adds	r4, r2, r1
 800549a:	42a3      	cmp	r3, r4
 800549c:	6011      	str	r1, [r2, #0]
 800549e:	d1dd      	bne.n	800545c <_free_r+0x28>
 80054a0:	681c      	ldr	r4, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	6053      	str	r3, [r2, #4]
 80054a6:	4421      	add	r1, r4
 80054a8:	6011      	str	r1, [r2, #0]
 80054aa:	e7d7      	b.n	800545c <_free_r+0x28>
 80054ac:	d902      	bls.n	80054b4 <_free_r+0x80>
 80054ae:	230c      	movs	r3, #12
 80054b0:	6003      	str	r3, [r0, #0]
 80054b2:	e7d3      	b.n	800545c <_free_r+0x28>
 80054b4:	6825      	ldr	r5, [r4, #0]
 80054b6:	1961      	adds	r1, r4, r5
 80054b8:	428b      	cmp	r3, r1
 80054ba:	bf04      	itt	eq
 80054bc:	6819      	ldreq	r1, [r3, #0]
 80054be:	685b      	ldreq	r3, [r3, #4]
 80054c0:	6063      	str	r3, [r4, #4]
 80054c2:	bf04      	itt	eq
 80054c4:	1949      	addeq	r1, r1, r5
 80054c6:	6021      	streq	r1, [r4, #0]
 80054c8:	6054      	str	r4, [r2, #4]
 80054ca:	e7c7      	b.n	800545c <_free_r+0x28>
 80054cc:	b003      	add	sp, #12
 80054ce:	bd30      	pop	{r4, r5, pc}
 80054d0:	200000a8 	.word	0x200000a8

080054d4 <_malloc_r>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	1ccd      	adds	r5, r1, #3
 80054d8:	f025 0503 	bic.w	r5, r5, #3
 80054dc:	3508      	adds	r5, #8
 80054de:	2d0c      	cmp	r5, #12
 80054e0:	bf38      	it	cc
 80054e2:	250c      	movcc	r5, #12
 80054e4:	2d00      	cmp	r5, #0
 80054e6:	4606      	mov	r6, r0
 80054e8:	db01      	blt.n	80054ee <_malloc_r+0x1a>
 80054ea:	42a9      	cmp	r1, r5
 80054ec:	d903      	bls.n	80054f6 <_malloc_r+0x22>
 80054ee:	230c      	movs	r3, #12
 80054f0:	6033      	str	r3, [r6, #0]
 80054f2:	2000      	movs	r0, #0
 80054f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054f6:	f000 f87d 	bl	80055f4 <__malloc_lock>
 80054fa:	4921      	ldr	r1, [pc, #132]	; (8005580 <_malloc_r+0xac>)
 80054fc:	680a      	ldr	r2, [r1, #0]
 80054fe:	4614      	mov	r4, r2
 8005500:	b99c      	cbnz	r4, 800552a <_malloc_r+0x56>
 8005502:	4f20      	ldr	r7, [pc, #128]	; (8005584 <_malloc_r+0xb0>)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	b923      	cbnz	r3, 8005512 <_malloc_r+0x3e>
 8005508:	4621      	mov	r1, r4
 800550a:	4630      	mov	r0, r6
 800550c:	f000 f862 	bl	80055d4 <_sbrk_r>
 8005510:	6038      	str	r0, [r7, #0]
 8005512:	4629      	mov	r1, r5
 8005514:	4630      	mov	r0, r6
 8005516:	f000 f85d 	bl	80055d4 <_sbrk_r>
 800551a:	1c43      	adds	r3, r0, #1
 800551c:	d123      	bne.n	8005566 <_malloc_r+0x92>
 800551e:	230c      	movs	r3, #12
 8005520:	6033      	str	r3, [r6, #0]
 8005522:	4630      	mov	r0, r6
 8005524:	f000 f86c 	bl	8005600 <__malloc_unlock>
 8005528:	e7e3      	b.n	80054f2 <_malloc_r+0x1e>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	1b5b      	subs	r3, r3, r5
 800552e:	d417      	bmi.n	8005560 <_malloc_r+0x8c>
 8005530:	2b0b      	cmp	r3, #11
 8005532:	d903      	bls.n	800553c <_malloc_r+0x68>
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	441c      	add	r4, r3
 8005538:	6025      	str	r5, [r4, #0]
 800553a:	e004      	b.n	8005546 <_malloc_r+0x72>
 800553c:	6863      	ldr	r3, [r4, #4]
 800553e:	42a2      	cmp	r2, r4
 8005540:	bf0c      	ite	eq
 8005542:	600b      	streq	r3, [r1, #0]
 8005544:	6053      	strne	r3, [r2, #4]
 8005546:	4630      	mov	r0, r6
 8005548:	f000 f85a 	bl	8005600 <__malloc_unlock>
 800554c:	f104 000b 	add.w	r0, r4, #11
 8005550:	1d23      	adds	r3, r4, #4
 8005552:	f020 0007 	bic.w	r0, r0, #7
 8005556:	1ac2      	subs	r2, r0, r3
 8005558:	d0cc      	beq.n	80054f4 <_malloc_r+0x20>
 800555a:	1a1b      	subs	r3, r3, r0
 800555c:	50a3      	str	r3, [r4, r2]
 800555e:	e7c9      	b.n	80054f4 <_malloc_r+0x20>
 8005560:	4622      	mov	r2, r4
 8005562:	6864      	ldr	r4, [r4, #4]
 8005564:	e7cc      	b.n	8005500 <_malloc_r+0x2c>
 8005566:	1cc4      	adds	r4, r0, #3
 8005568:	f024 0403 	bic.w	r4, r4, #3
 800556c:	42a0      	cmp	r0, r4
 800556e:	d0e3      	beq.n	8005538 <_malloc_r+0x64>
 8005570:	1a21      	subs	r1, r4, r0
 8005572:	4630      	mov	r0, r6
 8005574:	f000 f82e 	bl	80055d4 <_sbrk_r>
 8005578:	3001      	adds	r0, #1
 800557a:	d1dd      	bne.n	8005538 <_malloc_r+0x64>
 800557c:	e7cf      	b.n	800551e <_malloc_r+0x4a>
 800557e:	bf00      	nop
 8005580:	200000a8 	.word	0x200000a8
 8005584:	200000ac 	.word	0x200000ac

08005588 <_realloc_r>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	4607      	mov	r7, r0
 800558c:	4614      	mov	r4, r2
 800558e:	460e      	mov	r6, r1
 8005590:	b921      	cbnz	r1, 800559c <_realloc_r+0x14>
 8005592:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005596:	4611      	mov	r1, r2
 8005598:	f7ff bf9c 	b.w	80054d4 <_malloc_r>
 800559c:	b922      	cbnz	r2, 80055a8 <_realloc_r+0x20>
 800559e:	f7ff ff49 	bl	8005434 <_free_r>
 80055a2:	4625      	mov	r5, r4
 80055a4:	4628      	mov	r0, r5
 80055a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055a8:	f000 f830 	bl	800560c <_malloc_usable_size_r>
 80055ac:	42a0      	cmp	r0, r4
 80055ae:	d20f      	bcs.n	80055d0 <_realloc_r+0x48>
 80055b0:	4621      	mov	r1, r4
 80055b2:	4638      	mov	r0, r7
 80055b4:	f7ff ff8e 	bl	80054d4 <_malloc_r>
 80055b8:	4605      	mov	r5, r0
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d0f2      	beq.n	80055a4 <_realloc_r+0x1c>
 80055be:	4631      	mov	r1, r6
 80055c0:	4622      	mov	r2, r4
 80055c2:	f7ff fbf7 	bl	8004db4 <memcpy>
 80055c6:	4631      	mov	r1, r6
 80055c8:	4638      	mov	r0, r7
 80055ca:	f7ff ff33 	bl	8005434 <_free_r>
 80055ce:	e7e9      	b.n	80055a4 <_realloc_r+0x1c>
 80055d0:	4635      	mov	r5, r6
 80055d2:	e7e7      	b.n	80055a4 <_realloc_r+0x1c>

080055d4 <_sbrk_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	4d06      	ldr	r5, [pc, #24]	; (80055f0 <_sbrk_r+0x1c>)
 80055d8:	2300      	movs	r3, #0
 80055da:	4604      	mov	r4, r0
 80055dc:	4608      	mov	r0, r1
 80055de:	602b      	str	r3, [r5, #0]
 80055e0:	f7fb fd02 	bl	8000fe8 <_sbrk>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_sbrk_r+0x1a>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_sbrk_r+0x1a>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	20001288 	.word	0x20001288

080055f4 <__malloc_lock>:
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <__malloc_lock+0x8>)
 80055f6:	f000 b811 	b.w	800561c <__retarget_lock_acquire_recursive>
 80055fa:	bf00      	nop
 80055fc:	20001290 	.word	0x20001290

08005600 <__malloc_unlock>:
 8005600:	4801      	ldr	r0, [pc, #4]	; (8005608 <__malloc_unlock+0x8>)
 8005602:	f000 b80c 	b.w	800561e <__retarget_lock_release_recursive>
 8005606:	bf00      	nop
 8005608:	20001290 	.word	0x20001290

0800560c <_malloc_usable_size_r>:
 800560c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005610:	1f18      	subs	r0, r3, #4
 8005612:	2b00      	cmp	r3, #0
 8005614:	bfbc      	itt	lt
 8005616:	580b      	ldrlt	r3, [r1, r0]
 8005618:	18c0      	addlt	r0, r0, r3
 800561a:	4770      	bx	lr

0800561c <__retarget_lock_acquire_recursive>:
 800561c:	4770      	bx	lr

0800561e <__retarget_lock_release_recursive>:
 800561e:	4770      	bx	lr

08005620 <_init>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr

0800562c <_fini>:
 800562c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562e:	bf00      	nop
 8005630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005632:	bc08      	pop	{r3}
 8005634:	469e      	mov	lr, r3
 8005636:	4770      	bx	lr
